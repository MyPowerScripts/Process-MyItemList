{"ColumnNames":["List Item","Status","Term/Proc Times","Prompt Variable","Open Mutex","Synced Hash","Fake Error","Function Test","Static Variable","WasSuccess","Update Time 01","Update Time 02","Update Time 03","Update Time 04","Update Time 05","Update Time 06"],"Modules":{},"Functions":{"Example-Function":{"Name":"Example-Function","ScriptBlock":"\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Example Funciton\r\n    .DESCRIPTION\r\n      Example Funciton\r\n    .PARAMETER InputValue\r\n      Required Input Value\r\n    .EXAMPLE\r\n      Example-Function -InputValue $InputValue\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  Param (\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$InputValue\r\n  )\r\n  Write-Verbose -Message \"Enter Function $($MyInvocation.MyCommand)\"\r\n  \r\n  Return $InputValue\r\n  \r\n  Write-Verbose -Message \"Exit Function $($MyInvocation.MyCommand)\"\r\n"}},"Variables":{"PromptVariable":{"Name":"PromptVariable","Value":"*"},"StaticVariable":{"Name":"StaticVariable","Value":"Static"}},"ThreadCount":4,"ThreadScript":"\u003c#\r\n  .SYNOPSIS\r\n    Sample Runspace Pool Thread Script\r\n  .DESCRIPTION\r\n    Sample Runspace Pool Thread Script\r\n  .PARAMETER ListViewItem\r\n    ListViewItem Passed to the Thread Script\r\n\r\n    This Paramter is Required in your Thread Script\r\n  .EXAMPLE\r\n    Test-Script.ps$Columns[\"Status\"] -ListViewItem $ListViewItem\r\n  .NOTES\r\n    Sample Thread Script\r\n\r\n   -------------------------\r\n   ListViewItem Status Icons\r\n   -------------------------\r\n   $GoodIcon = Solid Green Circle\r\n   $BadIcon = Solid Red Circle\r\n   $InfoIcon = Solid Blue Circle\r\n   $CheckIcon = Checkmark\r\n   $ErrorIcon = Red X\r\n   $UpIcon = Green up Arrow \r\n   $DownIcon = Red Down Arrow\r\n\r\n#\u003e\r\n[CmdletBinding(DefaultParameterSetName = \"ByValue\")]\r\nParam (\r\n  [parameter(Mandatory = $True)]\r\n  [System.Windows.Forms.ListViewItem]$ListViewItem\r\n)\r\n\r\n# Set Preference Variables\r\n$ErrorActionPreference = \"Stop\"\r\n$VerbosePreference = \"SilentlyContinue\"\r\n$ProgressPreference = \"SilentlyContinue\"\r\n\r\n# -----------------------------------------------------\r\n# Build ListView Column Lookup Table\r\n#\r\n# Reference Columns by Name Incase Column Order Changes\r\n# -----------------------------------------------------\r\n$Columns = @{}\r\n$ListViewItem.ListView.Columns | ForEach-Object -Process { $Columns.Add($PSItem.Text, $PSItem.Index) }\r\n\r\n# ------------------------------------------------\r\n# Check if Thread was Already Completed and Exit\r\n#\r\n# One Column needs to be the Status the the Thread\r\n#  Status Messages are Customizable\r\n# ------------------------------------------------\r\nIf ($ListViewItem.SubItems[$Columns[\"Status\"]].Text -eq \"Completed\")\r\n{\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  Exit\r\n}\r\n\r\n# ----------------------------------------------------\r\n# Check if Threads are Paused and Update Thread Status\r\n#\r\n# You can add Multiple Checks for Pasue if Needed\r\n# ----------------------------------------------------\r\nIf ($SyncedHash.Pause)\r\n{\r\n  # Set Paused Status\r\n  $ListViewItem.SubItems[$Columns[\"Status\"]].Text = \"Pause\"\r\n  While ($SyncedHash.Pause)\r\n  {\r\n    [System.Threading.Thread]::Sleep(100)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------\r\n# Check For Termination and Update Thread Status\r\n#\r\n# You can add Multiple Checks for Termination if Needed\r\n# -----------------------------------------------------\r\nIf ($SyncedHash.Terminate)\r\n{\r\n  # Set Terminated Status and Return\r\n  $ListViewItem.SubItems[$Columns[\"Status\"]].Text = \"Terminated\"\r\n  $ListViewItem.SubItems[$Columns[\"Term/Proc Times\"]].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\n  $ListViewItem.ImageKey = $InfoIcon\r\n  Exit\r\n}\r\n\r\n# Set Proccessing Ststus\r\n$ListViewItem.SubItems[$Columns[\"Status\"]].Text = \"Processing\"\r\n$ListViewItem.SubItems[$Columns[\"Term/Proc Times\"]].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\n$WasSuccess = $True\r\n\r\n# Set Prompt Variable\r\n$ListViewItem.SubItems[$Columns[\"Prompt Variable\"]].Text = $PromptVariable\r\n\r\n# --------------------------------------------------\r\n# Get Curent List Item\r\n#\r\n# Coulmn 0 Always has the List Item to be Proccessed\r\n# --------------------------------------------------\r\n$CurentItem = $ListViewItem.SubItems[$Columns[\"List Item\"]].Text\r\n# For Testing you can Write to the Screen\r\nWrite-Host -Object \"Processing $($CurentItem)\"\r\n\r\n# --------------------------------------------------------------\r\n# Open and wait for Mutex\r\n# \r\n# This is to Pause the Thread Script if Access a Shared Resource\r\n#   and you need toi Limit to $Columns[\"Status\"] Thread at a Time\r\n#\r\n# Using a Mutext is Optional\r\n# --------------------------------------------------------------\r\n$MyMutex = [System.Threading.Mutex]::OpenExisting($Mutex)\r\n[Void]($MyMutex.WaitOne())\r\n\r\n# Set Date / Time when Mutext was Opened\r\n$ListViewItem.SubItems[$Columns[\"Open Mutex\"]].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\n\r\n# Access / Update Shared Resources\r\n# $CurrentItem | Out-File -Encoding ascii -FilePath \"C:\\SharedFile.txt\"\r\n\r\n# Release Mutex\r\n$MyMutex.ReleaseMutex()\r\n\r\n# --------------------------------------------------------------------------------\r\n# The Synced HashTable has an Object Property to share information between Threads\r\n# --------------------------------------------------------------------------------\r\nIf ([String]::IsNullOrEmpty($SyncedHash.Object))\r\n{\r\n  $SyncedHash.Object = \"First\"\r\n}\r\n$ListViewItem.SubItems[$Columns[\"Synced Hash\"]].Text = $SyncedHash.Object\r\n$SyncedHash.Object = $CurentItem\r\n\r\n\r\n# Random Number Generator\r\n$Random = [System.Random]::New()\r\n\r\n# ---------------------------------------------------------\r\n# Gernate a Fake Error\r\n#\r\n# Make sure to use Error Catching to make sure thread exits\r\n# ---------------------------------------------------------\r\nTry\r\n{\r\n  Switch ($Random.Next(0, 3))\r\n  {\r\n    \"0\"\r\n    {\r\n      Throw \"This is a Fake Error!\"\r\n      Break\r\n    }\r\n    \"1\"\r\n    {\r\n      Throw \"Simulated Error!\"\r\n      Break\r\n    }\r\n    \"2\"\r\n    {\r\n      Throw \"Someing Failed!\"\r\n      Break\r\n    }\r\n    \"3\"\r\n    {\r\n      Throw \"Unknown Error!\"\r\n      Break\r\n    }\r\n  }\r\n}\r\nCatch\r\n{\r\n  # Save Error Mesage\r\n  $ListViewItem.SubItems[$Columns[\"Fake Error\"]].Text = $Error[0].Exception.Message\r\n}\r\n\r\n$ListViewItem.SubItems[$Columns[\"Function Test\"]].Text = Example-Function -InputValue \"Hello World\"\r\n$ListViewItem.SubItems[$Columns[\"Static Variable\"]].Text = $StaticVariable\r\n\r\n$RndValue = $Random.Next(0, 3)\r\nFor ($I = 10; $I -lt 16; $I++)\r\n{\r\n  $ListViewItem.SubItems[$I].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\n  [System.Threading.Thread]::Sleep(100)\r\n}\r\n\r\n# Random Fail Simlater\r\nIf ($RndValue -eq 0)\r\n{\r\n  $WasSuccess = $False\r\n}\r\n$ListViewItem.SubItems[$Columns[\"WasSuccess\"]].Text = $WasSuccess\r\n\r\n# Set Final Date / Time and Update Status\r\n$ListViewItem.SubItems[$Columns[\"Term/Proc Times\"]].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\nIf ($WasSuccess)\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  $ListViewItem.SubItems[$Columns[\"Status\"]].Text = \"Completed\"\r\n}\r\nElse\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $BadIcon\r\n  $ListViewItem.SubItems[$Columns[\"Status\"]].Text = \"Error\"\r\n}\r\n\r\n# Testing Write to Screen\r\nWrite-Host -Object \"Completed $($CurentItem)\"\r\n\r\nExit\r\n\r\n\r\n"}
