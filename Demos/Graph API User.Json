{"ColumnNames":["UserPrincipalName","ID","E-Mail","DisplayName","FirstName","Surname","AccountEnabled","Date/Time","Status Message","Error Message"],"Modules":{},"Functions":{"Get-MyGQuery":{"Name":"Get-MyGQuery","ScriptBlock":"\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Query Microsoft Graph API with simple paging support.\r\n    .DESCRIPTION\r\n      This function queries the Microsoft Graph API using a provided authentication token and supports basic query options such as API version, resource endpoint, and retrieving all pages of results.\r\n      It is designed for straightforward queries where advanced filtering or selection is not required.\r\n    .PARAMETER AuthToken\r\n      The authentication token (as a hashtable) to use for the request. Typically obtained from an OAuth flow or authentication function.\r\n    .PARAMETER Version\r\n      The Graph API version to use. Accepts \"Beta\" or \"v1.0\". Default is \"Beta\".\r\n    .PARAMETER Resource\r\n      The resource endpoint to query in the Graph API (e.g., \"users\", \"groups\", \"me/messages\").\r\n    .PARAMETER All\r\n      If specified, retrieves all pages of results by following the @odata.nextLink property.\r\n    .PARAMETER Wait\r\n      The number of milliseconds to wait between requests when paging through results. Default is 100.\r\n    .EXAMPLE\r\n      Get-MyGQuery -AuthToken $AuthToken -Resource \"users\"\r\n    .EXAMPLE\r\n      Get-MyGQuery -AuthToken $AuthToken -Resource \"groups\" -Version \"v1.0\" -All\r\n    .EXAMPLE\r\n      Get-MyGQuery -AuthToken $AuthToken -Resource \"me/messages\" -Wait 200\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  param (\r\n    [parameter(Mandatory = $True)]\r\n    [Hashtable]$AuthToken = $Script:Authtoken,\r\n    [ValidateSet(\"Beta\", \"v1.0\")]\r\n    [String]$Version = \"Beta\",\r\n    [parameter(Mandatory = $True)]\r\n    [String]$Resource,\r\n    [Switch]$All,\r\n    [Int]$Wait = 100\r\n  )\r\n  Write-Verbose -Message \"Enter Function Get-MyGQuery\"\r\n  \r\n  $Uri = \"https://graph.microsoft.com/$($Version)/$($Resource)\"\r\n  do\r\n  {\r\n    Write-Verbose -Message \"Query Graph API\"\r\n    $ReturnData = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Headers $AuthToken -Method Get -ContentType application/json -ErrorAction SilentlyContinue -Verbose:$False\r\n    if ($ReturnData.StatusCode -eq 200)\r\n    {\r\n      $Content = $ReturnData.Content | ConvertFrom-Json\r\n      if (@($Content.PSObject.Properties.match(\"value\")).Count)\r\n      {\r\n        $Content.Value\r\n      }\r\n      else\r\n      {\r\n        $Content\r\n      }\r\n      $Uri = ($Content.\"@odata.nextLink\")\r\n      Start-Sleep -Milliseconds $Wait\r\n    }\r\n    else\r\n    {\r\n      $Uri = $Null\r\n    }\r\n  }\r\n  while ((-not [String]::IsNullOrEmpty($Uri)) -and $All.IsPresent)\r\n  \r\n  Write-Verbose -Message \"Exit Function Get-MyGQuery\"\r\n"},"Get-MyOAuthApplicationToken":{"Name":"Get-MyOAuthApplicationToken","ScriptBlock":"\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Get Application OAuth Token\r\n    .DESCRIPTION\r\n      Retrieves an OAuth 2.0 token for an application using client credentials flow.\r\n      This token can be used to authenticate requests to Microsoft Graph or other Azure AD protected resources.\r\n    .PARAMETER TenantID\r\n      The Azure Active Directory tenant ID where the application is registered.\r\n    .PARAMETER ClientID\r\n      The Application (client) ID of the Azure AD app registration.\r\n    .PARAMETER ClientSecret\r\n      The client secret associated with the Azure AD app registration.\r\n    .PARAMETER Scope\r\n      The resource URI or scope for which the token is requested. Defaults to \u0027https://graph.microsoft.com/.default\u0027.\r\n    .EXAMPLE\r\n      Get-MyOAuthApplicationToken -TenantID $TenantID -ClientID $ClientID -ClientSecret $ClientSecret\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding(DefaultParameterSetName = \"New\")]\r\n  param (\r\n    [parameter(Mandatory = $True)]\r\n    [String]$MyTenantID,\r\n    [parameter(Mandatory = $True)]\r\n    [String]$MyClientID,\r\n    [parameter(Mandatory = $True)]\r\n    [String]$MyClientSecret,\r\n    [String]$Scope = \"https://graph.microsoft.com/.default\"\r\n  )\r\n  Write-Verbose -Message \"Enter Function Get-MyOAuthApplicationToken\"\r\n  \r\n  $Body = @{\r\n    \"grant_type\"    = \"client_credentials\"\r\n    \"client_id\"     = $MyClientID\r\n    \"client_secret\" = $MyClientSecret\r\n    \"Scope\"         = $Scope\r\n  }\r\n  \r\n  $Uri = \"https://login.microsoftonline.com/$($MyTenantID)/oauth2/v2.0/token\"\r\n  \r\n  try\r\n  {\r\n    $AuthResult = Invoke-RestMethod -Uri $Uri -Body $Body -Method Post -ContentType \"application/x-www-form-urlencoded\" -ErrorAction SilentlyContinue\r\n  }\r\n  catch\r\n  {\r\n    $AuthResult = $Null\r\n  }\r\n  \r\n  if ([String]::IsNullOrEmpty($AuthResult))\r\n  {\r\n    # Failed to Authenticate\r\n    @{\r\n      \"Expires_In\" = 0\r\n    }\r\n  }\r\n  else\r\n  {\r\n    # Successful Authentication\r\n    @{\r\n      \"Content-Type\"  = \"application/json\"\r\n      \"Authorization\" = \"Bearer \" + $AuthResult.Access_Token\r\n      \"Expires_In\"    = $AuthResult.Expires_In\r\n    }\r\n  }\r\n  \r\n  Write-Verbose -Message \"Exit Function Get-MyOAuthApplicationToken\"\r\n"}},"Variables":{"ClientID":{"Name":"ClientID","Value":"*"},"ClientSecret":{"Name":"ClientSecret","Value":"*"},"TenantID":{"Name":"TenantID","Value":"*"}},"ThreadCount":4,"ThreadScript":"\u003c#\r\n  .SYNOPSIS\r\n    Sample Runspace Pool Thread Script\r\n  .DESCRIPTION\r\n    Sample Runspace Pool Thread Script\r\n  .PARAMETER ListViewItem\r\n    ListViewItem Passed to the Thread Script\r\n\r\n    This Paramter is Required in your Thread Script\r\n  .EXAMPLE\r\n    Test-Script.ps1 -ListViewItem $ListViewItem\r\n  .NOTES\r\n    Sample Thread Script\r\n\r\n   -------------------------\r\n   ListViewItem Status Icons\r\n   -------------------------\r\n   $GoodIcon = Solid Green Circle\r\n   $BadIcon = Solid Red Circle\r\n   $InfoIcon = Solid Blue Circle\r\n   $CheckIcon = Checkmark\r\n   $ErrorIcon = Red X\r\n   $UpIcon = Green up Arrow \r\n   $DownIcon = Red Down Arrow\r\n\r\n#\u003e\r\n[CmdletBinding()]\r\nParam (\r\n  [parameter(Mandatory = $True)]\r\n  [System.Windows.Forms.ListViewItem]$ListViewItem\r\n)\r\n\r\n# Set Preference Variables\r\n$ErrorActionPreference = \"Stop\"\r\n$VerbosePreference = \"SilentlyContinue\"\r\n$ProgressPreference = \"SilentlyContinue\"\r\n\r\n# -----------------------------------------------------\r\n# Build ListView Column Lookup Table\r\n#\r\n# Reference Columns by Name Incase Column Order Changes\r\n# -----------------------------------------------------\r\n$Columns = @{}\r\n$ListViewItem.ListView.Columns | ForEach-Object -Process { $Columns.Add($PSItem.Text, $PSItem.Index) }\r\n\r\n# ------------------------------------------------\r\n# Check if Thread was Already Completed and Exit\r\n# ------------------------------------------------\r\nIf ($ListViewItem.SubItems[$Columns[\"Status Message\"]].Text -eq \"Completed\")\r\n{\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  Exit\r\n}\r\n\r\n# ----------------------------------------------------\r\n# Check if Threads are Paused and Update Thread Status\r\n# ----------------------------------------------------\r\nIf ($SyncedHash.Pause)\r\n{\r\n  # Set Paused Status\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Pause\"\r\n  $ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"G\")\r\n  While ($SyncedHash.Pause)\r\n  {[System.Threading.Thread]::Sleep(100)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------\r\n# Check For Termination and Update Thread Status\r\n# -----------------------------------------------------\r\nIf ($SyncedHash.Terminate)\r\n{\r\n  # Set Terminated Status and Exit Thread\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Terminated\"\r\n  $ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"G\")\r\n  $ListViewItem.ImageKey = $InfoIcon\r\n  Exit\r\n}\r\n\r\n# Sucess Default Exit Status\r\n$WasSuccess = $True\r\n$ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Processing\"\r\n$UserPrincipalName = $ListViewItem.SubItems[$Columns[\"UserPrincipalName\"]].Text\r\n\r\nTry\r\n{\r\n  $AuthToken = Get-MyOAuthApplicationToken -MyTenantID $TenantID -MyClientID $ClientID -MyClientSecret $ClientSecret\r\n  if ($AuthToken.Expires_In -eq 0)\r\n  {\r\n    $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = \"Unable to get AuthToken\"\r\n    $WasSuccess = $False\r\n  }\r\n  else\r\n  {\r\n    $Resource = (\"/users/$($UserPrincipalName)?`$top=1\u0026`$select=id,displayname,mail,givenName,surname,accountEnabled\" -f $DisplayName)\r\n    $Device = Get-MyGQuery -AuthToken $AuthToken -Resource $Resource -ErrorAction SilentlyContinue\r\n    if ([String]::IsNullOrEmpty($Device.ID))\r\n    {\r\n      $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = \"No Device Found in Azure AD / Entra ID\"\r\n      $WasSuccess = $False\r\n    }\r\n    else\r\n    {\r\n      $ListViewItem.SubItems[$Columns[\"ID\"]].Text = $Device.ID\r\n      $ListViewItem.SubItems[$Columns[\"E-Mail\"]].Text = $Device.Mail\r\n      $ListViewItem.SubItems[$Columns[\"DisplayName\"]].Text = $Device.DisplayName\r\n      $ListViewItem.SubItems[$Columns[\"FirstName\"]].Text = $Device.GivenName\r\n      $ListViewItem.SubItems[$Columns[\"Surname\"]].Text = $Device.Surname\r\n      $ListViewItem.SubItems[$Columns[\"AccountEnabled\"]].Text = $Device.AccountEnabled\r\n    }\r\n  }\r\n}\r\nCatch\r\n{\r\n  # Set Error Message / Thread Failed\r\n  $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = $PSItem.ToString()\r\n  $WasSuccess = $False\r\n  \r\n  Write-Host -Object ($($Error[0].Exception.Message))\r\n  Write-Host -Object (($Error[0].InvocationInfo.Line).Trim())\r\n  Write-Host -Object ($Error[0].InvocationInfo.ScriptLineNumber)\r\n}\r\n\r\n# Set Final Date / Time and Update Status\r\n$ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"G\")\r\nIf ($WasSuccess)\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Completed\"\r\n  $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = \"\"\r\n}\r\nElse\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $BadIcon\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Error\"\r\n}\r\n\r\nExit\r\n\r\n\r\n"}
