{
  "Modules": {},
  "Functions": {
    "Get-MyADForest": {
      "Name": "Get-MyADForest",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Gets information about an Active Directory Forest.\r\n    .DESCRIPTION\r\n      Retrieves the Active Directory Forest object either for the current forest or for a specified forest name.\r\n    .PARAMETER Name\r\n      The name of the Active Directory forest to retrieve. This parameter is mandatory when using the \"Name\" parameter set.\r\n    .PARAMETER Current\r\n      Switch parameter. If specified, retrieves the current Active Directory forest. This parameter is mandatory when using the \"Current\" parameter set.\r\n    .EXAMPLE\r\n      PS C:\\\u003e Get-MyADForest -Current\r\n      Retrieves the current Active Directory forest.\r\n    .EXAMPLE\r\n      PS C:\\\u003e Get-MyADForest -Name \"contoso.com\"\r\n      Retrieves the Active Directory forest with the name \"contoso.com\".\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding(DefaultParameterSetName = \"Current\")]\r\n  param (\r\n    [parameter(Mandatory = $True, ParameterSetName = \"Name\")]\r\n    [String]$Name,\r\n    [parameter(Mandatory = $True, ParameterSetName = \"Current\")]\r\n    [Switch]$Current\r\n  )\r\n  Write-Verbose -Message \"Enter Function $($MyInvocation.MyCommand)\"\r\n\r\n  switch ($PSCmdlet.ParameterSetName)\r\n  {\r\n    \"Name\"\r\n    {\r\n      $DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Forest\r\n      $DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New($DirectoryContextType, $Name)\r\n      [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($DirectoryContext)\r\n      $DirectoryContext = $Null\r\n      $DirectoryContextType = $Null\r\n      break\r\n    }\r\n    \"Current\"\r\n    {\r\n      [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()\r\n      break\r\n    }\r\n  }\r\n\r\n  Write-Verbose -Message \"Exit Function $($MyInvocation.MyCommand)\"\r\n"
    },
    "Get-MyADObject": {
      "Name": "Get-MyADObject",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Searches Active Directory and returns an AD SearchResultCollection.\r\n    .DESCRIPTION\r\n      Performs a search in Active Directory using the specified LDAP filter and returns a SearchResultCollection. \r\n      Supports specifying search root, server, credentials, properties to load, sorting, and paging options.\r\n    .PARAMETER LDAPFilter\r\n      The LDAP filter string to use for the search. Defaults to (objectClass=*).\r\n    .PARAMETER PageSize\r\n      The number of objects to return per page. Default is 1000.\r\n    .PARAMETER SizeLimit\r\n      The maximum number of objects to return. Default is 1000.\r\n    .PARAMETER SearchRoot\r\n      The LDAP path to start the search from. Defaults to the current domain root.\r\n    .PARAMETER ServerName\r\n      The name of the domain controller or server to query. If not specified, uses the default.\r\n    .PARAMETER SearchScope\r\n      The scope of the search. Valid values are Base, OneLevel, or Subtree. Default is Subtree.\r\n    .PARAMETER Sort\r\n      The direction to sort the results. Valid values are Ascending or Descending. Default is Ascending.\r\n    .PARAMETER SortProperty\r\n      The property name to sort the results by.\r\n    .PARAMETER PropertiesToLoad\r\n      An array of property names to load for each result.\r\n    .PARAMETER Credential\r\n      The credentials to use when searching Active Directory.\r\n    .EXAMPLE\r\n      Get-MyADObject -LDAPFilter \"(objectClass=user)\" -SearchRoot \"OU=Users,DC=domain,DC=com\"\r\n      Searches for all user objects in the specified OU.\r\n    .EXAMPLE\r\n      Get-MyADObject -ServerName \"dc01.domain.com\" -PropertiesToLoad \"samaccountname\",\"mail\"\r\n      Searches using a specific domain controller and returns only the samaccountname and mail properties.\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding(DefaultParameterSetName = \"Default\")]\r\n  param (\r\n    [String]$LDAPFilter = \"(objectClass=*)\",\r\n    [Long]$PageSize = 1000,\r\n    [Long]$SizeLimit = 1000,\r\n    [String]$SearchRoot = \"LDAP://$($([ADSI]\u0027\u0027).distinguishedName)\",\r\n    [String]$ServerName,\r\n    [ValidateSet(\"Base\", \"OneLevel\", \"Subtree\")]\r\n    [System.DirectoryServices.SearchScope]$SearchScope = \"SubTree\",\r\n    [ValidateSet(\"Ascending\", \"Descending\")]\r\n    [System.DirectoryServices.SortDirection]$Sort = \"Ascending\",\r\n    [String]$SortProperty,\r\n    [String[]]$PropertiesToLoad,\r\n    [PSCredential]$Credential\r\n  )\r\n  Write-Verbose -Message \"Enter Function $($MyInvocation.MyCommand)\"\r\n\r\n  $MySearcher = [System.DirectoryServices.DirectorySearcher]::New($LDAPFilter, $PropertiesToLoad, $SearchScope)\r\n\r\n  $MySearcher.PageSize = $PageSize\r\n  $MySearcher.SizeLimit = $SizeLimit\r\n\r\n  $TempSearchRoot = $SearchRoot.ToUpper()\r\n  switch -regex ($TempSearchRoot)\r\n  {\r\n    \"(?:LDAP|GC)://*\"\r\n    {\r\n      if ($PSBoundParameters.ContainsKey(\"ServerName\"))\r\n      {\r\n        $MySearchRoot = $TempSearchRoot -replace \"(?\u003cLG\u003e(?:LDAP|GC)://)(?:[\\w\\d\\.-]+/)?(?\u003cDN\u003e.+)\", \"`${LG}$($ServerName)/`${DN}\"\r\n      }\r\n      else\r\n      {\r\n        $MySearchRoot = $TempSearchRoot\r\n      }\r\n      break\r\n    }\r\n    default\r\n    {\r\n      if ($PSBoundParameters.ContainsKey(\"ServerName\"))\r\n      {\r\n        $MySearchRoot = \"LDAP://$($ServerName)/$($TempSearchRoot)\"\r\n      }\r\n      else\r\n      {\r\n        $MySearchRoot = \"LDAP://$($TempSearchRoot)\"\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Credential\"))\r\n  {\r\n    $MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New($MySearchRoot, ($Credential.UserName), (($Credential.GetNetworkCredential()).Password))\r\n  }\r\n  else\r\n  {\r\n    $MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New($MySearchRoot)\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"SortProperty\"))\r\n  {\r\n    $MySearcher.Sort.PropertyName = $SortProperty\r\n    $MySearcher.Sort.Direction = $Sort\r\n  }\r\n\r\n  $MySearcher.FindAll()\r\n\r\n  $MySearcher.Dispose()\r\n  $MySearcher = $Null\r\n  $MySearchRoot = $Null\r\n  $TempSearchRoot = $Null\r\n\r\n  Write-Verbose -Message \"Exit Function $($MyInvocation.MyCommand)\"\r\n"
    }
  },
  "Variables": {},
  "ThreadCount": 4,
  "ThreadScript": "\u003c#\r\n  .SYNOPSIS\r\n    Sample Runspace Pool Thread Script\r\n  .DESCRIPTION\r\n    Sample Runspace Pool Thread Script\r\n  .PARAMETER ListViewItem\r\n    ListViewItem Passed to the Thread Script\r\n\r\n    This Paramter is Required in your Thread Script\r\n  .EXAMPLE\r\n    Test-Script.ps1 -ListViewItem $ListViewItem\r\n  .NOTES\r\n    Sample Thread Script\r\n\r\n   -------------------------\r\n   ListViewItem Status Icons\r\n   -------------------------\r\n   $GoodIcon = Solid Green Circle\r\n   $BadIcon = Solid Red Circle\r\n   $InfoIcon = Solid Blue Circle\r\n   $CheckIcon = Checkmark\r\n   $ErrorIcon = Red X\r\n   $UpIcon = Green up Arrow \r\n   $DownIcon = Red Down Arrow\r\n\r\n#\u003e\r\n[CmdletBinding()]\r\nParam (\r\n  [parameter(Mandatory = $True)]\r\n  [System.Windows.Forms.ListViewItem]$ListViewItem\r\n)\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n$VerbosePreference = \"SilentlyContinue\"\r\n\r\n# Common Columns\r\n$ItemCol = 0\r\n$DataCol = 1\r\n$StatusCol = 2\r\n$DateTimeCol = 3\r\n$ErrorCol = 4\r\n\r\n# ------------------------------------------------\r\n# Check if Thread was Already Completed and Exit\r\n# ------------------------------------------------\r\nIf ($ListViewItem.SubItems[$StatusCol].Text -eq \"Completed\")\r\n{\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  Exit\r\n}\r\n\r\n# ----------------------------------------------------\r\n# Check if Threads are Paused and Update Thread Status\r\n# ----------------------------------------------------\r\nIf ($SyncedHash.Paused)\r\n{\r\n  # Set Paused Status\r\n  $ListViewItem.SubItems[1].Text = \"Pause\"\r\n  While ($SyncedHash.Paused)\r\n  {\r\n    [System.Threading.Thread]::Sleep(100)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------\r\n# Check For Termination and Update Thread Status\r\n# -----------------------------------------------------\r\nIf ($SyncedHash.Terminate)\r\n{\r\n  # Set Terminated Status and Exit Thread\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Terminated\"\r\n  $ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString(\"G\")\r\n  $ListViewItem.ImageKey = $InfoIcon\r\n  Exit\r\n}\r\n\r\n# Sucess Default Exit Status\r\n$WasSuccess = $True\r\n$CurrentItem = $ListViewItem.SubItems[$ItemCol].Text\r\nTry\r\n{\r\n  \r\n  # Get / Update Shared Object / Value\r\n  If ([System.String]::IsNullOrEmpty($SyncedHash.Object))\r\n  {\r\n    $SyncedHash.Object = \"First Item\"\r\n  }\r\n  $ListViewItem.SubItems[$DataCol].Text = $SyncedHash.Object\r\n  $SyncedHash.Object = $CurrentItem\r\n  \r\n  # ---------------------------------------------------------\r\n  # Open and wait for Mutex - Limit Access to Shared Resource\r\n  # ---------------------------------------------------------\r\n  $MyMutex = [System.Threading.Mutex]::OpenExisting($Mutex)\r\n  [Void]($MyMutex.WaitOne())\r\n  \r\n  # Access / Update Shared Resources\r\n  # $CurrentItem | Out-File -Encoding ascii -FilePath \"C:\\SharedFile.txt\"\r\n  \r\n  # Release Mutex\r\n  $MyMutex.ReleaseMutex()\r\n  \r\n}\r\nCatch\r\n{\r\n  # Set Error Message / Thread Failed\r\n  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.ToString()\r\n  $WasSuccess = $False\r\n}\r\n\r\n# Set Final Date / Time and Update Status\r\n$ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString(\"G\")\r\nIf ($WasSuccess)\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Completed\"\r\n}\r\nElse\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $BadIcon\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Error\"\r\n}\r\n\r\nWrite-Host -Object $ListViewItem.ImageKey\r\n\r\nExit\r\n\r\n\r\n",
  "ColumnNames": [
    "Column Name 00",
    "Column Name 01",
    "Column Name 02",
    "Column Name 03",
    "Column Name 04",
    "Column Name 05",
    "Column Name 06",
    "Column Name 07",
    "Column Name 08",
    "Column Name 09",
    "Column Name 10",
    "Column Name 11",
    "Column Name 12",
    "Column Name 13",
    "Column Name 14",
    "Column Name 15",
    "Column Name 16",
    "Column Name 17",
    "Column Name 18",
    "Column Name 19",
    "Column Name 20",
    "Column Name 21",
    "Column Name 22",
    "Column Name 23"
  ]
}