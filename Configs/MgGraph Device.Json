{
  "Description": "This is a Sample PIL Thread Configuration to demomstrate how to Query Graph API for Informaiton of Device Resources.",
  "ColumnNames": [
    "DisplayName",
    "ID",
    "DeviceID",
    "DeviceOwnership",
    "TrustType",
    "Manufacturer",
    "Model",
    "operatingSystem",
    "OperatingSystemVersion",
    "AccountEnabled",
    "Date/Time",
    "Status Message",
    "Error Message"
  ],
  "Modules": {},
  "Functions": {},
  "Variables": {},
  "ThreadCount": 4,
  "ThreadScript": "\u003c#\r\n  .SYNOPSIS\r\n    Sample Runspace Pool Thread Script\r\n  .DESCRIPTION\r\n    Sample Runspace Pool Thread Script\r\n  .PARAMETER ListViewItem\r\n    ListViewItem Passed to the Thread Script\r\n\r\n    This Paramter is Required in your Thread Script\r\n  .EXAMPLE\r\n    Test-Script.ps1 -ListViewItem $ListViewItem\r\n  .NOTES\r\n    Sample Thread Script\r\n\r\n   -------------------------\r\n   ListViewItem Status Icons\r\n   -------------------------\r\n   $GoodIcon = Solid Green Circle\r\n   $BadIcon = Solid Red Circle\r\n   $InfoIcon = Solid Blue Circle\r\n   $CheckIcon = Checkmark\r\n   $ErrorIcon = Red X\r\n   $UpIcon = Green up Arrow \r\n   $DownIcon = Red Down Arrow\r\n\r\n#\u003e\r\n[CmdletBinding()]\r\nParam (\r\n  [parameter(Mandatory = $True)]\r\n  [System.Windows.Forms.ListViewItem]$ListViewItem\r\n)\r\n\r\n# Set Preference Variables\r\n$ErrorActionPreference = \"Stop\"\r\n$VerbosePreference = \"SilentlyContinue\"\r\n$ProgressPreference = \"SilentlyContinue\"\r\n\r\n# -----------------------------------------------------\r\n# Build ListView Column Lookup Table\r\n#\r\n# Reference Columns by Name Incase Column Order Changes\r\n# -----------------------------------------------------\r\n$Columns = @{\r\n}\r\n$ListViewItem.ListView.Columns | ForEach-Object -Process {\r\n  $Columns.Add($PSItem.Text, $PSItem.Index)\r\n}\r\n\r\n# ------------------------------------------------\r\n# Check if Thread was Already Completed and Exit\r\n# ------------------------------------------------\r\nIf ($ListViewItem.SubItems[$Columns[\"Status Message\"]].Text -eq \"Completed\")\r\n{\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  Exit\r\n}\r\n\r\n# ----------------------------------------------------\r\n# Check if Threads are Paused and Update Thread Status\r\n# ----------------------------------------------------\r\nIf ($SyncedHash.Pause)\r\n{\r\n  # Set Paused Status\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Pause\"\r\n  $ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"G\")\r\n  While ($SyncedHash.Pause)\r\n  {\r\n    [System.Threading.Thread]::Sleep(100)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------\r\n# Check For Termination and Update Thread Status\r\n# -----------------------------------------------------\r\nIf ($SyncedHash.Terminate)\r\n{\r\n  # Set Terminated Status and Exit Thread\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Terminated\"\r\n  $ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"G\")\r\n  $ListViewItem.ImageKey = $InfoIcon\r\n  Exit\r\n}\r\n\r\n# Sucess Default Exit Status\r\n$WasSuccess = $True\r\n$ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Processing\"\r\n$DisplayName = $ListViewItem.SubItems[$Columns[\"DisplayName\"]].Text\r\n\r\nTry\r\n{\r\n  $Resource = (\"/beta/devices?`$filter=displayName eq \u0027{0}\u0027\u0026`$top=1\u0026`$select=id,displayname,deviceId,deviceOwnership,trustType,manufacturer,model,operatingSystem,operatingSystemVersion,accountEnabled\" -f $DisplayName)\r\n  $Device = Invoke-MgGraphRequest -Uri $Resource -ErrorAction SilentlyContinue\r\n  If ([String]::IsNullOrEmpty($Device.Value.ID))\r\n  {\r\n    $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = \"No Device Found in Azure AD / Entra ID\"\r\n    $WasSuccess = $False\r\n  }\r\n  Else\r\n  {\r\n    $ListViewItem.SubItems[$Columns[\"DisplayName\"]].Text = $Device.Value.DisplayName\r\n    $ListViewItem.SubItems[$Columns[\"ID\"]].Text = $Device.Value.ID\r\n    $ListViewItem.SubItems[$Columns[\"DeviceID\"]].Text = $Device.Value.DeviceID\r\n    $ListViewItem.SubItems[$Columns[\"DeviceOwnership\"]].Text = $Device.Value.DeviceOwnership\r\n    $ListViewItem.SubItems[$Columns[\"TrustType\"]].Text = $Device.Value.TrustType\r\n    $ListViewItem.SubItems[$Columns[\"Manufacturer\"]].Text = $Device.Value.Manufacturer\r\n    $ListViewItem.SubItems[$Columns[\"Model\"]].Text = $Device.Value.Model\r\n    $ListViewItem.SubItems[$Columns[\"OperatingSystem\"]].Text = $Device.Value.OperatingSystem\r\n    $ListViewItem.SubItems[$Columns[\"OperatingSystemVersion\"]].Text = $Device.Value.OperatingSystemVersion\r\n    $ListViewItem.SubItems[$Columns[\"AccountEnabled\"]].Text = $Device.Value.AccountEnabled\r\n  }\r\n}\r\nCatch\r\n{\r\n  # Set Error Message / Thread Failed\r\n  $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = $PSItem.ToString()\r\n  $WasSuccess = $False\r\n}\r\n\r\n# Set Final Date / Time and Update Status\r\n$ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"G\")\r\nIf ($WasSuccess)\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Completed\"\r\n  $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = \"\"\r\n  $ListViewItem.Tag = \"Completed\"\r\n}\r\nElse\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $BadIcon\r\n  $ListViewItem.SubItems[$Columns[\"Status Message\"]].Text = \"Error\"\r\n}\r\n\r\nExit\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}
