{
  "ColumnNames": [
    "Column Name 00",
    "Column Name 01",
    "Column Name 02",
    "Column Name 03",
    "Column Name 04",
    "Column Name 05",
    "Column Name 06",
    "Column Name 07",
    "Column Name 08",
    "Column Name 09",
    "Column Name 10",
    "Column Name 11"
  ],
  "Modules": {},
  "Functions": {
    "Get-UserToken": {
      "Name": "Get-UserToken",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Get Users GraphAPI AuthToken\r\n    .DESCRIPTION\r\n      Get Users GraphAPI AuthToken\r\n    .PARAMETER ClientID\r\n    .EXAMPLE\r\n      Get-UserToken\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  Param (\r\n    [String]$ClientID\r\n  )\r\n  Write-Verbose -Message \"Enter Function Get-UserToken\"\r\n\r\n  $MsResponse = Get-MSALToken -Interactive -ClientId $ClientID -RedirectUri \"urn:ietf:wg:oauth:2.0:oob\" -Authority \"https://login.microsoftonline.com/common\" -Scopes @(\"https://graph.microsoft.com/.default\") -ExtraQueryParameters @{claims = \u0027{\"access_token\" : {\"amr\": { \"values\": [\"mfa\"] }}}\u0027 }\r\n\r\n  @{\r\n    \"Content-Type\"  = \"application/json\"\r\n    \"Authorization\" = \"Bearer $($MsResponse.AccessToken)\"\r\n    \"ExpiresOn\"     = ($MsResponse.ExpiresOn.LocalDateTime.ToString())\r\n  }\r\n\r\n  Write-Verbose -Message \"Exit Function Get-UserToken\"\r\n"
    },
    "Get-MyGraphQuery": {
      "Name": "Get-MyGraphQuery",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Query Microsoft Graph API with advanced filtering and selection options.\r\n    .DESCRIPTION\r\n      This function queries the Microsoft Graph API using a provided authentication token and supports advanced query options such as filtering, selecting specific properties,\r\n      ordering, searching, pagination, and retrieving all pages of results.\r\n    .PARAMETER AuthToken\r\n      The authentication token (as a hashtable) to use for the request. Typically obtained from an OAuth flow or authentication function.\r\n    .PARAMETER Version\r\n      The Graph API version to use. Accepts \"Beta\" or \"v1.0\". Default is \"Beta\".\r\n    .PARAMETER Resource\r\n      The resource endpoint to query in the Graph API (e.g., \"users\", \"groups\", \"me/messages\").\r\n    .PARAMETER Count\r\n      If specified, includes a count of the total matching resources in the response.\r\n    .PARAMETER Filter\r\n      An OData filter string to restrict the results (e.g., \"startswith(displayName,\u0027A\u0027)\").\r\n    .PARAMETER Expand\r\n      An OData expand string to include related entities in the response.\r\n    .PARAMETER Select\r\n      An array of property names to select in the response (e.g., \"displayName\", \"mail\").\r\n    .PARAMETER Search\r\n      A search string to perform a full-text search on the resource.\r\n    .PARAMETER OrderBy\r\n      An array of property names to order the results by (e.g., \"displayName desc\").\r\n    .PARAMETER Top\r\n      The maximum number of items to return per page (between 1 and 1000). Default is 500.\r\n    .PARAMETER Skip\r\n      The number of items to skip before returning results (for pagination).\r\n    .PARAMETER All\r\n      If specified, retrieves all pages of results by following the @odata.nextLink property.\r\n    .EXAMPLE\r\n      Get-MyGraphQuery -AuthToken $AuthToken -Resource \"users\" -Select \"displayName\",\"mail\" -Top 100 -All\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  param (\r\n    [parameter(Mandatory = $True)]\r\n    [Hashtable]$AuthToken = $Script:Authtoken,\r\n    [ValidateSet(\"Beta\", \"v1.0\")]\r\n    [String]$Version = \"Beta\",\r\n    [parameter(Mandatory = $True)]\r\n    [String]$Resource,\r\n    [Switch]$Count,\r\n    [String]$Filter,\r\n    [String]$Expand,\r\n    [String[]]$Select,\r\n    [String]$Search,\r\n    [String[]]$OrderBy,\r\n    [ValidateRange(1, 1000)]\r\n    [Int]$Top = 500,\r\n    [Int]$Skip,\r\n    [Switch]$All\r\n  )\r\n  Write-Verbose -Message \"Enter Function Get-MyGraphQuery\"\r\n\r\n  $MyFilters = [System.Collections.ArrayList]::New()\r\n\r\n  #region Build Graph Query Search Filter\r\n\r\n  if ($Count.IsPresent)\r\n  {\r\n    [Void]$MyFilters.Add(\"`$count=true\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Search\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$search=`\"$($Search)`\"\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Select\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$select=$(($Select -join \",\"))\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"OrderBy\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$orderby=$(($OrderBy -join \",\"))\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Top\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$top=$($Top)\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Skip\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$skip=$($Skip)\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Filter\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$filter=$($Filter)\")\r\n  }\r\n\r\n  if ($PSBoundParameters.ContainsKey(\"Expand\"))\r\n  {\r\n    [Void]$MyFilters.Add(\"`$expand=$($Expand)\")\r\n  }\r\n  #endregion Build Graph Query Search Filter\r\n\r\n  if ($MyFilters.Count)\r\n  {\r\n    $Uri = \"https://graph.microsoft.com/$($Version)/$($Resource)?$(($MyFilters -join \"\u0026\"))\"\r\n  }\r\n  else\r\n  {\r\n    $Uri = \"https://graph.microsoft.com/$($Version)/$($Resource)\"\r\n  }\r\n\r\n  do\r\n  {\r\n    Write-Verbose -Message \"Query Graph API\"\r\n    $ReturnData = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Headers $AuthToken -Method Get -Verbose:$False\r\n    if ($ReturnData.StatusCode -eq 200)\r\n    {\r\n      $Content = $ReturnData.Content | ConvertFrom-Json\r\n      if (@($Content.PSObject.Properties.match(\"value\")).Count)\r\n      {\r\n        $Content.Value\r\n      }\r\n      else\r\n      {\r\n        $Content\r\n      }\r\n      $Uri = ($Content.\"@odata.nextLink\")\r\n    }\r\n    else\r\n    {\r\n      break\r\n    }\r\n  }\r\n  while ((-not [String]::IsNullOrEmpty($Uri)) -and $All.IsPresent)\r\n\r\n  Write-Verbose -Message \"Exit Function Get-MyGraphQuery\"\r\n"
    },
    "Refresh-UserToken": {
      "Name": "Refresh-UserToken",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Refresh Users GraphAPI AuthToken\r\n    .DESCRIPTION\r\n      Refresh Users GraphAPI AuthToken\r\n    .PARAMETER ClientID\r\n    .EXAMPLE\r\n      Refresh-UserToken\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  param (\r\n    [String]$ClientID\r\n  )\r\n  Write-Verbose -Message \"Enter Function Refresh-UserToken\"\r\n\r\n  $MsResponse = Get-MSALToken -ForceRefresh -ClientId $ClientID -RedirectUri \"urn:ietf:wg:oauth:2.0:oob\" -Authority \"https://login.microsoftonline.com/common\" -Scopes @(\"https://graph.microsoft.com/.default\")\r\n\r\n  @{\r\n    \"Content-Type\"  = \"application/json\"\r\n    \"Authorization\" = \"Bearer $($MsResponse.AccessToken)\"\r\n    \"ExpiresOn\"     = ($MsResponse.ExpiresOn.LocalDateTime.ToString())\r\n  }\r\n\r\n  Write-Verbose -Message \"Exit Function Refresh-UserToken\"\r\n"
    },
    "Get-MyOAuthApplicationToken": {
      "Name": "Get-MyOAuthApplicationToken",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Get Application OAuth Token\r\n    .DESCRIPTION\r\n      Retrieves an OAuth 2.0 token for an application using client credentials flow.\r\n      This token can be used to authenticate requests to Microsoft Graph or other Azure AD protected resources.\r\n    .PARAMETER TenantID\r\n      The Azure Active Directory tenant ID where the application is registered.\r\n    .PARAMETER ClientID\r\n      The Application (client) ID of the Azure AD app registration.\r\n    .PARAMETER ClientSecret\r\n      The client secret associated with the Azure AD app registration.\r\n    .PARAMETER Scope\r\n      The resource URI or scope for which the token is requested. Defaults to \u0027https://graph.microsoft.com/.default\u0027.\r\n    .EXAMPLE\r\n      Get-MyOAuthApplicationToken -TenantID $TenantID -ClientID $ClientID -ClientSecret $ClientSecret\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding(DefaultParameterSetName = \"New\")]\r\n  param (\r\n    [parameter(Mandatory = $True)]\r\n    [String]$TenantID,\r\n    [parameter(Mandatory = $True)]\r\n    [String]$ClientID,\r\n    [parameter(Mandatory = $True)]\r\n    [String]$ClientSecret,\r\n    [String]$Scope = \"https://graph.microsoft.com/.default\"\r\n  )\r\n  Write-Verbose -Message \"Enter Function Get-MyOAuthApplicationToken\"\r\n\r\n  $Body = @{\r\n    \"grant_type\"    = \"client_credentials\"\r\n    \"client_id\"     = $ClientID\r\n    \"client_secret\" = $ClientSecret\r\n    \"Scope\"         = $Scope\r\n  }\r\n\r\n  $Uri = \"https://login.microsoftonline.com/$($TenantID)/oauth2/v2.0/token\"\r\n\r\n  try\r\n  {\r\n    $AuthResult = Invoke-RestMethod -Uri $Uri -Body $Body -Method Post -ContentType \"application/x-www-form-urlencoded\" -ErrorAction SilentlyContinue\r\n  }\r\n  catch\r\n  {\r\n    $AuthResult = $Null\r\n  }\r\n\r\n  if ([String]::IsNullOrEmpty($AuthResult))\r\n  {\r\n    # Failed to Authenticate\r\n    @{\r\n      \"Expires_In\" = 0\r\n    }\r\n  }\r\n  else\r\n  {\r\n    # Successful Authentication\r\n    @{\r\n      \"Content-Type\"  = \"application/json\"\r\n      \"Authorization\" = \"Bearer \" + $AuthResult.Access_Token\r\n      \"Expires_In\"    = $AuthResult.Expires_In\r\n    }\r\n  }\r\n\r\n  Write-Verbose -Message \"Exit Function Get-MyOAuthApplicationToken\"\r\n"
    },
    "Get-MyGQuery": {
      "Name": "Get-MyGQuery",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Query Microsoft Graph API with simple paging support.\r\n    .DESCRIPTION\r\n      This function queries the Microsoft Graph API using a provided authentication token and supports basic query options such as API version, resource endpoint, and retrieving all pages of results.\r\n      It is designed for straightforward queries where advanced filtering or selection is not required.\r\n    .PARAMETER AuthToken\r\n      The authentication token (as a hashtable) to use for the request. Typically obtained from an OAuth flow or authentication function.\r\n    .PARAMETER Version\r\n      The Graph API version to use. Accepts \"Beta\" or \"v1.0\". Default is \"Beta\".\r\n    .PARAMETER Resource\r\n      The resource endpoint to query in the Graph API (e.g., \"users\", \"groups\", \"me/messages\").\r\n    .PARAMETER All\r\n      If specified, retrieves all pages of results by following the @odata.nextLink property.\r\n    .PARAMETER Wait\r\n      The number of milliseconds to wait between requests when paging through results. Default is 100.\r\n    .EXAMPLE\r\n      Get-MyGQuery -AuthToken $AuthToken -Resource \"users\"\r\n    .EXAMPLE\r\n      Get-MyGQuery -AuthToken $AuthToken -Resource \"groups\" -Version \"v1.0\" -All\r\n    .EXAMPLE\r\n      Get-MyGQuery -AuthToken $AuthToken -Resource \"me/messages\" -Wait 200\r\n    .NOTES\r\n      Original Function By Ken Sweet\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  param (\r\n    [parameter(Mandatory = $True)]\r\n    [Hashtable]$AuthToken = $Script:Authtoken,\r\n    [ValidateSet(\"Beta\", \"v1.0\")]\r\n    [String]$Version = \"Beta\",\r\n    [parameter(Mandatory = $True)]\r\n    [String]$Resource,\r\n    [Switch]$All,\r\n    [Int]$Wait = 100\r\n  )\r\n  Write-Verbose -Message \"Enter Function Get-MyGQuery\"\r\n\r\n  $Uri = \"https://graph.microsoft.com/$($Version)/$($Resource)\"\r\n  do\r\n  {\r\n    Write-Verbose -Message \"Query Graph API\"\r\n    $ReturnData = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Headers $AuthToken -Method Get -ContentType application/json -ErrorAction SilentlyContinue -Verbose:$False\r\n    if ($ReturnData.StatusCode -eq 200)\r\n    {\r\n      $Content = $ReturnData.Content | ConvertFrom-Json\r\n      if (@($Content.PSObject.Properties.match(\"value\")).Count)\r\n      {\r\n        $Content.Value\r\n      }\r\n      else\r\n      {\r\n        $Content\r\n      }\r\n      $Uri = ($Content.\"@odata.nextLink\")\r\n      Start-Sleep -Milliseconds $Wait\r\n    }\r\n    else\r\n    {\r\n      $Uri = $Null\r\n    }\r\n  }\r\n  while ((-not [String]::IsNullOrEmpty($Uri)) -and $All.IsPresent)\r\n\r\n  Write-Verbose -Message \"Exit Function Get-MyGQuery\"\r\n"
    }
  },
  "Variables": {
    "ClientID": {
      "Name": "ClientID",
      "Value": "*"
    },
    "ClientSecret": {
      "Name": "ClientSecret",
      "Value": "*"
    },
    "TenantID": {
      "Name": "TenantID",
      "Value": "*"
    }
  },
  "ThreadCount": 8,
  "ThreadScript": "\u003c#\r\n  .SYNOPSIS\r\n    Sample Runspace Pool Thread Script\r\n  .DESCRIPTION\r\n    Sample Runspace Pool Thread Script\r\n  .PARAMETER ListViewItem\r\n    ListViewItem Passed to the Thread Script\r\n\r\n    This Paramter is Required in your Thread Script\r\n  .EXAMPLE\r\n    Test-Script.ps1 -ListViewItem $ListViewItem\r\n  .NOTES\r\n    Sample Thread Script\r\n\r\n   -------------------------\r\n   ListViewItem Status Icons\r\n   -------------------------\r\n   $GoodIcon = Solid Green Circle\r\n   $BadIcon = Solid Red Circle\r\n   $InfoIcon = Solid Blue Circle\r\n   $CheckIcon = Checkmark\r\n   $ErrorIcon = Red X\r\n   $UpIcon = Green up Arrow \r\n   $DownIcon = Red Down Arrow\r\n\r\n#\u003e\r\n[CmdletBinding()]\r\nParam (\r\n  [parameter(Mandatory = $True)]\r\n  [System.Windows.Forms.ListViewItem]$ListViewItem\r\n)\r\n\r\n# Set Preference Variables\r\n$ErrorActionPreference = \"Stop\"\r\n$VerbosePreference = \"SilentlyContinue\"\r\n$ProgressPreference = \"SilentlyContinue\"\r\n\r\n# -----------------------------------------------------\r\n# Build ListView Column Lookup Table\r\n#\r\n# Reference Columns by Name Incase Column Order Changes\r\n# -----------------------------------------------------\r\n$Columns = @{}\r\n$ListViewItem.ListView.Columns | ForEach-Object -Process { $Columns.Add($PSItem.Text, $PSItem.Index) }\r\n\r\n# ------------------------------------------------\r\n# Check if Thread was Already Completed and Exit\r\n# ------------------------------------------------\r\nIf ($ListViewItem.SubItems[$Columns[\"Job Status\"]].Text -eq \"Completed\")\r\n{\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  Exit\r\n}\r\n\r\n# ----------------------------------------------------\r\n# Check if Threads are Paused and Update Thread Status\r\n# ----------------------------------------------------\r\nIf ($SyncedHash.Pause)\r\n{\r\n  # Set Paused Status\r\n  $ListViewItem.SubItems[$Columns[\"Job Status\"]].Text = \"Pause\"\r\n  While ($SyncedHash.Pause)\r\n  {\r\n    [System.Threading.Thread]::Sleep(100)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------\r\n# Check For Termination and Update Thread Status\r\n# -----------------------------------------------------\r\nIf ($SyncedHash.Terminate)\r\n{\r\n  # Set Terminated Status and Exit Thread\r\n  $ListViewItem.SubItems[$Columns[\"Job Status\"]].Text = \"Terminated\"\r\n  $ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\n  $ListViewItem.ImageKey = $InfoIcon\r\n  Exit\r\n}\r\n\r\n# Sucess Default Exit Status\r\n$WasSuccess = $True\r\n$ListViewItem.SubItems[$Columns[\"Job Status\"]].Text = \"Processing\"\r\n$CurrentItem = $ListViewItem.SubItems[$Columns[\"List Item\"]].Text\r\n\r\nTry\r\n{\r\n  \r\n  # Get / Update Shared Object / Value\r\n  If ([System.String]::IsNullOrEmpty($SyncedHash.Object))\r\n  {\r\n    $SyncedHash.Object = \"First Item\"\r\n  }\r\n  $ListViewItem.SubItems[$Columns[\"Data Column\"]].Text = $SyncedHash.Object\r\n  $SyncedHash.Object = $CurrentItem\r\n  \r\n  # ---------------------------------------------------------\r\n  # Open and wait for Mutex - Limit Access to Shared Resource\r\n  # ---------------------------------------------------------\r\n  $MyMutex = [System.Threading.Mutex]::OpenExisting($Mutex)\r\n  [Void]($MyMutex.WaitOne())\r\n  \r\n  # Access / Update Shared Resources\r\n  # $CurrentItem | Out-File -Encoding ascii -FilePath \"C:\\SharedFile.txt\"\r\n  \r\n  # Release Mutex\r\n  $MyMutex.ReleaseMutex()\r\n}\r\nCatch\r\n{\r\n  # Set Error Message / Thread Failed\r\n  $ListViewItem.SubItems[$Columns[\"Error Message\"]].Text = $PSItem.ToString()\r\n  $WasSuccess = $False\r\n}\r\n\r\n# File Remaining Columns\r\nFor ($I = 4; $I -lt 11; $I++)\r\n{\r\n  $ListViewItem.SubItems[$I].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\n  [System.Threading.Thread]::Sleep(100)\r\n}\r\n\r\n# Set Final Date / Time and Update Status\r\n$ListViewItem.SubItems[$Columns[\"Date/Time\"]].Text = [DateTime]::Now.ToString(\"HH:mm:ss:ffff\")\r\nIf ($WasSuccess)\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  $ListViewItem.SubItems[$Columns[\"Job Status\"]].Text = \"Completed\"\r\n}\r\nElse\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $BadIcon\r\n  $ListViewItem.SubItems[$Columns[\"Job Status\"]].Text = \"Error\"\r\n}\r\n\r\nExit\r\n\r\n\r\n"
}