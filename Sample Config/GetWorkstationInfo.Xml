<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>PILThreadConfig</T>
      <T>System.Object</T>
    </TN>
    <ToString>PILThreadConfig</ToString>
    <Props>
      <Obj N="ColumnNames" RefId="1">
        <TN RefId="1">
          <T>System.String[]</T>
          <T>System.Array</T>
          <T>System.Object</T>
        </TN>
        <LST>
          <S>Workstation</S>
          <S>On-Line</S>
          <S>IP Address</S>
          <S>FQDN</S>
          <S>Domain</S>
          <S>Computer Name</S>
          <S>User Name</S>
          <S>Operating System</S>
          <S>Build Number</S>
          <S>Architecture</S>
          <S>Serial Number</S>
          <S>Manufacture</S>
          <S>Model</S>
          <S>IsMobile</S>
          <S>Memory</S>
          <S>Install Date</S>
          <S>Last Reboot</S>
          <S>Job Status</S>
          <S>Date / Time</S>
          <S>Error Message</S>
        </LST>
      </Obj>
      <Obj N="Modules" RefId="2">
        <TN RefId="2">
          <T>System.Collections.Specialized.OrderedDictionary</T>
          <T>System.Object</T>
        </TN>
        <DCT />
      </Obj>
      <Obj N="Functions" RefId="3">
        <TN RefId="3">
          <T>System.Collections.Hashtable</T>
          <T>System.Object</T>
        </TN>
        <DCT>
          <En>
            <S N="Key">Get-MyWorkstationInfo</S>
            <Obj N="Value" RefId="4">
              <TN RefId="4">
                <T>Selected.PILFunction</T>
                <T>System.Management.Automation.PSCustomObject</T>
                <T>System.Object</T>
              </TN>
              <MS>
                <S N="Name">Get-MyWorkstationInfo</S>
                <S N="ScriptBlock">_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Verify Remote Workstation is the Correct One_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Verify Remote Workstation is the Correct One_x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Name of the Computer to Verify_x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Credentials to use when connecting to the Remote Computer_x000D__x000A_    .PARAMETER Serial_x000D__x000A_      Return Serial Number_x000D__x000A_    .PARAMETER Mobile_x000D__x000A_      Check if System is Desktop / Laptop_x000D__x000A_    .INPUTS_x000D__x000A_    .OUTPUTS_x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyWorkstationInfo -ComputerName "MyWorkstation"_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [PSCredential]$Credential,_x000D__x000A_    [Switch]$Serial,_x000D__x000A_    [Switch]$Mobile_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo"_x000D__x000A__x000D__x000A_    # Default Common Get-WmiObject Options_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      $Params = @{_x000D__x000A_        "ComputerName" = $Null_x000D__x000A_        "Credential"   = $Credential_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $Params = @{_x000D__x000A_        "ComputerName" = $Null_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo - Process"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      # Start Setting Return Values as they are Found_x000D__x000A_      $VerifyObject = [MyWorkstationInfo]::New($Computer)_x000D__x000A__x000D__x000A_      # Validate ComputerName_x000D__x000A_      if (($Computer -match "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$") -or ($Computer -match "(?:25[0-5]|2[0-4][0-9]|1\d{2}|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4][0-9]|1\d{2}|[1-9]?\d)){3}"))_x000D__x000A_      {_x000D__x000A_        try_x000D__x000A_        {_x000D__x000A_          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not_x000D__x000A_          $IPAddresses = @([System.Net.Dns]::GetHostAddresses($Computer) | Where-Object -FilterScript { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)_x000D__x000A_          :FoundMyWork foreach ($IPAddress in $IPAddresses)_x000D__x000A_          {_x000D__x000A_            if ([System.Net.NetworkInformation.Ping]::New().Send($IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)_x000D__x000A_            {_x000D__x000A_              # Set Default Parms_x000D__x000A_              $Params.ComputerName = $IPAddress_x000D__x000A__x000D__x000A_              # Get ComputerSystem_x000D__x000A_              [Void]($MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)_x000D__x000A_              $VerifyObject.AddComputerSystem($Computer, $IPAddress, ($MyCompData.Name), ($MyCompData.PartOfDomain), ($MyCompData.Domain), ($MyCompData.Manufacturer), ($MyCompData.Model), ($MyCompData.UserName), ($MyCompData.TotalPhysicalMemory))_x000D__x000A_              $MyCompData.Dispose()_x000D__x000A__x000D__x000A_              # Verify Remote Computer is the Connect Computer, No need to get any more information_x000D__x000A_              if ($VerifyObject.Found)_x000D__x000A_              {_x000D__x000A_                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                [Void]($MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)_x000D__x000A_                $VerifyObject.AddOperatingSystem(($MyOSData.ProductType), ($MyOSData.Caption), ($MyOSData.CSDVersion), ($MyOSData.BuildNumber), ($MyOSData.Version), ($MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LastBootUpTime)))_x000D__x000A_                $MyOSData.Dispose()_x000D__x000A__x000D__x000A_                # Optional SerialNumber Job_x000D__x000A_                if ($Serial.IsPresent)_x000D__x000A_                {_x000D__x000A_                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                  [Void]($MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)_x000D__x000A_                  $VerifyObject.AddSerialNumber($MyBIOSData.SerialNumber)_x000D__x000A_                  $MyBIOSData.Dispose()_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # Optional Mobile / ChassisType Job_x000D__x000A_                if ($Mobile.IsPresent)_x000D__x000A_                {_x000D__x000A_                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                  [Void]($MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)_x000D__x000A_                  $VerifyObject.AddIsMobile($MyChassisData.ChassisTypes)_x000D__x000A_                  $MyChassisData.Dispose()_x000D__x000A_                }_x000D__x000A_              }_x000D__x000A_              else_x000D__x000A_              {_x000D__x000A_                $VerifyObject.UpdateStatus("Wrong Workstation Name")_x000D__x000A_              }_x000D__x000A_              # Beak out of Loop, Verify was a Success no need to try other IP Address if any_x000D__x000A_              break FoundMyWork_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        catch_x000D__x000A_        {_x000D__x000A_          # Workstation Not in DNS_x000D__x000A_          $VerifyObject.UpdateStatus("Workstation Not in DNS")_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $VerifyObject.UpdateStatus("Invalid Computer Name")_x000D__x000A_      }_x000D__x000A__x000D__x000A_      # Set End Time and Return Results_x000D__x000A_      $VerifyObject.SetEndTime()_x000D__x000A_    }_x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo - Process"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo"_x000D__x000A_  }_x000D__x000A_</S>
              </MS>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="Variables" RefId="5">
        <TNRef RefId="3" />
        <DCT />
      </Obj>
      <U16 N="ThreadCount">4</U16>
      <S N="ThreadScript">&lt;#_x000D__x000A_  .SYNOPSIS_x000D__x000A_    Sample Runspace Pool Thread Script_x000D__x000A_  .DESCRIPTION_x000D__x000A_    Sample Runspace Pool Thread Script_x000D__x000A_  .PARAMETER ListViewItem_x000D__x000A_    ListViewItem Passed to the Thread Script_x000D__x000A__x000D__x000A_    This Paramter is Required in your Thread Script_x000D__x000A_  .EXAMPLE_x000D__x000A_    Test-Script.ps1 -ListViewItem $ListViewItem_x000D__x000A_  .NOTES_x000D__x000A_    Sample Thread Script_x000D__x000A__x000D__x000A_   -------------------------_x000D__x000A_   ListViewItem Status Icons_x000D__x000A_   -------------------------_x000D__x000A_   $GoodIcon = Solid Green Circle_x000D__x000A_   $BadIcon = Solid Red Circle_x000D__x000A_   $InfoIcon = Solid Blue Circle_x000D__x000A_   $CheckIcon = Checkmark_x000D__x000A_   $ErrorIcon = Red X_x000D__x000A_   $UpIcon = Green up Arrow _x000D__x000A_   $DownIcon = Red Down Arrow_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_[CmdletBinding()]_x000D__x000A_Param (_x000D__x000A_  [parameter(Mandatory = $True)]_x000D__x000A_  [System.Windows.Forms.ListViewItem]$ListViewItem_x000D__x000A_)_x000D__x000A__x000D__x000A_$ErrorActionPreference = "Stop"_x000D__x000A_$VerbosePreference = "SilentlyContinue"_x000D__x000A__x000D__x000A_#region class MyWorkstationInfo_x000D__x000A_Class MyWorkstationInfo_x000D__x000A_{_x000D__x000A_  [String]$ComputerName = [Environment]::MachineName_x000D__x000A_  [String]$FQDN = [Environment]::MachineName_x000D__x000A_  [Bool]$Found = $False_x000D__x000A_  [String]$UserName = ""_x000D__x000A_  [String]$Domain = ""_x000D__x000A_  [Bool]$DomainMember = $False_x000D__x000A_  [int]$ProductType = 0_x000D__x000A_  [String]$Manufacturer = ""_x000D__x000A_  [String]$Model = ""_x000D__x000A_  [Bool]$IsMobile = $False_x000D__x000A_  [String]$SerialNumber = ""_x000D__x000A_  [Long]$Memory = 0_x000D__x000A_  [String]$OperatingSystem = ""_x000D__x000A_  [String]$BuildNumber = ""_x000D__x000A_  [String]$Version = ""_x000D__x000A_  [String]$ServicePack = ""_x000D__x000A_  [String]$Architecture = ""_x000D__x000A_  [Bool]$Is64Bit = $False_x000D__x000A_  [DateTime]$LocalDateTime = [DateTime]::MinValue_x000D__x000A_  [DateTime]$InstallDate = [DateTime]::MinValue_x000D__x000A_  [DateTime]$LastBootUpTime = [DateTime]::MinValue_x000D__x000A_  [String]$IPAddress = ""_x000D__x000A_  [String]$Status = "Off-Line"_x000D__x000A_  [DateTime]$StartTime = [DateTime]::Now_x000D__x000A_  [DateTime]$EndTime = [DateTime]::Now_x000D__x000A_  _x000D__x000A_  MyWorkstationInfo ([String]$ComputerName)_x000D__x000A_  {_x000D__x000A_    $This.ComputerName = $ComputerName.ToUpper()_x000D__x000A_    $This.FQDN = $ComputerName.ToUpper()_x000D__x000A_    $This.Status = "On-Line"_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] AddComputerSystem ([String]$TestName, [String]$IPAddress, [String]$ComputerName, [Bool]$DomainMember, [String]$Domain, [String]$Manufacturer, [String]$Model, [String]$UserName, [Long]$Memory)_x000D__x000A_  {_x000D__x000A_    $This.IPAddress = $IPAddress_x000D__x000A_    $This.ComputerName = "$($ComputerName)".ToUpper()_x000D__x000A_    $This.DomainMember = $DomainMember_x000D__x000A_    $This.Domain = "$($Domain)".ToUpper()_x000D__x000A_    If ($DomainMember)_x000D__x000A_    {_x000D__x000A_      $This.FQDN = "$($ComputerName).$($Domain)".ToUpper()_x000D__x000A_    }_x000D__x000A_    $This.Manufacturer = $Manufacturer_x000D__x000A_    $This.Model = $Model_x000D__x000A_    $This.UserName = $UserName_x000D__x000A_    $This.Memory = $Memory_x000D__x000A_    $This.Found = ($ComputerName -eq @($TestName.Split("."))[0])_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] AddOperatingSystem ([int]$ProductType, [String]$OperatingSystem, [String]$ServicePack, [String]$BuildNumber, [String]$Version, [String]$Architecture, [DateTime]$LocalDateTime, [DateTime]$InstallDate, [DateTime]$LastBootUpTime)_x000D__x000A_  {_x000D__x000A_    $This.ProductType = $ProductType_x000D__x000A_    $This.OperatingSystem = $OperatingSystem_x000D__x000A_    $This.ServicePack = $ServicePack_x000D__x000A_    $This.BuildNumber = $BuildNumber_x000D__x000A_    $This.Version = $Version_x000D__x000A_    $This.Architecture = $Architecture_x000D__x000A_    $This.Is64Bit = ($Architecture -eq "64-bit")_x000D__x000A_    $This.LocalDateTime = $LocalDateTime_x000D__x000A_    $This.InstallDate = $InstallDate_x000D__x000A_    $This.LastBootUpTime = $LastBootUpTime_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] AddSerialNumber ([String]$SerialNumber)_x000D__x000A_  {_x000D__x000A_    $This.SerialNumber = $SerialNumber_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] AddIsMobile ([Long[]]$ChassisTypes)_x000D__x000A_  {_x000D__x000A_    $This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains $ChassisTypes[0])_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] UpdateStatus ([String]$Status)_x000D__x000A_  {_x000D__x000A_    $This.Status = $Status_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [MyWorkstationInfo] SetEndTime ()_x000D__x000A_  {_x000D__x000A_    $This.EndTime = [DateTime]::Now_x000D__x000A_    Return $This_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [TimeSpan] GetRunTime ()_x000D__x000A_  {_x000D__x000A_    Return ($This.EndTime - $This.StartTime)_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion class MyWorkstationInfo_x000D__x000A__x000D__x000A_# Common Columns_x000D__x000A_$StatusCol = 17_x000D__x000A_$DateTimeCol = 18_x000D__x000A_$ErrorCol = 19_x000D__x000A__x000D__x000A_# ------------------------------------------------_x000D__x000A_# Check if Thread was Already Completed and Exit_x000D__x000A_#_x000D__x000A_# One Column needs to be the Status the the Thread_x000D__x000A_#  Status Messages are Customizable_x000D__x000A_# ------------------------------------------------_x000D__x000A_If ($ListViewItem.SubItems[$StatusCol].Text -eq "Completed")_x000D__x000A_{_x000D__x000A_  $ListViewItem.ImageKey = $GoodIcon_x000D__x000A_  Exit_x000D__x000A_}_x000D__x000A__x000D__x000A_# ----------------------------------------------------_x000D__x000A_# Check if Threads are Paused and Update Thread Status_x000D__x000A_#_x000D__x000A_# You can add Multiple Checks for Pasue if Needed_x000D__x000A_# ----------------------------------------------------_x000D__x000A_If ($SyncedHash.Paused)_x000D__x000A_{_x000D__x000A_  # Set Paused Status_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Pause"_x000D__x000A_  $ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString("g")_x000D__x000A_  While ($SyncedHash.Paused)_x000D__x000A_  {_x000D__x000A_    [System.Threading.Thread]::Sleep(100)_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_# -----------------------------------------------------_x000D__x000A_# Check For Termination and Update Thread Status_x000D__x000A_#_x000D__x000A_# You can add Multiple Checks for Termination if Needed_x000D__x000A_# -----------------------------------------------------_x000D__x000A_If ($SyncedHash.Terminate)_x000D__x000A_{_x000D__x000A_  # Set Terminated Status and Return_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Terminated"_x000D__x000A_  $ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString("g")_x000D__x000A_  $ListViewItem.ImageKey = $InfoIcon_x000D__x000A_  Exit_x000D__x000A_}_x000D__x000A__x000D__x000A_# --------------------------------------------------_x000D__x000A_# Get Curent List Item_x000D__x000A_# --------------------------------------------------_x000D__x000A_$ComputerName = $ListViewItem.SubItems[0].Text_x000D__x000A__x000D__x000A_# Set Proccessing Ststus_x000D__x000A_$ListViewItem.SubItems[$StatusCol].Text = "Processing"_x000D__x000A_$ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString("g")_x000D__x000A__x000D__x000A_Try_x000D__x000A_{_x000D__x000A_  $WorkstationInfo = Get-MyWorkstationInfo -ComputerName $ComputerName -Serial -Mobile_x000D__x000A_  $WasSuccess = $WorkstationInfo.Found_x000D__x000A_  _x000D__x000A_  $ListViewItem.SubItems[01].Text = $WorkstationInfo.Status_x000D__x000A_  $ListViewItem.SubItems[02].Text = $WorkstationInfo.IPAddress_x000D__x000A_  $ListViewItem.SubItems[03].Text = $WorkstationInfo.FQDN_x000D__x000A_  $ListViewItem.SubItems[04].Text = $WorkstationInfo.Domain_x000D__x000A_  $ListViewItem.SubItems[05].Text = $WorkstationInfo.ComputerName_x000D__x000A_  $ListViewItem.SubItems[06].Text = $WorkstationInfo.UserName_x000D__x000A_  $ListViewItem.SubItems[07].Text = $WorkstationInfo.OperatingSystem_x000D__x000A_  $ListViewItem.SubItems[08].Text = $WorkstationInfo.BuildNumber_x000D__x000A_  $ListViewItem.SubItems[09].Text = $WorkstationInfo.Architecture_x000D__x000A_  $ListViewItem.SubItems[10].Text = $WorkstationInfo.SerialNumber_x000D__x000A_  $ListViewItem.SubItems[11].Text = $WorkstationInfo.Manufacturer_x000D__x000A_  $ListViewItem.SubItems[12].Text = $WorkstationInfo.Model_x000D__x000A_  $ListViewItem.SubItems[13].Text = $WorkstationInfo.IsMobile_x000D__x000A_  $ListViewItem.SubItems[14].Text = $WorkstationInfo.Memory_x000D__x000A_  $ListViewItem.SubItems[15].Text = $WorkstationInfo.InstallDate_x000D__x000A_  $ListViewItem.SubItems[16].Text = $WorkstationInfo.LastBootUpTime_x000D__x000A_  _x000D__x000A_}_x000D__x000A_Catch [System.Management.Automation.RuntimeException]_x000D__x000A_{_x000D__x000A_  $WasSuccess = $False_x000D__x000A_  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.Message_x000D__x000A_}_x000D__x000A_Catch [System.Management.Automation.ErrorRecord]_x000D__x000A_{_x000D__x000A_  $WasSuccess = $False_x000D__x000A_  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.Exception.Message_x000D__x000A_}_x000D__x000A_Catch_x000D__x000A_{_x000D__x000A_  $WasSuccess = $False_x000D__x000A_  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.ToString()_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_If ($WasSuccess)_x000D__x000A_{_x000D__x000A_  # Return Success_x000D__x000A_  $ListViewItem.ImageKey = $GoodIcon_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Completed"_x000D__x000A_}_x000D__x000A_Else_x000D__x000A_{_x000D__x000A_  # Return Success_x000D__x000A_  $ListViewItem.ImageKey = $BadIcon_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Error"_x000D__x000A_}_x000D__x000A__x000D__x000A_Write-Host -Object $ListViewItem.ImageKey_x000D__x000A__x000D__x000A_Exit_x000D__x000A__x000D__x000A__x000D__x000A_</S>
    </Props>
  </Obj>
</Objs>