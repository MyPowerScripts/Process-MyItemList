<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>PILThreadConfig</T>
      <T>System.Object</T>
    </TN>
    <ToString>PILThreadConfig</ToString>
    <Props>
      <Obj N="ColumnNames" RefId="1">
        <TN RefId="1">
          <T>System.String[]</T>
          <T>System.Array</T>
          <T>System.Object</T>
        </TN>
        <LST>
          <S>Column Name 00</S>
          <S>Column Name 01</S>
          <S>Column Name 02</S>
          <S>Column Name 03</S>
          <S>Column Name 04</S>
          <S>Column Name 05</S>
          <S>Column Name 06</S>
          <S>Column Name 07</S>
          <S>Column Name 08</S>
          <S>Column Name 09</S>
          <S>Column Name 10</S>
          <S>Column Name 11</S>
          <S>Column Name 12</S>
          <S>Column Name 13</S>
          <S>Column Name 14</S>
          <S>Column Name 15</S>
        </LST>
      </Obj>
      <Obj N="Modules" RefId="2">
        <TN RefId="2">
          <T>System.Collections.Specialized.OrderedDictionary</T>
          <T>System.Object</T>
        </TN>
        <DCT />
      </Obj>
      <Obj N="Functions" RefId="3">
        <TN RefId="3">
          <T>System.Collections.Hashtable</T>
          <T>System.Object</T>
        </TN>
        <DCT />
      </Obj>
      <Obj N="Variables" RefId="4">
        <TNRef RefId="3" />
        <DCT />
      </Obj>
      <U16 N="ThreadCount">4</U16>
      <S N="ThreadScript">&lt;#_x000D__x000A_  .SYNOPSIS_x000D__x000A_    Sample Runspace Pool Thread Script_x000D__x000A_  .DESCRIPTION_x000D__x000A_    Sample Runspace Pool Thread Script_x000D__x000A_  .PARAMETER ListViewItem_x000D__x000A_    ListViewItem Passed to the Thread Script_x000D__x000A__x000D__x000A_    This Paramter is Required in your Thread Script_x000D__x000A_  .EXAMPLE_x000D__x000A_    Test-Script.ps1 -ListViewItem $ListViewItem_x000D__x000A_  .NOTES_x000D__x000A_    Sample Thread Script_x000D__x000A__x000D__x000A_   -------------------------_x000D__x000A_   ListViewItem Status Icons_x000D__x000A_   -------------------------_x000D__x000A_   $GoodIcon = Solid Green Circle_x000D__x000A_   $BadIcon = Solid Red Circle_x000D__x000A_   $InfoIcon = Solid Blue Circle_x000D__x000A_   $CheckIcon = Checkmark_x000D__x000A_   $ErrorIcon = Red X_x000D__x000A_   $UpIcon = Green up Arrow _x000D__x000A_   $DownIcon = Red Down Arrow_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_[CmdletBinding()]_x000D__x000A_Param (_x000D__x000A_  [parameter(Mandatory = $True)]_x000D__x000A_  [System.Windows.Forms.ListViewItem]$ListViewItem_x000D__x000A_)_x000D__x000A__x000D__x000A_$ErrorActionPreference = "Stop"_x000D__x000A_$VerbosePreference = "SilentlyContinue"_x000D__x000A__x000D__x000A_# Common Columns_x000D__x000A_$ItemCol = 0_x000D__x000A_$DataCol = 1_x000D__x000A_$StatusCol = 2_x000D__x000A_$DateTimeCol = 3_x000D__x000A_$ErrorCol = 4_x000D__x000A__x000D__x000A_# ------------------------------------------------_x000D__x000A_# Check if Thread was Already Completed and Exit_x000D__x000A_# ------------------------------------------------_x000D__x000A_If ($ListViewItem.SubItems[$StatusCol].Text -eq "Completed")_x000D__x000A_{_x000D__x000A_  $ListViewItem.ImageKey = $GoodIcon_x000D__x000A_  Exit_x000D__x000A_}_x000D__x000A__x000D__x000A_# ----------------------------------------------------_x000D__x000A_# Check if Threads are Paused and Update Thread Status_x000D__x000A_# ----------------------------------------------------_x000D__x000A_If ($SyncedHash.Pause)_x000D__x000A_{_x000D__x000A_  # Set Paused Status_x000D__x000A_  $ListViewItem.SubItems[1].Text = "Pause"_x000D__x000A_  While ($SyncedHash.Pause)_x000D__x000A_  {_x000D__x000A_    [System.Threading.Thread]::Sleep(100)_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_# -----------------------------------------------------_x000D__x000A_# Check For Termination and Update Thread Status_x000D__x000A_# -----------------------------------------------------_x000D__x000A_If ($SyncedHash.Terminate)_x000D__x000A_{_x000D__x000A_  # Set Terminated Status and Exit Thread_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Terminated"_x000D__x000A_  $ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString("G")_x000D__x000A_  $ListViewItem.ImageKey = $InfoIcon_x000D__x000A_  Exit_x000D__x000A_}_x000D__x000A__x000D__x000A_# Sucess Default Exit Status_x000D__x000A_$WasSuccess = $True_x000D__x000A_$CurrentItem = $ListViewItem.SubItems[$ItemCol].Text_x000D__x000A_Try_x000D__x000A_{_x000D__x000A_  _x000D__x000A_  # Get / Update Shared Object / Value_x000D__x000A_  If ([System.String]::IsNullOrEmpty($SyncedHash.Object))_x000D__x000A_  {_x000D__x000A_    $SyncedHash.Object = "First Item"_x000D__x000A_  }_x000D__x000A_  $ListViewItem.SubItems[$DataCol].Text = $SyncedHash.Object_x000D__x000A_  $SyncedHash.Object = $CurrentItem_x000D__x000A_  _x000D__x000A_  # ---------------------------------------------------------_x000D__x000A_  # Open and wait for Mutex - Limit Access to Shared Resource_x000D__x000A_  # ---------------------------------------------------------_x000D__x000A_  $MyMutex = [System.Threading.Mutex]::OpenExisting($Mutex)_x000D__x000A_  [Void]($MyMutex.WaitOne())_x000D__x000A_  _x000D__x000A_  # Access / Update Shared Resources_x000D__x000A_  # $CurrentItem | Out-File -Encoding ascii -FilePath "C:\SharedFile.txt"_x000D__x000A_  _x000D__x000A_  # Release Mutex_x000D__x000A_  $MyMutex.ReleaseMutex()_x000D__x000A_  _x000D__x000A_}_x000D__x000A_Catch_x000D__x000A_{_x000D__x000A_  # Set Error Message / Thread Failed_x000D__x000A_  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.ToString()_x000D__x000A_  $WasSuccess = $False_x000D__x000A_}_x000D__x000A__x000D__x000A_# Set Final Date / Time and Update Status_x000D__x000A_$ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString("G")_x000D__x000A_If ($WasSuccess)_x000D__x000A_{_x000D__x000A_  # Return Success_x000D__x000A_  $ListViewItem.ImageKey = $GoodIcon_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Completed"_x000D__x000A_}_x000D__x000A_Else_x000D__x000A_{_x000D__x000A_  # Return Success_x000D__x000A_  $ListViewItem.ImageKey = $BadIcon_x000D__x000A_  $ListViewItem.SubItems[$StatusCol].Text = "Error"_x000D__x000A_}_x000D__x000A__x000D__x000A_Write-Host -Object $ListViewItem.ImageKey_x000D__x000A__x000D__x000A_Exit_x000D__x000A__x000D__x000A__x000D__x000A_</S>
    </Props>
  </Obj>
</Objs>