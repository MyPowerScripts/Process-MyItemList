{
  "Modules": {},
  "Functions": {
    "Get-MyWorkstationInfo": {
      "Name": "Get-MyWorkstationInfo",
      "ScriptBlock": "\r\n  \u003c#\r\n    .SYNOPSIS\r\n      Verify Remote Workstation is the Correct One\r\n    .DESCRIPTION\r\n      Verify Remote Workstation is the Correct One\r\n    .PARAMETER ComputerName\r\n      Name of the Computer to Verify\r\n    .PARAMETER Credential\r\n      Credentials to use when connecting to the Remote Computer\r\n    .PARAMETER Serial\r\n      Return Serial Number\r\n    .PARAMETER Mobile\r\n      Check if System is Desktop / Laptop\r\n    .INPUTS\r\n    .OUTPUTS\r\n    .EXAMPLE\r\n      Get-MyWorkstationInfo -ComputerName \"MyWorkstation\"\r\n    .NOTES\r\n      Original Script By Ken Sweet\r\n    .LINK\r\n  #\u003e\r\n  [CmdletBinding()]\r\n  param (\r\n    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]\r\n    [String[]]$ComputerName = [System.Environment]::MachineName,\r\n    [PSCredential]$Credential,\r\n    [Switch]$Serial,\r\n    [Switch]$Mobile\r\n  )\r\n  begin\r\n  {\r\n    Write-Verbose -Message \"Enter Function Get-MyWorkstationInfo\"\r\n\r\n    # Default Common Get-WmiObject Options\r\n    if ($PSBoundParameters.ContainsKey(\"Credential\"))\r\n    {\r\n      $Params = @{\r\n        \"ComputerName\" = $Null\r\n        \"Credential\"   = $Credential\r\n      }\r\n    }\r\n    else\r\n    {\r\n      $Params = @{\r\n        \"ComputerName\" = $Null\r\n      }\r\n    }\r\n  }\r\n  process\r\n  {\r\n    Write-Verbose -Message \"Enter Function Get-MyWorkstationInfo - Process\"\r\n\r\n    foreach ($Computer in $ComputerName)\r\n    {\r\n      # Start Setting Return Values as they are Found\r\n      $VerifyObject = [MyWorkstationInfo]::New($Computer)\r\n\r\n      # Validate ComputerName\r\n      if (($Computer -match \"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$\") -or ($Computer -match \"(?:25[0-5]|2[0-4][0-9]|1\\d{2}|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4][0-9]|1\\d{2}|[1-9]?\\d)){3}\"))\r\n      {\r\n        try\r\n        {\r\n          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not\r\n          $IPAddresses = @([System.Net.Dns]::GetHostAddresses($Computer) | Where-Object -FilterScript { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)\r\n          :FoundMyWork foreach ($IPAddress in $IPAddresses)\r\n          {\r\n            if ([System.Net.NetworkInformation.Ping]::New().Send($IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)\r\n            {\r\n              # Set Default Parms\r\n              $Params.ComputerName = $IPAddress\r\n\r\n              # Get ComputerSystem\r\n              [Void]($MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)\r\n              $VerifyObject.AddComputerSystem($Computer, $IPAddress, ($MyCompData.Name), ($MyCompData.PartOfDomain), ($MyCompData.Domain), ($MyCompData.Manufacturer), ($MyCompData.Model), ($MyCompData.UserName), ($MyCompData.TotalPhysicalMemory))\r\n              $MyCompData.Dispose()\r\n\r\n              # Verify Remote Computer is the Connect Computer, No need to get any more information\r\n              if ($VerifyObject.Found)\r\n              {\r\n                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer\r\n                [Void]($MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)\r\n                $VerifyObject.AddOperatingSystem(($MyOSData.ProductType), ($MyOSData.Caption), ($MyOSData.CSDVersion), ($MyOSData.BuildNumber), ($MyOSData.Version), ($MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LastBootUpTime)))\r\n                $MyOSData.Dispose()\r\n\r\n                # Optional SerialNumber Job\r\n                if ($Serial.IsPresent)\r\n                {\r\n                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer\r\n                  [Void]($MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)\r\n                  $VerifyObject.AddSerialNumber($MyBIOSData.SerialNumber)\r\n                  $MyBIOSData.Dispose()\r\n                }\r\n\r\n                # Optional Mobile / ChassisType Job\r\n                if ($Mobile.IsPresent)\r\n                {\r\n                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer\r\n                  [Void]($MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)\r\n                  $VerifyObject.AddIsMobile($MyChassisData.ChassisTypes)\r\n                  $MyChassisData.Dispose()\r\n                }\r\n              }\r\n              else\r\n              {\r\n                $VerifyObject.UpdateStatus(\"Wrong Workstation Name\")\r\n              }\r\n              # Beak out of Loop, Verify was a Success no need to try other IP Address if any\r\n              break FoundMyWork\r\n            }\r\n          }\r\n        }\r\n        catch\r\n        {\r\n          # Workstation Not in DNS\r\n          $VerifyObject.UpdateStatus(\"Workstation Not in DNS\")\r\n        }\r\n      }\r\n      else\r\n      {\r\n        $VerifyObject.UpdateStatus(\"Invalid Computer Name\")\r\n      }\r\n\r\n      # Set End Time and Return Results\r\n      $VerifyObject.SetEndTime()\r\n    }\r\n    Write-Verbose -Message \"Exit Function Get-MyWorkstationInfo - Process\"\r\n  }\r\n  end\r\n  {\r\n    [System.GC]::Collect()\r\n    [System.GC]::WaitForPendingFinalizers()\r\n    Write-Verbose -Message \"Exit Function Get-MyWorkstationInfo\"\r\n  }\r\n"
    }
  },
  "Variables": {},
  "ThreadCount": 4,
  "ThreadScript": "\u003c#\r\n  .SYNOPSIS\r\n    Sample Runspace Pool Thread Script\r\n  .DESCRIPTION\r\n    Sample Runspace Pool Thread Script\r\n  .PARAMETER ListViewItem\r\n    ListViewItem Passed to the Thread Script\r\n\r\n    This Paramter is Required in your Thread Script\r\n  .EXAMPLE\r\n    Test-Script.ps1 -ListViewItem $ListViewItem\r\n  .NOTES\r\n    Sample Thread Script\r\n\r\n   -------------------------\r\n   ListViewItem Status Icons\r\n   -------------------------\r\n   $GoodIcon = Solid Green Circle\r\n   $BadIcon = Solid Red Circle\r\n   $InfoIcon = Solid Blue Circle\r\n   $CheckIcon = Checkmark\r\n   $ErrorIcon = Red X\r\n   $UpIcon = Green up Arrow \r\n   $DownIcon = Red Down Arrow\r\n\r\n#\u003e\r\n[CmdletBinding()]\r\nParam (\r\n  [parameter(Mandatory = $True)]\r\n  [System.Windows.Forms.ListViewItem]$ListViewItem\r\n)\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n$VerbosePreference = \"SilentlyContinue\"\r\n\r\n#region class MyWorkstationInfo\r\nClass MyWorkstationInfo\r\n{\r\n  [String]$ComputerName = [Environment]::MachineName\r\n  [String]$FQDN = [Environment]::MachineName\r\n  [Bool]$Found = $False\r\n  [String]$UserName = \"\"\r\n  [String]$Domain = \"\"\r\n  [Bool]$DomainMember = $False\r\n  [int]$ProductType = 0\r\n  [String]$Manufacturer = \"\"\r\n  [String]$Model = \"\"\r\n  [Bool]$IsMobile = $False\r\n  [String]$SerialNumber = \"\"\r\n  [Long]$Memory = 0\r\n  [String]$OperatingSystem = \"\"\r\n  [String]$BuildNumber = \"\"\r\n  [String]$Version = \"\"\r\n  [String]$ServicePack = \"\"\r\n  [String]$Architecture = \"\"\r\n  [Bool]$Is64Bit = $False\r\n  [DateTime]$LocalDateTime = [DateTime]::MinValue\r\n  [DateTime]$InstallDate = [DateTime]::MinValue\r\n  [DateTime]$LastBootUpTime = [DateTime]::MinValue\r\n  [String]$IPAddress = \"\"\r\n  [String]$Status = \"Off-Line\"\r\n  [DateTime]$StartTime = [DateTime]::Now\r\n  [DateTime]$EndTime = [DateTime]::Now\r\n  \r\n  MyWorkstationInfo ([String]$ComputerName)\r\n  {\r\n    $This.ComputerName = $ComputerName.ToUpper()\r\n    $This.FQDN = $ComputerName.ToUpper()\r\n    $This.Status = \"On-Line\"\r\n  }\r\n  \r\n  [Void] AddComputerSystem ([String]$TestName, [String]$IPAddress, [String]$ComputerName, [Bool]$DomainMember, [String]$Domain, [String]$Manufacturer, [String]$Model, [String]$UserName, [Long]$Memory)\r\n  {\r\n    $This.IPAddress = $IPAddress\r\n    $This.ComputerName = \"$($ComputerName)\".ToUpper()\r\n    $This.DomainMember = $DomainMember\r\n    $This.Domain = \"$($Domain)\".ToUpper()\r\n    If ($DomainMember)\r\n    {\r\n      $This.FQDN = \"$($ComputerName).$($Domain)\".ToUpper()\r\n    }\r\n    $This.Manufacturer = $Manufacturer\r\n    $This.Model = $Model\r\n    $This.UserName = $UserName\r\n    $This.Memory = $Memory\r\n    $This.Found = ($ComputerName -eq @($TestName.Split(\".\"))[0])\r\n  }\r\n  \r\n  [Void] AddOperatingSystem ([int]$ProductType, [String]$OperatingSystem, [String]$ServicePack, [String]$BuildNumber, [String]$Version, [String]$Architecture, [DateTime]$LocalDateTime, [DateTime]$InstallDate, [DateTime]$LastBootUpTime)\r\n  {\r\n    $This.ProductType = $ProductType\r\n    $This.OperatingSystem = $OperatingSystem\r\n    $This.ServicePack = $ServicePack\r\n    $This.BuildNumber = $BuildNumber\r\n    $This.Version = $Version\r\n    $This.Architecture = $Architecture\r\n    $This.Is64Bit = ($Architecture -eq \"64-bit\")\r\n    $This.LocalDateTime = $LocalDateTime\r\n    $This.InstallDate = $InstallDate\r\n    $This.LastBootUpTime = $LastBootUpTime\r\n  }\r\n  \r\n  [Void] AddSerialNumber ([String]$SerialNumber)\r\n  {\r\n    $This.SerialNumber = $SerialNumber\r\n  }\r\n  \r\n  [Void] AddIsMobile ([Long[]]$ChassisTypes)\r\n  {\r\n    $This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains $ChassisTypes[0])\r\n  }\r\n  \r\n  [Void] UpdateStatus ([String]$Status)\r\n  {\r\n    $This.Status = $Status\r\n  }\r\n  \r\n  [MyWorkstationInfo] SetEndTime ()\r\n  {\r\n    $This.EndTime = [DateTime]::Now\r\n    Return $This\r\n  }\r\n  \r\n  [TimeSpan] GetRunTime ()\r\n  {\r\n    Return ($This.EndTime - $This.StartTime)\r\n  }\r\n}\r\n#endregion class MyWorkstationInfo\r\n\r\n# Common Columns\r\n$StatusCol = 17\r\n$DateTimeCol = 18\r\n$ErrorCol = 19\r\n\r\n# ------------------------------------------------\r\n# Check if Thread was Already Completed and Exit\r\n#\r\n# One Column needs to be the Status the the Thread\r\n#  Status Messages are Customizable\r\n# ------------------------------------------------\r\nIf ($ListViewItem.SubItems[$StatusCol].Text -eq \"Completed\")\r\n{\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  Exit\r\n}\r\n\r\n# ----------------------------------------------------\r\n# Check if Threads are Paused and Update Thread Status\r\n#\r\n# You can add Multiple Checks for Pasue if Needed\r\n# ----------------------------------------------------\r\nIf ($SyncedHash.Pause)\r\n{\r\n  # Set Paused Status\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Pause\"\r\n  $ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString(\"g\")\r\n  While ($SyncedHash.Pause)\r\n  {\r\n    [System.Threading.Thread]::Sleep(100)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------\r\n# Check For Termination and Update Thread Status\r\n#\r\n# You can add Multiple Checks for Termination if Needed\r\n# -----------------------------------------------------\r\nIf ($SyncedHash.Terminate)\r\n{\r\n  # Set Terminated Status and Return\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Terminated\"\r\n  $ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString(\"g\")\r\n  $ListViewItem.ImageKey = $InfoIcon\r\n  Exit\r\n}\r\n\r\n# --------------------------------------------------\r\n# Get Curent List Item\r\n# --------------------------------------------------\r\n$ComputerName = $ListViewItem.SubItems[0].Text\r\n\r\n# Set Proccessing Ststus\r\n$ListViewItem.SubItems[$StatusCol].Text = \"Processing\"\r\n$ListViewItem.SubItems[$DateTimeCol].Text = [DateTime]::Now.ToString(\"g\")\r\n\r\nTry\r\n{\r\n  $WorkstationInfo = Get-MyWorkstationInfo -ComputerName $ComputerName -Serial -Mobile\r\n  $WasSuccess = $WorkstationInfo.Found\r\n  \r\n  $ListViewItem.SubItems[01].Text = $WorkstationInfo.Status\r\n  $ListViewItem.SubItems[02].Text = $WorkstationInfo.IPAddress\r\n  $ListViewItem.SubItems[03].Text = $WorkstationInfo.FQDN\r\n  $ListViewItem.SubItems[04].Text = $WorkstationInfo.Domain\r\n  $ListViewItem.SubItems[05].Text = $WorkstationInfo.ComputerName\r\n  $ListViewItem.SubItems[06].Text = $WorkstationInfo.UserName\r\n  $ListViewItem.SubItems[07].Text = $WorkstationInfo.OperatingSystem\r\n  $ListViewItem.SubItems[08].Text = $WorkstationInfo.BuildNumber\r\n  $ListViewItem.SubItems[09].Text = $WorkstationInfo.Architecture\r\n  $ListViewItem.SubItems[10].Text = $WorkstationInfo.SerialNumber\r\n  $ListViewItem.SubItems[11].Text = $WorkstationInfo.Manufacturer\r\n  $ListViewItem.SubItems[12].Text = $WorkstationInfo.Model\r\n  $ListViewItem.SubItems[13].Text = $WorkstationInfo.IsMobile\r\n  $ListViewItem.SubItems[14].Text = $WorkstationInfo.Memory\r\n  $ListViewItem.SubItems[15].Text = $WorkstationInfo.InstallDate\r\n  $ListViewItem.SubItems[16].Text = $WorkstationInfo.LastBootUpTime\r\n  \r\n}\r\nCatch [System.Management.Automation.RuntimeException]\r\n{\r\n  $WasSuccess = $False\r\n  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.Message\r\n}\r\nCatch [System.Management.Automation.ErrorRecord]\r\n{\r\n  $WasSuccess = $False\r\n  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.Exception.Message\r\n}\r\nCatch\r\n{\r\n  $WasSuccess = $False\r\n  $ListViewItem.SubItems[$ErrorCol].Text = $PSItem.ToString()\r\n}\r\n\r\n\r\nIf ($WasSuccess)\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $GoodIcon\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Completed\"\r\n}\r\nElse\r\n{\r\n  # Return Success\r\n  $ListViewItem.ImageKey = $BadIcon\r\n  $ListViewItem.SubItems[$StatusCol].Text = \"Error\"\r\n}\r\n\r\nWrite-Host -Object $ListViewItem.ImageKey\r\n\r\nExit\r\n\r\n\r\n",
  "ColumnNames": [
    "Workstation",
    "On-Line",
    "IP Address",
    "FQDN",
    "Domain",
    "Computer Name",
    "User Name",
    "Operating System",
    "Build Number",
    "Architecture",
    "Serial Number",
    "Manufacture",
    "Model",
    "IsMobile",
    "Memory",
    "Install Date",
    "Last Reboot",
    "Job Status",
    "Date / Time",
    "Error Message"
  ]
}