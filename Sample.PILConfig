<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>PILThreadConfig</T>
      <T>System.Object</T>
    </TN>
    <ToString>PILThreadConfig</ToString>
    <Props>
      <Obj N="ColumnNames" RefId="1">
        <TN RefId="1">
          <T>System.String[]</T>
          <T>System.Array</T>
          <T>System.Object</T>
        </TN>
        <LST>
          <S>My Column 00</S>
          <S>My Column 01</S>
          <S>My Column 02</S>
          <S>My Column 03</S>
          <S>My Column 04</S>
          <S>My Column 05</S>
          <S>My Column 06</S>
          <S>My Column 07</S>
          <S>My Column 08</S>
          <S>My Column 09</S>
          <S>My Column 10</S>
          <S>My Column 11</S>
          <S>My Column 12</S>
          <S>My Column 13</S>
          <S>My Column 14</S>
          <S>My Column 15</S>
        </LST>
      </Obj>
      <Obj N="Modules" RefId="2">
        <TN RefId="2">
          <T>System.Collections.Specialized.OrderedDictionary</T>
          <T>System.Object</T>
        </TN>
        <DCT>
          <En>
            <S N="Key">Az.Accounts</S>
            <Obj N="Value" RefId="3">
              <TN RefId="3">
                <T>Selected.PILModule</T>
                <T>System.Management.Automation.PSCustomObject</T>
                <T>System.Object</T>
              </TN>
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Az.Accounts</S>
                <Version N="Version">0.0.0</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Authentication</S>
            <Obj N="Value" RefId="4">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Authentication</S>
                <Version N="Version">0.0.0</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">AzureAD</S>
            <Obj N="Value" RefId="5">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">AzureAD</S>
                <Version N="Version">2.0.2.140</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph</S>
            <Obj N="Value" RefId="6">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Applications</S>
            <Obj N="Value" RefId="7">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Applications</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Bookings</S>
            <Obj N="Value" RefId="8">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Bookings</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Calendar</S>
            <Obj N="Value" RefId="9">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Calendar</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.ChangeNotifications</S>
            <Obj N="Value" RefId="10">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.ChangeNotifications</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.CloudCommunications</S>
            <Obj N="Value" RefId="11">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.CloudCommunications</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Compliance</S>
            <Obj N="Value" RefId="12">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Compliance</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.CrossDeviceExperiences</S>
            <Obj N="Value" RefId="13">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.CrossDeviceExperiences</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.DeviceManagement</S>
            <Obj N="Value" RefId="14">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.DeviceManagement</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.DeviceManagement.Actions</S>
            <Obj N="Value" RefId="15">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.DeviceManagement.Actions</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.DeviceManagement.Administration</S>
            <Obj N="Value" RefId="16">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.DeviceManagement.Administration</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.DeviceManagement.Enrolment</S>
            <Obj N="Value" RefId="17">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.DeviceManagement.Enrolment</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.DeviceManagement.Functions</S>
            <Obj N="Value" RefId="18">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.DeviceManagement.Functions</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Devices.CloudPrint</S>
            <Obj N="Value" RefId="19">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Devices.CloudPrint</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Devices.CorporateManagement</S>
            <Obj N="Value" RefId="20">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Devices.CorporateManagement</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Devices.ServiceAnnouncement</S>
            <Obj N="Value" RefId="21">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Devices.ServiceAnnouncement</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.DirectoryObjects</S>
            <Obj N="Value" RefId="22">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.DirectoryObjects</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Education</S>
            <Obj N="Value" RefId="23">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Education</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Files</S>
            <Obj N="Value" RefId="24">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Files</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Financials</S>
            <Obj N="Value" RefId="25">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Financials</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Groups</S>
            <Obj N="Value" RefId="26">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Groups</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Identity.DirectoryManagement</S>
            <Obj N="Value" RefId="27">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Identity.DirectoryManagement</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Identity.Governance</S>
            <Obj N="Value" RefId="28">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Identity.Governance</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Identity.SignIns</S>
            <Obj N="Value" RefId="29">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Identity.SignIns</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Mail</S>
            <Obj N="Value" RefId="30">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Mail</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Notes</S>
            <Obj N="Value" RefId="31">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Notes</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.People</S>
            <Obj N="Value" RefId="32">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.People</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.PersonalContacts</S>
            <Obj N="Value" RefId="33">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.PersonalContacts</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Planner</S>
            <Obj N="Value" RefId="34">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Planner</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Reports</S>
            <Obj N="Value" RefId="35">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Reports</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.SchemaExtensions</S>
            <Obj N="Value" RefId="36">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.SchemaExtensions</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Search</S>
            <Obj N="Value" RefId="37">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Search</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Security</S>
            <Obj N="Value" RefId="38">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Security</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Sites</S>
            <Obj N="Value" RefId="39">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Sites</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Teams</S>
            <Obj N="Value" RefId="40">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Teams</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Users</S>
            <Obj N="Value" RefId="41">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Users</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Users.Actions</S>
            <Obj N="Value" RefId="42">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Users.Actions</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.Users.Functions</S>
            <Obj N="Value" RefId="43">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.Users.Functions</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.Graph.WindowsUpdates</S>
            <Obj N="Value" RefId="44">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.Graph.WindowsUpdates</S>
                <Version N="Version">1.9.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Microsoft.PowerShell.Operation.Validation</S>
            <Obj N="Value" RefId="45">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Microsoft.PowerShell.Operation.Validation</S>
                <Version N="Version">1.0.1</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">MSAL.PS</S>
            <Obj N="Value" RefId="46">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">MSAL.PS</S>
                <Version N="Version">4.37.0.0</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">MSOnline</S>
            <Obj N="Value" RefId="47">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">MSOnline</S>
                <Version N="Version">1.1.183.66</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">PackageManagement</S>
            <Obj N="Value" RefId="48">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">PackageManagement</S>
                <Version N="Version">1.4.7</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Pester</S>
            <Obj N="Value" RefId="49">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">Pester</S>
                <Version N="Version">3.4.0</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">PowerShellGet</S>
            <Obj N="Value" RefId="50">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">PowerShellGet</S>
                <Version N="Version">2.2.5</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">PSReadLine</S>
            <Obj N="Value" RefId="51">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">All Users</S>
                <S N="Name">PSReadLine</S>
                <Version N="Version">2.0.0</Version>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">MyRSPool</S>
            <Obj N="Value" RefId="52">
              <TNRef RefId="3" />
              <MS>
                <S N="Location">Current User</S>
                <S N="Name">MyRSPool</S>
                <Version N="Version">0.0.0</Version>
              </MS>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="Functions" RefId="53">
        <TN RefId="4">
          <T>System.Collections.Hashtable</T>
          <T>System.Object</T>
        </TN>
        <DCT>
          <En>
            <S N="Key">Update-ThreadConfiguration</S>
            <Obj N="Value" RefId="54">
              <TN RefId="5">
                <T>Selected.PILFunction</T>
                <T>System.Management.Automation.PSCustomObject</T>
                <T>System.Object</T>
              </TN>
              <MS>
                <S N="Name">Update-ThreadConfiguration</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows ThreadConfiguration_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows ThreadConfiguration_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the ThreadConfiguration Window_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Statts ThreadConfiguration Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Status ThreadConfiguration Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      The DialogResult of the Left Button_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      The DialogResult of the Middle Button_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      The DialogResult of the Right Button_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Return = ThreadConfiguration -Title $Title_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "Update PIL Threads Configuration",_x000D__x000A_    [Int]$Width = 70,_x000D__x000A_    [Int]$Height = 33,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Update-ThreadConfiguration"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ThreadConfiguration **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ThreadConfiguration Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ThreadConfigurationForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ThreadConfigurationForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ThreadConfigurationForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ThreadConfigurationForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ThreadConfigurationForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ThreadConfigurationForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ThreadConfigurationForm.Icon = $PILForm.Icon_x000D__x000A_  $ThreadConfigurationForm.KeyPreview = $True_x000D__x000A_  $ThreadConfigurationForm.MaximizeBox = $False_x000D__x000A_  $ThreadConfigurationForm.MinimizeBox = $False_x000D__x000A_  $ThreadConfigurationForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ThreadConfigurationForm.Name = "ThreadConfigurationForm"_x000D__x000A_  $ThreadConfigurationForm.Owner = $PILForm_x000D__x000A_  $ThreadConfigurationForm.ShowInTaskbar = $False_x000D__x000A_  $ThreadConfigurationForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ThreadConfigurationForm.Text = $Title_x000D__x000A_  #endregion $ThreadConfigurationForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormKeyDown ********_x000D__x000A_  function Start-ThreadConfigurationFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ThreadConfigurationFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ThreadConfigurationForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormKeyDown ********_x000D__x000A_  $ThreadConfigurationForm.add_KeyDown({ Start-ThreadConfigurationFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormLoad ********_x000D__x000A_  function Start-ThreadConfigurationFormLoad_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Load Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Load Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Load Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Load Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormLoad -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Load Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Load Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormLoad ********_x000D__x000A_  $ThreadConfigurationForm.add_Load({ Start-ThreadConfigurationFormLoad -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormMove ********_x000D__x000A_  function Start-ThreadConfigurationFormMove_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Move Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Move Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Move Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Move Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Move Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Move Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormMove ********_x000D__x000A_  $ThreadConfigurationForm.add_Move({ Start-ThreadConfigurationFormMove -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormShown ********_x000D__x000A_  function Start-ThreadConfigurationFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $Sender.Refresh()_x000D__x000A_    Start-ThreadConfigurationBtmMidButtonClick -Sender $ThreadConfigurationBtmMidButton -EventArg "Reset"_x000D__x000A_    $ThreadConfigurationBtmLeftButton.Select()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormShown ********_x000D__x000A_  $ThreadConfigurationForm.add_Shown({ Start-ThreadConfigurationFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ThreadConfiguration Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ThreadConfiguration Panel - Fill_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ThreadConfigurationPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationForm.Controls.Add($ThreadConfigurationPanel)_x000D__x000A_  #$ThreadConfigurationPanel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ThreadConfigurationPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ThreadConfigurationPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ThreadConfigurationPanel.Name = "ThreadConfigurationPanel"_x000D__x000A_  $ThreadConfigurationPanel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)_x000D__x000A_  $ThreadConfigurationPanel.Text = "ThreadConfigurationPanel"_x000D__x000A_  #endregion $ThreadConfigurationPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ThreadConfigurationPanel Controls ********_x000D__x000A_  _x000D__x000A_  $TmpValue = (($ThreadConfigurationPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 5)) / 3)_x000D__x000A_  $TmpWidth = [Math]::Floor($TmpValue)_x000D__x000A_  $TmpMod = ($TmpValue % 2)_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCFunctions GroupBox - Fill_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCFunctionsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCFunctionsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCFunctionsGroupBox)_x000D__x000A_  $PILTCFunctionsGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCFunctionsGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCFunctionsGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCFunctionsGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $PILTCFunctionsGroupBox.Height = 100_x000D__x000A_  $PILTCFunctionsGroupBox.Margin = [System.Windows.Forms.Padding]::New(50, 3, 10, 50)_x000D__x000A_  $PILTCFunctionsGroupBox.Name = "PILTCFunctionsGroupBox"_x000D__x000A_  $PILTCFunctionsGroupBox.Text = "Common Functions"_x000D__x000A_  #$PILTCFunctionsGroupBox.Width = 200_x000D__x000A_  #endregion $PILTCFunctionsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCFunctionsGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCFunctionsListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCFunctionsListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCFunctionsGroupBox.Controls.Add($PILTCFunctionsListBox)_x000D__x000A_  $PILTCFunctionsListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$PILTCFunctionsListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCFunctionsListBox.DisplayMember = "Name"_x000D__x000A_  $PILTCFunctionsListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCFunctionsListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCFunctionsListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCFunctionsListBox.IntegralHeight = $False_x000D__x000A_  $PILTCFunctionsListBox.ItemHeight = [MyConfig]::Font.Height_x000D__x000A_  $PILTCFunctionsListBox.Name = "PILTCFunctionsListBox"_x000D__x000A_  $PILTCFunctionsListBox.Sorted = $True_x000D__x000A_  #$PILTCFunctionsListBox.TabIndex = 0_x000D__x000A_  #$PILTCFunctionsListBox.TabStop = $True_x000D__x000A_  #$PILTCFunctionsListBox.Tag = [System.Object]::New()_x000D__x000A_  $PILTCFunctionsListBox.ValueMember = "ScriptBlock"_x000D__x000A_  #endregion $PILTCFunctionsListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_    _x000D__x000A_  #region ******** Function Start-PILTCFunctionsListBoxMouseDown ********_x000D__x000A_  function Start-PILTCFunctionsListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCFunctions ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCFunctions ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCFunctionsContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCFunctionsContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCFunctionsContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsListBoxMouseDown ********_x000D__x000A_  $PILTCFunctionsListBox.add_MouseDown({Start-PILTCFunctionsListBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCFunctionsListBoxSelectedIndexChanged ********_x000D__x000A_  function Start-PILTCFunctionsListBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCFunctions ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCFunctions ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsListBoxSelectedIndexChanged ********_x000D__x000A_  $PILTCFunctionsListBox.add_SelectedIndexChanged({Start-PILTCFunctionsListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCFunctions ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCFunctionsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCFunctionsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCFunctionsListBox.ContextMenuStrip = $PILTCFunctionsContextMenuStrip_x000D__x000A_  $PILTCFunctionsContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCFunctionsContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCFunctionsContextMenuStrip.Name = "PILTCFunctionsContextMenuStrip"_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCFunctionsContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCFunctionsContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCFunctionsContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCFunctionsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCFunctionsContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCFunctionsContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCFunctions ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCFunctions ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsContextMenuStripOpening ********_x000D__x000A_  $PILTCFunctionsContextMenuStrip.add_Opening({Start-PILTCFunctionsContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A_    _x000D__x000A_  #region ******** Function Start-PILTCFunctionsContextMenuStripItemClick ********_x000D__x000A_  Function Start-PILTCFunctionsContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ItemClicked Event for the PILTCFunctions ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ItemClicked Event for the PILTCFunctions ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the ItemClicked Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions ItemClicked Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $PILOpenFileDialog.FileName = ""_x000D__x000A_        $PILOpenFileDialog.Filter = "PowerShell Scripts|*.PS1|All Files (*.*)|*.*"_x000D__x000A_        $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_        $PILOpenFileDialog.Multiselect = $False_x000D__x000A_        $PILOpenFileDialog.Title = "Load PIL Thread Script"_x000D__x000A_        $PILOpenFileDialog.Tag = $Null_x000D__x000A_        $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_        If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_        {_x000D__x000A_          $TmpFunctions = Get-Content -Path $PILOpenFileDialog.FileName -Raw_x000D__x000A_          $AST = [System.Management.Automation.Language.Parser]::ParseInput($TmpFunctions, [ref]$Null, [ref]$Null)_x000D__x000A_          $Functions = @($AST.FindAll({ Param ($Node) ($Node -is [System.Management.Automation.Language.FunctionDefinitionAst] -and (-not ($node.Parent -is [System.Management.Automation.Language.FunctionMemberAst]))) }, $True))_x000D__x000A_          If ($Functions.Count -gt 0)_x000D__x000A_          {_x000D__x000A_            ForEach ($Function In $Functions)_x000D__x000A_            {_x000D__x000A_              [Void]$PILTCFunctionsListBox.Items.Add([PILFunction]::New($Function.Name, $Function.Body.Extent.Text))_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items.RemoveAt($PILTCFunctionsListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsContextMenuStripItemClick ********_x000D__x000A_  _x000D__x000A_  (New-MenuItem -Menu $PILTCFunctionsContextMenuStrip -Text "Add Functions" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCFunctionsContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCFunctionsContextMenuStrip -Text "Remove Function" -Name "Remove" -Tag "Remove" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCFunctionsContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCFunctionsContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCFunctionsContextMenuStrip -Text "Clear All" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -PassThru).add_Click({ Start-PILTCFunctionsContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  $PILTCFunctionsGroupBox.ClientSize = [System.Drawing.Size]::New($PILTCFunctionsGroupBox.ClientSize.Width, ([MyConfig]::Font.Height * 10))_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCFunctionsGroupBox Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCVariables GroupBox - Right_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCVariablesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCVariablesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCVariablesGroupBox)_x000D__x000A_  $PILTCVariablesGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCVariablesGroupBox.Dock = [System.Windows.Forms.DockStyle]::Right_x000D__x000A_  $PILTCVariablesGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCVariablesGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $PILTCVariablesGroupBox.Name = "PILTCVariablesGroupBox"_x000D__x000A_  $PILTCVariablesGroupBox.Text = "Common Variables"_x000D__x000A_  $PILTCVariablesGroupBox.Width = $TmpWidth_x000D__x000A_  #endregion $PILTCVariablesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCVariablesGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCVariablesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCVariablesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCVariablesGroupBox.Controls.Add($PILTCVariablesListBox)_x000D__x000A_  $PILTCVariablesListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$PILTCVariablesListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCVariablesListBox.DisplayMember = "Name"_x000D__x000A_  $PILTCVariablesListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCVariablesListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCVariablesListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCVariablesListBox.IntegralHeight = $False_x000D__x000A_  $PILTCVariablesListBox.ItemHeight = [MyConfig]::Font.Height_x000D__x000A_  $PILTCVariablesListBox.Name = "PILTCVariablesListBox"_x000D__x000A_  $PILTCVariablesListBox.Sorted = $True_x000D__x000A_  #$PILTCVariablesListBox.TabIndex = 0_x000D__x000A_  #$PILTCVariablesListBox.TabStop = $True_x000D__x000A_  #$PILTCVariablesListBox.Tag = [System.Object]::New()_x000D__x000A_  $PILTCVariablesListBox.ValueMember = "Value"_x000D__x000A_  #endregion $PILTCVariablesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_   _x000D__x000A_  #region ******** Function Start-PILTCVariablesListBoxMouseDown ********_x000D__x000A_  function Start-PILTCVariablesListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCVariables ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCVariables ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Edit"].Enabled = $True_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Edit"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCVariablesContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCVariablesContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesListBoxMouseDown ********_x000D__x000A_  $PILTCVariablesListBox.add_MouseDown({Start-PILTCVariablesListBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCVariablesListBoxSelectedIndexChanged ********_x000D__x000A_  function Start-PILTCVariablesListBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCVariables ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCVariables ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesListBoxSelectedIndexChanged ********_x000D__x000A_  $PILTCVariablesListBox.add_SelectedIndexChanged({Start-PILTCVariablesListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCVariables ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCVariablesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCVariablesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCVariablesListBox.ContextMenuStrip = $PILTCVariablesContextMenuStrip_x000D__x000A_  $PILTCVariablesContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCVariablesContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCVariablesContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCVariablesContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCVariablesContextMenuStrip.Name = "PILTCVariablesContextMenuStrip"_x000D__x000A_  $PILTCVariablesContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCVariablesContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCVariablesContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCVariablesContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCVariablesContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCVariablesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCVariablesContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCVariablesContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCVariables ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCVariables ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesContextMenuStripOpening ********_x000D__x000A_  $PILTCVariablesContextMenuStrip.add_Opening({Start-PILTCVariablesContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCVariablesContextMenuStripItemClick ********_x000D__x000A_  Function Start-PILTCVariablesContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ItemClicked Event for the PILTCVariables ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ItemClicked Event for the PILTCVariables ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the ItemClicked Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables ItemClicked Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $OrderedItems = [Ordered]@{ "Variable Name"= ""; "Variable Value" = "" }_x000D__x000A_        $DialogResult = Get-MultiTextBoxInput -Title "Add Variable" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          [Void]$PILTCVariablesListBox.Items.Add([PILVariable]::New($DialogResult.OrderedItems["Variable Name"], $DialogResult.OrderedItems["Variable Value"]))_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Edit"_x000D__x000A_      {_x000D__x000A_        $OrderedItems = [Ordered]@{ "Variable Name" = $PILTCVariablesListBox.SelectedItem.Name; "Variable Value" = $PILTCVariablesListBox.SelectedItem.Value }_x000D__x000A_        $DialogResult = Get-MultiTextBoxInput -Title "Edit Variable" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          $PILTCVariablesListBox.Items.RemoveAt($PILTCVariablesListBox.SelectedIndex)_x000D__x000A_          [Void]$PILTCVariablesListBox.Items.Add([PILVariable]::New($DialogResult.OrderedItems["Variable Name"], $DialogResult.OrderedItems["Variable Value"]))_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items.RemoveAt($PILTCVariablesListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesContextMenuStripItemClick ********_x000D__x000A_  _x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Add Variable" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Edit Variable" -Name "Edit" -Tag "Edit" -DisplayStyle "ImageAndText" -ImageKey "Edit16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Remove Variable" -Name "Remove" -Tag "Remove" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCVariablesContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Clear All" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCVariablesGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCModules GroupBox - Left_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCModulesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCModulesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCModulesGroupBox)_x000D__x000A_  $PILTCModulesGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCModulesGroupBox.Dock = [System.Windows.Forms.DockStyle]::Left_x000D__x000A_  $PILTCModulesGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCModulesGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $PILTCModulesGroupBox.Name = "PILTCModulesGroupBox"_x000D__x000A_  $PILTCModulesGroupBox.Text = "Common Modules"_x000D__x000A_  $PILTCModulesGroupBox.Width = $TmpWidth_x000D__x000A_  #endregion $PILTCModulesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCModulesGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCModulesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCModulesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCModulesGroupBox.Controls.Add($PILTCModulesListBox)_x000D__x000A_  $PILTCModulesListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$PILTCModulesListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCModulesListBox.DisplayMember = "Name"_x000D__x000A_  $PILTCModulesListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCModulesListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCModulesListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCModulesListBox.IntegralHeight = $False_x000D__x000A_  $PILTCModulesListBox.ItemHeight = [MyConfig]::Font.Height_x000D__x000A_  $PILTCModulesListBox.Name = "PILTCModulesListBox"_x000D__x000A_  $PILTCModulesListBox.Sorted = $False_x000D__x000A_  #$PILTCModulesListBox.TabIndex = 0_x000D__x000A_  #$PILTCModulesListBox.TabStop = $True_x000D__x000A_  #$PILTCModulesListBox.Tag = [System.Object]::New()_x000D__x000A_  $PILTCModulesListBox.ValueMember = "Version"_x000D__x000A_  #endregion $PILTCModulesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  _x000D__x000A_  # Add Current Modules_x000D__x000A_  If ([MyRuntime]::ThreadConfig.Modules.Count -gt 0)_x000D__x000A_  {_x000D__x000A_    #$PILTCModulesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Modules.Values))_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCModulesListBoxMouseDown ********_x000D__x000A_  function Start-PILTCModulesListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCModules ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCModules ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Up"].Enabled = ($TempIndex -gt 0)_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Down"].Enabled = ($TempIndex -lt ($Sender.Items.Count - 1))_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Up"].Enabled = $False_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Down"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCModulesContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCModulesContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesListBoxMouseDown ********_x000D__x000A_  $PILTCModulesListBox.add_MouseDown({Start-PILTCModulesListBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCModulesListBoxSelectedIndexChanged ********_x000D__x000A_  function Start-PILTCModulesListBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCModules ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCModules ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesListBoxSelectedIndexChanged ********_x000D__x000A_  $PILTCModulesListBox.add_SelectedIndexChanged({Start-PILTCModulesListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCModules ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCModulesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCModulesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCModulesListBox.ContextMenuStrip = $PILTCModulesContextMenuStrip_x000D__x000A_  $PILTCModulesContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCModulesContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCModulesContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCModulesContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCModulesContextMenuStrip.Name = "PILTCModulesContextMenuStrip"_x000D__x000A_  $PILTCModulesContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCModulesContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCModulesContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCModulesContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCModulesContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCModulesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_ _x000D__x000A_  #region ******** Function Start-PILTCModulesContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCModulesContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCModules ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCModules ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesContextMenuStripOpening ********_x000D__x000A_  $PILTCModulesContextMenuStrip.add_Opening({Start-PILTCModulesContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCModulesContextMenuStripItemClick ********_x000D__x000A_  function Start-PILTCModulesContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the PILTCModules ContextMenuStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the PILTCModules ContextMenuStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $TmpCurMods = @($PILTCModulesListBox.Items | Select-Object -ExpandProperty Name)_x000D__x000A_        $TmpNewMods = @([MyRuntime]::Modules.Values | Where-Object { $PSItem.Name -notin $TmpCurMods } | Sort-Object -Property Location, Name)_x000D__x000A_        If ($TmpNewMods.Count -eq 0)_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-UserResponse -Title "No More Modules" -Message "No New Modules are Avaible for to Add to the PIL Thread Configuration." -ButtonMid OK -ButtonDefault OK -Icon ([System.Drawing.SystemIcons]::Information)_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-ListViewOption -Title "Select Modules" -Message "Select The Modules to Add to the PIL Thread Configuration." -Items $TmpNewMods -Property "Location", "Name", "Version" -Resize -Multi_x000D__x000A_          If ($DialogResult.Success)_x000D__x000A_          {_x000D__x000A_            $PILTCModulesListBox.Items.AddRange($DialogResult.item)_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Up"_x000D__x000A_      {_x000D__x000A_        $TmpItem = $PILTCModulesListBox.SelectedItem_x000D__x000A_        $TmpIndex = $PILTCModulesListBox.SelectedIndex_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        $PILTCModulesListBox.Items.Insert(($TmpIndex - 1), $TmpItem)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Down"_x000D__x000A_      {_x000D__x000A_        $TmpItem = $PILTCModulesListBox.SelectedItem_x000D__x000A_        $TmpIndex = $PILTCModulesListBox.SelectedIndex_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        $PILTCModulesListBox.Items.Insert(($TmpIndex + 1), $TmpItem)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Add Module" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Remove Module" -Name "Remove" -Tag "Remove" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCModulesContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Clear All" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -PassThru).add_Click({ Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCModulesContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Move Up" -Name "Up" -Tag "Up" -DisplayStyle "ImageAndText" -ImageKey "Up16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Move Down" -Name "Down" -Tag "Down" -DisplayStyle "ImageAndText" -ImageKey "Down16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCModulesGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCScript GroupBox - Bottom_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCScriptGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCScriptGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCScriptGroupBox)_x000D__x000A_  $PILTCScriptGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCScriptGroupBox.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $PILTCScriptGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  #$PILTCScriptGroupBox.Height = 100_x000D__x000A_  #$PILTCScriptGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $PILTCScriptGroupBox.Name = "PILTCScriptGroupBox"_x000D__x000A_  $PILTCScriptGroupBox.Text = "Thread Script"_x000D__x000A_  $PILTCScriptGroupBox.Size = [System.Drawing.Size]::New($TmpWidth, $TmpWidth)_x000D__x000A_  #$PILTCScriptGroupBox.Width = 200_x000D__x000A_  #endregion $PILTCScriptGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCScriptGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCScriptTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $PILTCScriptTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $PILTCScriptGroupBox.Controls.Add($PILTCScriptTextBox)_x000D__x000A_  $PILTCScriptTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $PILTCScriptTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCScriptTextBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCScriptTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCScriptTextBox.Multiline = $True_x000D__x000A_  $PILTCScriptTextBox.Name = "PILTCScriptTextBox"_x000D__x000A_  $PILTCScriptTextBox.ReadOnly = $True_x000D__x000A_  $PILTCScriptTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both_x000D__x000A_  $PILTCScriptTextBox.ShortcutsEnabled = $False_x000D__x000A_  #$PILTCScriptTextBox.TabIndex = 0_x000D__x000A_  #$PILTCScriptTextBox.TabStop = $True_x000D__x000A_  #$PILTCScriptTextBox.Tag = @{ "HintText" = "Double Click to Load Thread Script."; "HintEnabled" = $True }_x000D__x000A_  $PILTCScriptTextBox.Text = $Null_x000D__x000A_  $PILTCScriptTextBox.WordWrap = $False_x000D__x000A_  #endregion $PILTCScriptTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCScriptTextBoxMouseDown ********_x000D__x000A_  function Start-PILTCScriptTextBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCScript TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCScript TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptTextBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $PILTCScriptContextMenuStrip.Items["Clear"].Enabled = ($PILTCScriptTextBox.Text.Length -gt 0)_x000D__x000A_    $PILTCScriptContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCScriptTextBoxMouseDown ********_x000D__x000A_  $PILTCScriptTextBox.add_MouseDown({Start-PILTCScriptTextBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCScript ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCScriptContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCScriptContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCScriptListBox.ContextMenuStrip = $PILTCScriptContextMenuStrip_x000D__x000A_  $PILTCScriptContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCScriptContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCScriptContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCScriptContextMenuStrip.Name = "PILTCScriptContextMenuStrip"_x000D__x000A_  $PILTCScriptContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCScriptContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCScriptContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCScriptContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCScriptContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCScriptContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCScriptContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCScriptContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCScript ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCScript ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCScriptContextMenuStripOpening ********_x000D__x000A_  $PILTCScriptContextMenuStrip.add_Opening({Start-PILTCScriptContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCScriptContextMenuStripItemClick ********_x000D__x000A_  function Start-PILTCScriptContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the PILTCScript ContextMenuStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the PILTCScript ContextMenuStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $PILOpenFileDialog.FileName = ""_x000D__x000A_        $PILOpenFileDialog.Filter = "PowerShell Scripts|*.PS1|All Files (*.*)|*.*"_x000D__x000A_        $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_        $PILOpenFileDialog.Multiselect = $False_x000D__x000A_        $PILOpenFileDialog.Title = "Load PIL Thread Script"_x000D__x000A_        $PILOpenFileDialog.Tag = $Null_x000D__x000A_        $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_        If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_        {_x000D__x000A_          $PILTCScriptTextBox.Text = Get-Content -Path $PILOpenFileDialog.FileName -Raw_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCScriptTextBox.Text = $Null_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCScriptContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $PILTCScriptContextMenuStrip -Text "Load Script" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCScriptContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCScriptContextMenuStrip -Text "Clear Script" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCScriptContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  $PILTCScriptGroupBox.ClientSize = [System.Drawing.Size]::New(($PILTCScriptGroupBox.ClientSize.Width), (([MyConfig]::Font.Height * 10) + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCScriptGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCThreads GroupBox - Bottom_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCThreadsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCThreadsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCThreadsGroupBox)_x000D__x000A_  $PILTCThreadsGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCThreadsGroupBox.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $PILTCThreadsGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCThreadsGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  #$PILTCThreadsGroupBox.Height = 100_x000D__x000A_  #$PILTCThreadsGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $PILTCThreadsGroupBox.Name = "PILTCThreadsGroupBox"_x000D__x000A_  $PILTCThreadsGroupBox.Text = "Maximun Number of Processing Threads"_x000D__x000A_  $PILTCThreadsGroupBox.Size = [System.Drawing.Size]::New($TmpWidth, $TmpWidth)_x000D__x000A_  #$PILTCThreadsGroupBox.Width = 200_x000D__x000A_  #endregion $PILTCThreadsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCThreadsGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCThreadsTrackBar = [System.Windows.Forms.TrackBar]::New()_x000D__x000A_  $PILTCThreadsTrackBar = [System.Windows.Forms.TrackBar]::New()_x000D__x000A_  $PILTCThreadsGroupBox.Controls.Add($PILTCThreadsTrackBar)_x000D__x000A_  $PILTCThreadsTrackBar.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $PILTCThreadsTrackBar.AutoSize = $False_x000D__x000A_  $PILTCThreadsTrackBar.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCThreadsTrackBar.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCThreadsTrackBar.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCThreadsTrackBar.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCThreadsTrackBar.Height = (3 * [MyConfig]::Font.Height)_x000D__x000A_  $PILTCThreadsTrackBar.LargeChange = 2_x000D__x000A_  $PILTCThreadsTrackBar.Maximum = 16_x000D__x000A_  $PILTCThreadsTrackBar.MinimumSize = [System.Drawing.Size]::New(0, $PILTCThreadsTrackBar.PreferredSize.Height)_x000D__x000A_  $PILTCThreadsTrackBar.Minimum = 1_x000D__x000A_  $PILTCThreadsTrackBar.Name = "PILTCThreadsTrackBar"_x000D__x000A_  $PILTCThreadsTrackBar.Orientation = [System.Windows.Forms.Orientation]::Horizontal_x000D__x000A_  $PILTCThreadsTrackBar.SmallChange = 1_x000D__x000A_  #$PILTCThreadsTrackBar.TabIndex = 0_x000D__x000A_  #$PILTCThreadsTrackBar.TabStop = $True_x000D__x000A_  #$PILTCThreadsTrackBar.Tag = [System.Object]::New()_x000D__x000A_  $PILTCThreadsTrackBar.TickFrequency = 1_x000D__x000A_  $PILTCThreadsTrackBar.TickStyle = [System.Windows.Forms.TickStyle]::Both_x000D__x000A_  $PILTCThreadsTrackBar.Value = [MyRuntime]::ThreadConfig.ThreadCount_x000D__x000A_  #endregion $PILTCThreadsTrackBar = [System.Windows.Forms.TrackBar]::New()_x000D__x000A_  $PILToolTip.SetToolTip($PILTCThreadsTrackBar, $PILTCThreadsTrackBar.Value)_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCThreadsTrackBarValueChanged ********_x000D__x000A_  function Start-PILTCThreadsTrackBarValueChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ValueChanged Event for the PILTCModules TrackBar Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ValueChanged Event for the PILTCModules TrackBar Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the ValueChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules ValueChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCThreadsTrackBarValueChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TrackBar]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ValueChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $PILToolTip.SetToolTip($PILTCThreadsTrackBar, $PILTCThreadsTrackBar.Value)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit ValueChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCThreadsTrackBarValueChanged ********_x000D__x000A_  $PILTCThreadsTrackBar.add_ValueChanged({Start-PILTCThreadsTrackBarValueChanged -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  $PILTCThreadsGroupBox.ClientSize = [System.Drawing.Size]::New(($PILTCThreadsGroupBox.ClientSize.Width), ($PILTCThreadsTrackBar.PreferredSize.Height + $PILTCThreadsTrackBar.Top + [MyConfig]::FormSpacer))_x000D__x000A_  _x000D__x000A_  #endregion ******** $PILTCThreadsGroupBox Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** $ThreadConfigurationPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ThreadConfigurationBtm Panel - Bottom_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ThreadConfigurationBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationForm.Controls.Add($ThreadConfigurationBtmPanel)_x000D__x000A_  #$ThreadConfigurationBtmPanel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ThreadConfigurationBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ThreadConfigurationBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ThreadConfigurationBtmPanel.Name = "ThreadConfigurationBtmPanel"_x000D__x000A_  $ThreadConfigurationBtmPanel.Text = "ThreadConfigurationBtmPanel"_x000D__x000A_  #endregion $ThreadConfigurationBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ThreadConfigurationBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ThreadConfigurationBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ThreadConfigurationBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel.Controls.Add($ThreadConfigurationBtmLeftButton)_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ThreadConfigurationBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ThreadConfigurationBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ThreadConfigurationBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Name = "ThreadConfigurationBtmLeftButton"_x000D__x000A_  #$ThreadConfigurationBtmLeftButton.TabIndex = 0_x000D__x000A_  #$ThreadConfigurationBtmLeftButton.TabStop = $True_x000D__x000A_  #$ThreadConfigurationBtmLeftButton.Tag = [System.Object]::New()_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ThreadConfigurationBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ThreadConfigurationBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationBtmLeftButtonClick ********_x000D__x000A_  function Start-ThreadConfigurationBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ([String]::IsNullOrEmpty($PILTCScriptTextBox.Text))_x000D__x000A_    {_x000D__x000A_      $Result = Get-UserResponse -Title "Missing or Invalid PIL Configuration" -Icon ([System.Drawing.SystemIcons]::Error) -Message "No Thread Script was Selected."_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [MyRuntime]::ThreadConfig.UpdateThreadInfo($PILTCThreadsTrackBar.Value, $PILTCScriptTextBox.Text)_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Modules.Clear()_x000D__x000A_      If ($PILTCModulesListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Modules.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Functions.Clear()_x000D__x000A_      If ($PILTCFunctionsListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Functions.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Variables.Clear()_x000D__x000A_      If ($PILTCVariablesListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Variables.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      $ThreadConfigurationForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationBtmLeftButtonClick ********_x000D__x000A_  $ThreadConfigurationBtmLeftButton.add_Click({ Start-ThreadConfigurationBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ThreadConfigurationBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel.Controls.Add($ThreadConfigurationBtmMidButton)_x000D__x000A_  #$ThreadConfigurationBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ThreadConfigurationBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ThreadConfigurationBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ThreadConfigurationBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ThreadConfigurationBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ThreadConfigurationBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ThreadConfigurationBtmMidButton.Location = [System.Drawing.Point]::New(($ThreadConfigurationBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ThreadConfigurationBtmMidButton.Name = "ThreadConfigurationBtmMidButton"_x000D__x000A_  #$ThreadConfigurationBtmMidButton.TabIndex = 0_x000D__x000A_  #$ThreadConfigurationBtmMidButton.TabStop = $True_x000D__x000A_  #$ThreadConfigurationBtmMidButton.Tag = [System.Object]::New()_x000D__x000A_  $ThreadConfigurationBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ThreadConfigurationBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ThreadConfigurationBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ThreadConfigurationBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationBtmMidButtonClick ********_x000D__x000A_  function Start-ThreadConfigurationBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # Add Current Modules_x000D__x000A_    $PILTCModulesListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Modules.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCModulesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Modules.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Add Current Functions_x000D__x000A_    $PILTCFunctionsListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Functions.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCFunctionsListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Functions.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Add Current Variables_x000D__x000A_    $PILTCVariablesListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Variables.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCVariablesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Variables.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Thread Config_x000D__x000A_    $PILTCScriptTextBox.Text = [MyRuntime]::ThreadConfig.ThreadScript_x000D__x000A_    $PILTCThreadsTrackBar.Value = [MyRuntime]::ThreadConfig.ThreadCount_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationBtmMidButtonClick ********_x000D__x000A_  $ThreadConfigurationBtmMidButton.add_Click({ Start-ThreadConfigurationBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region $ThreadConfigurationBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel.Controls.Add($ThreadConfigurationBtmRightButton)_x000D__x000A_  $ThreadConfigurationBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ThreadConfigurationBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ThreadConfigurationBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ThreadConfigurationBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ThreadConfigurationBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ThreadConfigurationBtmRightButton.Location = [System.Drawing.Point]::New(($ThreadConfigurationBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ThreadConfigurationBtmRightButton.Name = "ThreadConfigurationBtmRightButton"_x000D__x000A_  #$ThreadConfigurationBtmRightButton.TabIndex = 0_x000D__x000A_  #$ThreadConfigurationBtmRightButton.TabStop = $True_x000D__x000A_  #$ThreadConfigurationBtmRightButton.Tag = [System.Object]::New()_x000D__x000A_  $ThreadConfigurationBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ThreadConfigurationBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ThreadConfigurationBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ThreadConfigurationBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationBtmRightButtonClick ********_x000D__x000A_  function Start-ThreadConfigurationBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ThreadConfigurationForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationBtmRightButtonClick ********_x000D__x000A_  $ThreadConfigurationBtmRightButton.add_Click({ Start-ThreadConfigurationBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ThreadConfigurationBtmPanel.ClientSize = [System.Drawing.Size]::New(($ThreadConfigurationBtmRightButton.Right + [MyConfig]::FormSpacer), ($ThreadConfigurationBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ThreadConfigurationBtmPanel Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ThreadConfiguration Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ThreadConfiguration **** End ********_x000D__x000A_  _x000D__x000A_  # Display Config Form_x000D__x000A_  $DialogResult = $ThreadConfigurationForm.ShowDialog($PILForm)_x000D__x000A_  _x000D__x000A_  # Return Succes / Cancel Status_x000D__x000A_  [ThreadConfiguration]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult)_x000D__x000A_  _x000D__x000A_  $ThreadConfigurationForm.Dispose()_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Update-ThreadConfiguration"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Stop-MyRSJob</S>
            <Obj N="Value" RefId="55">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Stop-MyRSJob</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER Name_x000D__x000A_      Name of Job to search for_x000D__x000A_    .PARAMETER InstanceId_x000D__x000A_      InstanceId of Job to search for_x000D__x000A_    .PARAMETER RSJob_x000D__x000A_      RunspacePool Jobs to Process_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .EXAMPLE_x000D__x000A_      Stop-MyRSJob_x000D__x000A__x000D__x000A_      Stop all RSJobs in the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      Stop-MyRSJob -RSPool $RSPool_x000D__x000A__x000D__x000A_      Stop-MyRSJob -PoolName $PoolName_x000D__x000A__x000D__x000A_      Stop-MyRSJob -PoolID $PoolID_x000D__x000A__x000D__x000A_      Stop all RSJobs in the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Stop-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $TempJobs = $RSJob_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Stop all Jobs that have not Finished_x000D__x000A_    ForEach ($TempJob in $TempJobs)_x000D__x000A_    {_x000D__x000A_      if ($TempJob.State -notmatch "Stopped|Completed|Failed")_x000D__x000A_      {_x000D__x000A_        $TempJob.PowerShell.Stop()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Stop-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Stop-MyRSJob End Block"_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Stop-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Remove-EnvironmentVariable</S>
            <Obj N="Value" RefId="56">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Remove-EnvironmentVariable</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Removes an environment variable from the local or remote workstation._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function deletes a specified environment variable for a given user on one or more computers using CIM/WMI. _x000D__x000A_      It supports system-wide and user-specific variables and can authenticate to remote computers._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Specifies one or more computer names to target. Defaults to the local computer._x000D__x000A_    .PARAMETER Variable_x000D__x000A_      Specifies the name of the environment variable to remove. This parameter is mandatory._x000D__x000A_    .PARAMETER UserName_x000D__x000A_      Specifies the user context for the environment variable. Defaults to '&lt;SYSTEM&gt;' for system-wide variables._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Specifies a PSCredential object for authentication when connecting to remote computers._x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-EnvironmentVariable -Variable "TEMP"_x000D__x000A_      Removes the "TEMP" environment variable for the system on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-EnvironmentVariable -ComputerName "Server01","Server02" -Variable "Path" -UserName "DOMAIN\User"_x000D__x000A_      Removes the "Path" environment variable for the specified user on multiple remote computers._x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Variable,_x000D__x000A_    [String]$UserName = "&lt;SYSTEM&gt;",_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-EnvironmentVariable Begin Block"_x000D__x000A__x000D__x000A_    $Query = "Select * from Win32_Environment Where Name = '$Variable' and UserName = '$UserName'"_x000D__x000A__x000D__x000A_    $SessionParams = @{_x000D__x000A_      "ComputerName" = ""_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      [Void]$SessionParms.Add("Credential", $Credential)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-EnvironmentVariable Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-EnvironmentVariable Process Block"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      $SessionParams.ComputerName = $Computer_x000D__x000A_      $CimSession = New-CimSession @SessionParams_x000D__x000A_      if (-not [String]::IsNullOrEmpty(($Instance = Get-CimInstance -CimSession $CimSession -Query $Query)))_x000D__x000A_      {_x000D__x000A_        Remove-CimInstance -InputObject $Instance_x000D__x000A_      }_x000D__x000A_      $CimSession.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-EnvironmentVariable Process Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxOptionBtmRightButtonClick</S>
            <Obj N="Value" RefId="57">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxOptionBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-RadioButtonOption</S>
            <Obj N="Value" RefId="58">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-RadioButtonOption</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-RadioButtonOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-RadioButtonOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-RadioButtonOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Selected RadioButtonOption_x000D__x000A_    .PARAMETER OrderedItems_x000D__x000A_      Ordered List (HashTable) if Names and Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      With if Get-RadioButtonOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4"}_x000D__x000A_      $DialogResult = Get-RadioButtonOption -Title "RadioButton Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected "4"_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [Object]$Selected = "",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-RadioButtonOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** RadioButtonOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RadioButtonOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $RadioButtonOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RadioButtonOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $RadioButtonOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $RadioButtonOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $RadioButtonOptionForm.KeyPreview = $True_x000D__x000A_  $RadioButtonOptionForm.MaximizeBox = $False_x000D__x000A_  $RadioButtonOptionForm.MinimizeBox = $False_x000D__x000A_  $RadioButtonOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $RadioButtonOptionForm.Name = "RadioButtonOptionForm"_x000D__x000A_  $RadioButtonOptionForm.Owner = $PILForm_x000D__x000A_  $RadioButtonOptionForm.ShowInTaskbar = $False_x000D__x000A_  $RadioButtonOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $RadioButtonOptionForm.Text = $Title_x000D__x000A_  #endregion $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionFormKeyDown ********_x000D__x000A_  Function Start-RadioButtonOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the RadioButtonOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the RadioButtonOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$RadioButtonOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $RadioButtonOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$RadioButtonOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionFormKeyDown ********_x000D__x000A_  $RadioButtonOptionForm.add_KeyDown({ Start-RadioButtonOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionFormShown ********_x000D__x000A_  Function Start-RadioButtonOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the RadioButtonOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the RadioButtonOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$RadioButtonOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$RadioButtonOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionFormShown ********_x000D__x000A_  $RadioButtonOptionForm.add_Shown({ Start-RadioButtonOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for RadioButtonOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionForm.Controls.Add($RadioButtonOptionPanel)_x000D__x000A_  $RadioButtonOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RadioButtonOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $RadioButtonOptionPanel.Name = "RadioButtonOptionPanel"_x000D__x000A_  #$RadioButtonOptionPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)_x000D__x000A_  #endregion $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $RadioButtonOptionPanel Controls ********_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $RadioButtonOptionPanel.Controls.Add($RadioButtonOptionLabel)_x000D__x000A_    $RadioButtonOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $RadioButtonOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $RadioButtonOptionLabel.Name = "RadioButtonOptionLabel"_x000D__x000A_    $RadioButtonOptionLabel.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $RadioButtonOptionLabel.Text = $Message_x000D__x000A_    $RadioButtonOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($RadioButtonOptionLabel.Text, [MyConfig]::Font.Regular, $RadioButtonOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $RadioButtonOptionLabel.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $RadioButtonOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempBottom = [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $RadioButtonOptionPanel.Controls.Add($RadioButtonOptionGroupBox)_x000D__x000A_  $RadioButtonOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $RadioButtonOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RadioButtonOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $RadioButtonOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $RadioButtonOptionGroupBox.Name = "RadioButtonOptionGroupBox"_x000D__x000A_  $RadioButtonOptionGroupBox.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_  $RadioButtonOptionGroupBox.Text = $Null_x000D__x000A_  #endregion $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $RadioButtonOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $RadioButtonOptionNumber = 0_x000D__x000A_  $GroupBottom = [MyConfig]::Font.Height_x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    #region $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()_x000D__x000A_    $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()_x000D__x000A_    $RadioButtonOptionGroupBox.Controls.Add($RadioButtonOptionRadioButton)_x000D__x000A_    #$RadioButtonOptionRadioButton.AutoCheck = $True_x000D__x000A_    $RadioButtonOptionRadioButton.AutoSize = $True_x000D__x000A_    $RadioButtonOptionRadioButton.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $RadioButtonOptionRadioButton.Checked = ($OrderedItems[$Key] -eq $Selected)_x000D__x000A_    $RadioButtonOptionRadioButton.Font = [MyConfig]::Font.Regular_x000D__x000A_    $RadioButtonOptionRadioButton.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $RadioButtonOptionRadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)_x000D__x000A_    $RadioButtonOptionRadioButton.Name = "RadioChoice$($RadioButtonOptionNumber)"_x000D__x000A_    $RadioButtonOptionRadioButton.Tag = $OrderedItems[$Key]_x000D__x000A_    $RadioButtonOptionRadioButton.Text = $Key_x000D__x000A_    #endregion $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()_x000D__x000A__x000D__x000A_    $GroupBottom = ($RadioButtonOptionRadioButton.Bottom + [MyConfig]::FormSpacer)_x000D__x000A_    $RadioButtonOptionNumber += 1_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $RadioButtonOptionGroupBox.ClientSize = [System.Drawing.Size]::New($RadioButtonOptionGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $RadioButtonOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** $RadioButtonOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionForm.Controls.Add($RadioButtonOptionBtmPanel)_x000D__x000A_  $RadioButtonOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RadioButtonOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $RadioButtonOptionBtmPanel.Name = "RadioButtonOptionBtmPanel"_x000D__x000A_  #endregion $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $RadioButtonOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($RadioButtonOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmLeftButton)_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $RadioButtonOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $RadioButtonOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $RadioButtonOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Name = "RadioButtonOptionBtmLeftButton"_x000D__x000A_  $RadioButtonOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $RadioButtonOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $RadioButtonOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionBtmLeftButtonClick ********_x000D__x000A_  Function Start-RadioButtonOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If (@($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "RadioButton") -and $PSItem.Checked }).Count -eq 1)_x000D__x000A_    {_x000D__x000A_      $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($RadioButtonOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionBtmLeftButtonClick ********_x000D__x000A_  $RadioButtonOptionBtmLeftButton.add_Click({ Start-RadioButtonOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmMidButton)_x000D__x000A_  $RadioButtonOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $RadioButtonOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $RadioButtonOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $RadioButtonOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $RadioButtonOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $RadioButtonOptionBtmMidButton.Location = [System.Drawing.Point]::New(($RadioButtonOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $RadioButtonOptionBtmMidButton.Name = "RadioButtonOptionBtmMidButton"_x000D__x000A_  $RadioButtonOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $RadioButtonOptionBtmMidButton.TabStop = $True_x000D__x000A_  $RadioButtonOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $RadioButtonOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $RadioButtonOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionBtmMidButtonClick ********_x000D__x000A_  Function Start-RadioButtonOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($RadioButton In @($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))_x000D__x000A_    {_x000D__x000A_      $RadioButton.Checked = ($RadioButton.Tag -eq $Selected)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionBtmMidButtonClick ********_x000D__x000A_  $RadioButtonOptionBtmMidButton.add_Click({ Start-RadioButtonOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmRightButton)_x000D__x000A_  $RadioButtonOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $RadioButtonOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $RadioButtonOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $RadioButtonOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $RadioButtonOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $RadioButtonOptionBtmRightButton.Location = [System.Drawing.Point]::New(($RadioButtonOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $RadioButtonOptionBtmRightButton.Name = "RadioButtonOptionBtmRightButton"_x000D__x000A_  $RadioButtonOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $RadioButtonOptionBtmRightButton.TabStop = $True_x000D__x000A_  $RadioButtonOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $RadioButtonOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $RadioButtonOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionBtmRightButtonClick ********_x000D__x000A_  Function Start-RadioButtonOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionBtmRightButtonClick ********_x000D__x000A_  $RadioButtonOptionBtmRightButton.add_Click({ Start-RadioButtonOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $RadioButtonOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($RadioButtonOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($RadioButtonOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $RadioButtonOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $RadioButtonOptionForm.ClientSize = [System.Drawing.Size]::New($RadioButtonOptionForm.ClientSize.Width, ($RadioButtonOptionGroupBox.Bottom + [MyConfig]::FormSpacer + $RadioButtonOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for RadioButtonOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** RadioButtonOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $RadioButtonOptionForm.ShowDialog($PILForm)_x000D__x000A_  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    $TempItem = @{}_x000D__x000A_    $RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" -and $PSItem.Checked } | ForEach-Object -Process { $TempItem.Add($PSItem.Text, $PSItem.Tag) }_x000D__x000A_    [RadioButtonOption]::New($True, $DialogResult, $TempItem)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [RadioButtonOption]::New($False, $DialogResult)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $RadioButtonOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-RadioButtonOption"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MyRSPool</S>
            <Obj N="Value" RefId="59">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MyRSPool</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates or Updates a RunspacePool_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RunspacePool_x000D__x000A_    .PARAMETER Functions_x000D__x000A_      Functions to include in the initial Session State_x000D__x000A_    .PARAMETER Variables_x000D__x000A_      Variables to include in the initial Session State_x000D__x000A_    .PARAMETER Modules_x000D__x000A_      Modules to load in the initial Session State_x000D__x000A_    .PARAMETER PSSnapins_x000D__x000A_      PSSnapins to load in the initial Session State_x000D__x000A_    .PARAMETER Hashtable_x000D__x000A_      Synced Hasttable to pass values between threads_x000D__x000A_    .PARAMETER Mutex_x000D__x000A_      Protects access to a shared resource_x000D__x000A_    .PARAMETER MaxJobs_x000D__x000A_      Maximum Number of Jobs_x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      Return the New RSPool to the Pipeline_x000D__x000A_    .EXAMPLE_x000D__x000A_      Start-MyRSPool_x000D__x000A__x000D__x000A_      Create the Default RunspacePool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSPool = Start-MyRSPool -PoolName $PoolName -MaxJobs $MaxJobs -PassThru_x000D__x000A__x000D__x000A_      Create a New RunspacePool and Return the RSPool to the Pipeline_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [Hashtable]$Functions,_x000D__x000A_    [Hashtable]$Variables,_x000D__x000A_    [String[]]$Modules,_x000D__x000A_    [String[]]$PSSnapins,_x000D__x000A_    [Hashtable]$Hashtable = @{ "Enabled" = $True },_x000D__x000A_    [String]$Mutex,_x000D__x000A_    [ValidateRange(1, 64)]_x000D__x000A_    [Int]$MaxJobs = 8,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Start-MyRSPool"_x000D__x000A__x000D__x000A_  # check if Runspace Pool already exists_x000D__x000A_  if ($Script:MyHiddenRSPool.ContainsKey($PoolName))_x000D__x000A_  {_x000D__x000A_    # Return Existing Runspace Pool_x000D__x000A_    [MyRSPool]($Script:MyHiddenRSPool[$PoolName])_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    # Create Default Session State_x000D__x000A_    $InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()_x000D__x000A__x000D__x000A_    # Import Modules_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Modules"))_x000D__x000A_    {_x000D__x000A_      [Void]$InitialSessionState.ImportPSModule($Modules)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Import PSSnapins_x000D__x000A_    if ($PSBoundParameters.ContainsKey("PSSnapins"))_x000D__x000A_    {_x000D__x000A_      [Void]$InitialSessionState.ImportPSSnapIn($PSSnapins, [Ref]$Null)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Add Common Functions_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Functions"))_x000D__x000A_    {_x000D__x000A_      ForEach ($Key in $Functions.Keys)_x000D__x000A_      {_x000D__x000A_        $InitialSessionState.Commands.Add(([System.Management.Automation.Runspaces.SessionStateFunctionEntry]::New($Key, $Functions[$Key])))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Add Default Variables_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Variables"))_x000D__x000A_    {_x000D__x000A_      ForEach ($Key in $Variables.Keys)_x000D__x000A_      {_x000D__x000A_        $InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New($Key, $Variables[$Key], "$Key = $($Variables[$Key])", ([System.Management.Automation.ScopedItemOptions]::AllScope))))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Create and Open RunSpacePool_x000D__x000A_    $SyncedHash = [Hashtable]::Synchronized($Hashtable)_x000D__x000A_    $InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New("SyncedHash", $SyncedHash, "SyncedHash = Synced Hashtable", ([System.Management.Automation.ScopedItemOptions]::AllScope))))_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Mutex"))_x000D__x000A_    {_x000D__x000A_      $InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New("Mutex", $Mutex, "Mutex = $Mutex", ([System.Management.Automation.ScopedItemOptions]::AllScope))))_x000D__x000A_      $CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $MaxJobs, $InitialSessionState, $Host)_x000D__x000A_      $RSPool = [MyRSPool]::New($PoolName, $CreateRunspacePool, $SyncedHash, $Mutex)_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $MaxJobs, $InitialSessionState, $Host)_x000D__x000A_      $RSPool = [MyRSPool]::New($PoolName, $CreateRunspacePool, $SyncedHash)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $RSPool.RunspacePool.ApartmentState = "STA"_x000D__x000A_    #$RSPool.RunspacePool.ApartmentState = "MTA"_x000D__x000A_    $RSPool.RunspacePool.CleanupInterval = [TimeSpan]::FromMinutes(2)_x000D__x000A_    $RSPool.RunspacePool.Open()_x000D__x000A__x000D__x000A_    $Script:MyHiddenRSPool.Add($PoolName, $RSPool)_x000D__x000A__x000D__x000A_    if ($PassThru.IsPresent)_x000D__x000A_    {_x000D__x000A_      $RSPool_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Start-MyRSPool"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationBtmLeftButtonClick</S>
            <Obj N="Value" RefId="60">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ([String]::IsNullOrEmpty($PILTCScriptTextBox.Text))_x000D__x000A_    {_x000D__x000A_      $Result = Get-UserResponse -Title "Missing or Invalid PIL Configuration" -Icon ([System.Drawing.SystemIcons]::Error) -Message "No Thread Script was Selected."_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [MyRuntime]::ThreadConfig.UpdateThreadInfo($PILTCThreadsTrackBar.Value, $PILTCScriptTextBox.Text)_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Modules.Clear()_x000D__x000A_      If ($PILTCModulesListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Modules.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Functions.Clear()_x000D__x000A_      If ($PILTCFunctionsListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Functions.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Variables.Clear()_x000D__x000A_      If ($PILTCVariablesListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Variables.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      $ThreadConfigurationForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-ComboBoxFilter</S>
            <Obj N="Value" RefId="61">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-ComboBoxFilter</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ComboBoxFilter_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ComboBoxFilter_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ComboBoxFilter Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ComboBox_x000D__x000A_    .PARAMETER Properties_x000D__x000A_      Name of the Properties to Filter On_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected ComboBox Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ComboBoxFilter Dialog Window_x000D__x000A_    .PARAMETER NoFilter_x000D__x000A_      Do Not Filter ComBox Items from other Selected ComboBox Items_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)_x000D__x000A_      $DialogResult = Get-ComboBoxFilter -Title "Combo Filter Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $ServiceList -Properties Status, Name, StartType_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [String[]]$Properties,_x000D__x000A_    [HashTable]$Selected = @{},_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [Switch]$NoFilter,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ComboBoxFilter"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ComboBoxFilter **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilter Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxFilterForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxFilterForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxFilterForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ComboBoxFilterForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ComboBoxFilterForm.Icon = $PILForm.Icon_x000D__x000A_  $ComboBoxFilterForm.KeyPreview = $True_x000D__x000A_  $ComboBoxFilterForm.MaximizeBox = $False_x000D__x000A_  $ComboBoxFilterForm.MinimizeBox = $False_x000D__x000A_  $ComboBoxFilterForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $ComboBoxFilterForm.Name = "ComboBoxFilterForm"_x000D__x000A_  $ComboBoxFilterForm.Owner = $PILForm_x000D__x000A_  $ComboBoxFilterForm.ShowInTaskbar = $False_x000D__x000A_  $ComboBoxFilterForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ComboBoxFilterForm.Text = $Title_x000D__x000A_  #endregion $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterFormKeyDown ********_x000D__x000A_  Function Start-ComboBoxFilterFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ComboBoxFilter Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ComboBoxFilter Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxFilterForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxFilterForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterFormKeyDown ********_x000D__x000A_  $ComboBoxFilterForm.add_KeyDown({ Start-ComboBoxFilterFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterFormShown ********_x000D__x000A_  Function Start-ComboBoxFilterFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ComboBoxFilter Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ComboBoxFilter Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ComboBoxFilterForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ComboBoxFilterForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterFormShown ********_x000D__x000A_  $ComboBoxFilterForm.add_Shown({ Start-ComboBoxFilterFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ComboBoxFilter Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilter Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterForm.Controls.Add($ComboBoxFilterPanel)_x000D__x000A_  $ComboBoxFilterPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxFilterPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ComboBoxFilterPanel.Name = "ComboBoxFilterPanel"_x000D__x000A_  #endregion $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxFilterPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ComboBoxFilterPanel.Controls.Add($ComboBoxFilterLabel)_x000D__x000A_  $ComboBoxFilterLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_  $ComboBoxFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_  $ComboBoxFilterLabel.Name = "ComboBoxFilterLabel"_x000D__x000A_  $ComboBoxFilterLabel.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_  $ComboBoxFilterLabel.Text = $Message_x000D__x000A_  $ComboBoxFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_  #endregion $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  # Returns the minimum size required to display the text_x000D__x000A_  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ComboBoxFilterLabel.Text, [MyConfig]::Font.Regular, $ComboBoxFilterLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_  $ComboBoxFilterLabel.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Properties"))_x000D__x000A_  {_x000D__x000A_    $FilterOptionNames = $Properties_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $FilterOptionNames = ($Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilter GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ComboBoxFilterPanel.Controls.Add($ComboBoxFilterGroupBox)_x000D__x000A_  $ComboBoxFilterGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxFilterGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxFilterGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $ComboBoxFilterGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ComboBoxFilterLabel.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  $ComboBoxFilterGroupBox.Name = "ComboBoxFilterGroupBox"_x000D__x000A_  $ComboBoxFilterGroupBox.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)_x000D__x000A_  #endregion $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxFilterGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********_x000D__x000A_  Function Start-GetComboFilterComboBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ComboBox Control that fired the SelectedIndexChanged Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ComboBox SelectedIndexChanged Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ComboBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ValidItems = @($Items)_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidItems = @($ValidItems | Where-Object -FilterScript { $PSItem.($FilterOptionName) -like $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidItemNames = @($ValidItems | Select-Object -ExpandProperty $FilterOptionName -Unique)_x000D__x000A_      If ($FilterOptionName -ne $Sender.Name)_x000D__x000A_      {_x000D__x000A_        $RemoveList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { ($PSItem.Text -notin $ValidItemNames) -and ($PSItem.Value -ne "*") })_x000D__x000A_        ForEach ($RemoveItem In $RemoveList)_x000D__x000A_        {_x000D__x000A_          $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.Remove($RemoveItem)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $HaveItemNames = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)_x000D__x000A_      $AddList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.Items | Where-Object -FilterScript { ($PSItem.Text -in $ValidItemNames) -and ($PSItem.Text -notin $HaveItemNames) })_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.AddRange($AddList)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********_x000D__x000A__x000D__x000A_  $GroupBottom = [MyConfig]::Font.Height_x000D__x000A_  ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_  {_x000D__x000A_    #region $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_    $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_    $ComboBoxFilterGroupBox.Controls.Add($TmpFilterComboBox)_x000D__x000A_    $TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_    $TmpFilterComboBox.AutoSize = $True_x000D__x000A_    $TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_    $TmpFilterComboBox.DisplayMember = "Text"_x000D__x000A_    $TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList_x000D__x000A_    $TmpFilterComboBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    [void]$TmpFilterComboBox.Items.Add([PSCustomObject]@{ "Text" = " - Return All $($FilterOptionName) Values - "; "Value" = "*" })_x000D__x000A_    $TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $GroupBottom)_x000D__x000A_    $TmpFilterComboBox.Name = $FilterOptionName_x000D__x000A_    $TmpFilterComboBox.SelectedIndex = 0_x000D__x000A_    $TmpFilterComboBox.Size = [System.Drawing.Size]::New(($ComboBoxFilterGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TmpFilterComboBox.PreferredHeight)_x000D__x000A_    $TmpFilterComboBox.Sorted = $True_x000D__x000A_    $TmpFilterComboBox.TabIndex = 0_x000D__x000A_    $TmpFilterComboBox.TabStop = $True_x000D__x000A_    $TmpFilterComboBox.Tag = $Null_x000D__x000A_    $TmpFilterComboBox.ValueMember = "Value"_x000D__x000A_    #endregion $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A__x000D__x000A_    $TmpFilterComboBox.SelectedIndex = 0_x000D__x000A_    $TmpFilterComboBox.Items.AddRange(@($Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty($PSITem.($FilterOptionName)) } | Sort-Object -Property $FilterOptionName -Unique | ForEach-Object -Process { [ComboBoxFilterItem]::New($PSITem.($FilterOptionName), $PSITem.($FilterOptionName)) }))_x000D__x000A_    $TmpFilterComboBox.Tag = @{ "Items" = @($TmpFilterComboBox.Items); "SelectedItem" = $Null }_x000D__x000A__x000D__x000A_    if (-not $NoFilter.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TmpFilterComboBox.add_SelectedIndexChanged({ Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $This -EventArg $PSItem })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $GroupBottom = ($TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ComboBoxFilterGroupBox.ClientSize = [System.Drawing.Size]::New($ComboBoxFilterGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxFilterGroupBox Controls ********_x000D__x000A__x000D__x000A_  ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_  {_x000D__x000A_    # $Sender_x000D__x000A_    If ($Selected.ContainsKey($FilterOptionName))_x000D__x000A_    {_x000D__x000A_      $TmpItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { $PSItem.Value -eq $Selected.($FilterOptionName) }_x000D__x000A_      If (-not [String]::IsNullOrEmpty($TmpItem.Text))_x000D__x000A_      {_x000D__x000A_        $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $TmpItem_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($ComboBoxFilterGroupBox.Right + [MyConfig]::FormSpacer), ($ComboBoxFilterGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxFilterPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilterBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterForm.Controls.Add($ComboBoxFilterBtmPanel)_x000D__x000A_  $ComboBoxFilterBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxFilterBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ComboBoxFilterBtmPanel.Name = "ComboBoxFilterBtmPanel"_x000D__x000A_  #endregion $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxFilterBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ComboBoxFilterBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmLeftButton)_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ComboBoxFilterBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxFilterBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxFilterBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Name = "ComboBoxFilterBtmLeftButton"_x000D__x000A_  $ComboBoxFilterBtmLeftButton.TabIndex = 1_x000D__x000A_  $ComboBoxFilterBtmLeftButton.TabStop = $True_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxFilterBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterBtmLeftButtonClick ********_x000D__x000A_  Function Start-ComboBoxFilterBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ComboBoxFilterBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ValidateClick = 0_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidateClick = $ValidateClick + $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex_x000D__x000A_    }_x000D__x000A_    If ($ValidateClick -eq 0)_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxFilterForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterBtmLeftButtonClick ********_x000D__x000A_  $ComboBoxFilterBtmLeftButton.add_Click({ Start-ComboBoxFilterBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmMidButton)_x000D__x000A_  $ComboBoxFilterBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ComboBoxFilterBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ComboBoxFilterBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxFilterBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxFilterBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxFilterBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxFilterBtmMidButton.Location = [System.Drawing.Point]::New(($ComboBoxFilterBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxFilterBtmMidButton.Name = "ComboBoxFilterBtmMidButton"_x000D__x000A_  $ComboBoxFilterBtmMidButton.TabIndex = 2_x000D__x000A_  $ComboBoxFilterBtmMidButton.TabStop = $True_x000D__x000A_  $ComboBoxFilterBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ComboBoxFilterBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ComboBoxFilterBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterBtmMidButtonClick ********_x000D__x000A_  Function Start-ComboBoxFilterBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex = 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterBtmMidButtonClick ********_x000D__x000A_  $ComboBoxFilterBtmMidButton.add_Click({ Start-ComboBoxFilterBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmRightButton)_x000D__x000A_  $ComboBoxFilterBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ComboBoxFilterBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxFilterBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxFilterBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxFilterBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxFilterBtmRightButton.Location = [System.Drawing.Point]::New(($ComboBoxFilterBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxFilterBtmRightButton.Name = "ComboBoxFilterBtmRightButton"_x000D__x000A_  $ComboBoxFilterBtmRightButton.TabIndex = 3_x000D__x000A_  $ComboBoxFilterBtmRightButton.TabStop = $True_x000D__x000A_  $ComboBoxFilterBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ComboBoxFilterBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxFilterBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterBtmRightButtonClick ********_x000D__x000A_  Function Start-ComboBoxFilterBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterBtmRightButtonClick ********_x000D__x000A_  $ComboBoxFilterBtmRightButton.add_Click({ Start-ComboBoxFilterBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ComboBoxFilterBtmPanel.ClientSize = [System.Drawing.Size]::New(($ComboBoxFilterBtmRightButton.Right + [MyConfig]::FormSpacer), ($ComboBoxFilterBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxFilterBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ComboBoxFilterForm.ClientSize = [System.Drawing.Size]::New($ComboBoxFilterForm.ClientSize.Width, ($TempClientSize.Height + $ComboBoxFilterBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ComboBoxFilter Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ComboBoxFilter **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ComboBoxFilterForm.ShowDialog()_x000D__x000A_  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    $TmpHash = [HashTable]::New()_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      [Void]$TmpHash.Add($FilterOptionName, $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value)_x000D__x000A_    }_x000D__x000A_    [ComboBoxFilter]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpHash)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [ComboBoxFilter]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @{ })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ComboBoxFilterForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ComboBoxFilter"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionListViewDrawColumnHeader</S>
            <Obj N="Value" RefId="62">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionListViewDrawColumnHeader</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawColumnHeader Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawColumnHeader Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawColumnHeader Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawColumnHeader Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawColumnHeader Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)_x000D__x000A_    $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))_x000D__x000A_    $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawColumnHeader Event for `$ListViewOptionListView"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionContextMenuStripItemClick</S>
            <Obj N="Value" RefId="63">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "SelectAll"_x000D__x000A_      {_x000D__x000A_        @($ListBoxOptionListBox.Items) | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnSelectAll"_x000D__x000A_      {_x000D__x000A_        $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionContextMenuStripItem"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionTextBoxKeyDown</S>
            <Obj N="Value" RefId="64">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionTextBoxKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          KeyDown Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          KeyDown Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the KeyDown Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox KeyDown Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)_x000D__x000A_      {_x000D__x000A_        # Suppress KeyPress_x000D__x000A_        $EventArg.SuppressKeyPress = $True_x000D__x000A__x000D__x000A_        If ([String]::IsNullOrEmpty($Sender.Text.Trim()))_x000D__x000A_        {_x000D__x000A_          $ListViewOptionListView.Items.Clear()_x000D__x000A_          $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $Sender.Text) -or ($PSItem.SubItems[1].Text -Match $Sender.Text) })_x000D__x000A_          $ListViewOptionListView.Items.Clear()_x000D__x000A_          $ListViewOptionListView.Items.AddRange($TmpNewList)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionTextBox"_x000D__x000A_    }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxOptionFormKeyDown</S>
            <Obj N="Value" RefId="65">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxOptionFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ComboBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ComboBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ComboBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationFormMove</S>
            <Obj N="Value" RefId="66">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationFormMove</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Move Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Move Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Move Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Move Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Move Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Move Event for `$ThreadConfigurationForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-ListViewGroup</S>
            <Obj N="Value" RefId="67">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-ListViewGroup</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new ListViewGroup to a ListView control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ListViewGroup with the specified properties and adds it to the provided ListView control._x000D__x000A_      It supports customization of the group header, name, tag, and alignment. The new ListViewGroup can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER ListView_x000D__x000A_      The ListView control to which the new ListViewGroup will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Header_x000D__x000A_      The display header text for the new ListViewGroup. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new ListViewGroup. If not specified, the Header value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new ListViewGroup._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      The alignment of the group header text. Defaults to 'Left'._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created ListViewGroup object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-ListViewGroup -ListView $listView -Header "Header" -Tag "Tag"_x000D__x000A_      Adds a new ListViewGroup with header "Header" and tag "Tag" to $listView._x000D__x000A_    .EXAMPLE_x000D__x000A_      $group = New-ListViewGroup -ListView $listView -Header "Group1" -Name "GroupOne" -Alignment Center -PassThru_x000D__x000A_      Adds a new ListViewGroup with header "Group1", name "GroupOne", centered alignment, and returns the created group object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$ListView,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Header,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [System.Windows.Forms.HorizontalAlignment]$Alignment = "Left",_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempListViewGroup = [System.Windows.Forms.ListViewGroup]_x000D__x000A_  $TempListViewGroup = [System.Windows.Forms.ListViewGroup]::New()_x000D__x000A_  [Void]$ListView.Groups.Add($TempListViewGroup)_x000D__x000A_  $TempListViewGroup.Tag = $Tag_x000D__x000A_  $TempListViewGroup.Header = $Header_x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempListViewGroup.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempListViewGroup.Name = $Header_x000D__x000A_  }_x000D__x000A_  $TempListViewGroup.HeaderAlignment = $Alignment_x000D__x000A_  #endregion $TempListViewGroup = [System.Windows.Forms.ListViewGroup]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempListViewGroup_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempListViewGroup = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationBtmMidButtonClick</S>
            <Obj N="Value" RefId="68">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # Add Current Modules_x000D__x000A_    $PILTCModulesListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Modules.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCModulesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Modules.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Add Current Functions_x000D__x000A_    $PILTCFunctionsListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Functions.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCFunctionsListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Functions.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Add Current Variables_x000D__x000A_    $PILTCVariablesListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Variables.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCVariablesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Variables.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Thread Config_x000D__x000A_    $PILTCScriptTextBox.Text = [MyRuntime]::ThreadConfig.ThreadScript_x000D__x000A_    $PILTCThreadsTrackBar.Value = [MyRuntime]::ThreadConfig.ThreadCount_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Send-MyTextMessage</S>
            <Obj N="Value" RefId="69">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Send-MyTextMessage</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Sends a text message to a remote or local computer or IP address using UDP._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function sends a text message to a specified computer name or IP address using UDP protocol. _x000D__x000A_      You can specify the target by computer name or IP address, set the message content, and choose the port. _x000D__x000A_      The function is useful for simple network notifications or inter-process communication._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer to send the message to. Defaults to the local computer. Used only if IPAddress is not specified._x000D__x000A_    .PARAMETER IPAddress_x000D__x000A_      The IP address to send the message to. Defaults to "127.0.0.1". Use "255.255.255.255" for broadcast._x000D__x000A_    .PARAMETER Message_x000D__x000A_      The text message to send. Defaults to "This is My Message"._x000D__x000A_    .PARAMETER Port_x000D__x000A_      The UDP port to use for sending the message. Defaults to 2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Send-MyTextMessage -Message "Hello World" -IPAddress "192.168.1.100" -Port 2500_x000D__x000A_      Sends "Hello World" to IP address 192.168.1.100 on port 2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Send-MyTextMessage -ComputerName "RemotePC" -Message "Test Notification"_x000D__x000A_      Sends "Test Notification" to the computer named RemotePC._x000D__x000A_    .NOTES_x000D__x000A_      Original function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "IPAddress")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ComputerName")]_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "IPAddress")]_x000D__x000A_    [System.Net.IPAddress]$IPAddress = "127.0.0.1",_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [String]$Message = "This is My Message",_x000D__x000A_    [int]$Port = 2500_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter function Send-MyTextMessage"_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "IPAddress")_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New($IPAddress, $Port)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName($ComputerName)).AddressList[0]), $Port)_x000D__x000A_  }_x000D__x000A_  $MessageBytes = [Text.Encoding]::ASCII.GetBytes("$($Message)")_x000D__x000A_  $UDPClient = [System.Net.Sockets.UdpClient]::New()_x000D__x000A_  $UDPClient.Send($MessageBytes, $MessageBytes.Length, $RemoteClient)_x000D__x000A_  $UDPClient.Close()_x000D__x000A_  $UDPClient.Dispose()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit function Send-MyTextMessage"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionFormShown</S>
            <Obj N="Value" RefId="70">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ListBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputTextBoxKeyPress</S>
            <Obj N="Value" RefId="71">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputTextBoxKeyPress</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyPress Event for the TextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyPress Event for the TextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TextBox Control that fired the KeyPress Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TextBox KeyPress Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-TextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyPress Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X_x000D__x000A_    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyPress Event for `$TextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ScriptInfoLeftToolStripItemClick</S>
            <Obj N="Value" RefId="72">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ScriptInfoLeftToolStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the ScriptInfoLeft ToolStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the ScriptInfoLeft ToolStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ToolStripItem Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ToolStripItem Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ScriptInfoLeftToolStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ScriptInfoLeftToolStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ScriptInfoBtmStatusStrip.Items["Status"].Text = "Showing: $($Sender.Text)"_x000D__x000A__x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Exit"_x000D__x000A_      {_x000D__x000A_        $ScriptInfoForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      Default_x000D__x000A_      {_x000D__x000A_        $ScriptInfoRichTextBox.Clear()_x000D__x000A_        $ScriptInfoRichTextBox.Beg_x000D__x000A_        Switch ($Sender.Tag.Type)_x000D__x000A_        {_x000D__x000A_          "None"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = $Sender.Tag.Data_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_          "Base64"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = Encode-MyData -Data ($Sender.Tag.Data) -AsString -Decode_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_          "Compress"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = Compress-MyData -Data ($Sender.Tag.Data) -Decompress -AsString_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        $ScriptInfoRichTextBox.SelectAll()_x000D__x000A_        $ScriptInfoRichTextBox.SelectionIndent = 10_x000D__x000A_        $ScriptInfoRichTextBox.SelectionLength = 0_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ScriptInfoLeftToolStripItem"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ScriptInfoFormMove</S>
            <Obj N="Value" RefId="73">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ScriptInfoFormMove</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Move Event for the ScriptInfo Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Move Event for the ScriptInfo Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Move Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Move Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ScriptInfoFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Move Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Move Event for `$ScriptInfoForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Remove-MyISScriptData</S>
            <Obj N="Value" RefId="74">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Remove-MyISScriptData</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Removes Script Data from the Registry_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Removes Script Data from the Registry_x000D__x000A_    .PARAMETER Script_x000D__x000A_     Name of the Regsitry Key to remove. Defaults to the name of the script._x000D__x000A_    .PARAMETER User_x000D__x000A_      Remove from the HKCU Registry Hive_x000D__x000A_    .PARAMETER Computer_x000D__x000A_      Remove from the HKLM Registry Hive_x000D__x000A_    .PARAMETER Bitness_x000D__x000A_      Specify 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData_x000D__x000A__x000D__x000A_      Removes the default script registry key from the HKCU Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData -User -Script "ScriptName"_x000D__x000A__x000D__x000A_      Removes the Specified Script Name registry key from the HKCU Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData -Computer_x000D__x000A__x000D__x000A_      Removes the default script registry key from the 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData -Computer -Script "ScriptName" -Bitness "32"_x000D__x000A__x000D__x000A_      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "User")]_x000D__x000A_  param (_x000D__x000A_    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "User")]_x000D__x000A_    [Switch]$User,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [Switch]$Computer,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Comp")]_x000D__x000A_    [ValidateSet("32", "64", "All")]_x000D__x000A_    [String]$Bitness = "All"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Remove-MyISScriptData"_x000D__x000A__x000D__x000A_  # Get Default Registry Paths_x000D__x000A_  $RegPaths = [System.Collections.ArrayList]::New()_x000D__x000A_  if ($Computer.IsPresent)_x000D__x000A_  {_x000D__x000A_    if ($Bitness -match "All|32")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node")_x000D__x000A_    }_x000D__x000A_    if ($Bitness -match "All|64")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software")_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$RegPaths.Add("Registry::HKEY_CURRENT_USER\Software")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Remove the values from the registry._x000D__x000A_  foreach ($RegPath in $RegPaths)_x000D__x000A_  {_x000D__x000A_    [Void](Remove-Item -Path "$RegPath\MyISScriptData\$Script")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Remove-MyISScriptData"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-AlertMessageFormShown</S>
            <Obj N="Value" RefId="75">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-AlertMessageFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $AlertMessage Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $AlertMessage Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-AlertMessageFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$AlertMessageForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$AlertMessageForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-TabPage</S>
            <Obj N="Value" RefId="76">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-TabPage</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new TabPage to a TabControl control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.TabPage with the specified properties and adds it to the provided TabControl control._x000D__x000A_      It supports customization of text, name, tag, tooltip, font, colors, image (by index or key), and enabled/disabled state._x000D__x000A_      The new TabPage can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER TabControl_x000D__x000A_      The TabControl control to which the new TabPage will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the TabPage. Defaults to [MyConfig]::Colors.TextBack._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the TabPage. Defaults to [MyConfig]::Colors.TextFore._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the TabPage text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new TabPage. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new TabPage. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new TabPage._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the TabPage. Used when specifying images by index._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the TabPage. Used when specifying images by key._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the TabPage._x000D__x000A_    .PARAMETER Disabled_x000D__x000A_      If specified, disables the TabPage (sets Enabled to $false)._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created TabPage object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $TabPage = New-TabPage -TabControl $tabControl -Text "General" -Tag "GeneralSettings" -PassThru_x000D__x000A_      Adds a new TabPage with text "General" and tag "GeneralSettings" to $tabControl and returns the created TabPage object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.TabControl]$TabControl,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]_x000D__x000A_    [Int]$ImageIndex,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [Switch]$Disabled,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempTabPage = [System.Windows.Forms.TabPage]_x000D__x000A_  $TempTabPage = [System.Windows.Forms.TabPage]::New($Text)_x000D__x000A_  $TabControl.Controls.Add($TempTabPage)_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempTabPage.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempTabPage.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempTabPage.Tag = $Tag_x000D__x000A_  $TempTabPage.ToolTipText = $ToolTip_x000D__x000A_  $TempTabPage.Enabled = (-not $Disabled.IsPresent)_x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "ImageIndex"_x000D__x000A_    {_x000D__x000A_      $TempTabPage.ImageIndex = $ImageIndex_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "ImageKey"_x000D__x000A_    {_x000D__x000A_      $TempTabPage.ImageKey = $ImageKey_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $TempTabPage.BackColor = $BackColor_x000D__x000A_  $TempTabPage.ForeColor = $ForeColor_x000D__x000A_  $TempTabPage.Font = $Font_x000D__x000A_  #endregion $TempTabPage = [System.Windows.Forms.TabPage]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTabPage_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempTabPage = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxFilterBtmMidButtonClick</S>
            <Obj N="Value" RefId="77">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxFilterBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex = 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Encrypt-MyTextString</S>
            <Obj N="Value" RefId="78">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Encrypt-MyTextString</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encrypts or decrypts a text string using Windows Data Protection API (DPAPI)._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encrypts a plain text string or decrypts an encrypted Base64 string using the Windows Data Protection API (DPAPI). _x000D__x000A_      You can specify the protection scope (CurrentUser or LocalMachine) and optionally provide an additional encryption key (entropy) for extra security._x000D__x000A_      When encrypting, the function returns a Base64-encoded string. When decrypting, it returns the original plain text._x000D__x000A_    .PARAMETER TextString_x000D__x000A_      The text string to encrypt or decrypt. When encrypting, this is the plain text to secure. When decrypting, this is the Base64-encoded string to restore._x000D__x000A_    .PARAMETER ProtectionScope_x000D__x000A_      Specifies the scope of protection. _x000D__x000A_      'CurrentUser' restricts decryption to the current user (default)._x000D__x000A_      'LocalMachine' allows any user on the machine to decrypt._x000D__x000A_    .PARAMETER EncryptKey_x000D__x000A_      An optional string used as additional entropy (extra encryption key) for added security. If not specified, no extra entropy is used._x000D__x000A_    .PARAMETER Decrypt_x000D__x000A_      Switch to indicate that the function should decrypt the input string instead of encrypting._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encrypt-MyTextString -TextString "MyPassword"_x000D__x000A_      Encrypts the string "MyPassword" for the current user._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encrypt-MyTextString -TextString $EncryptedString -Decrypt_x000D__x000A_      Decrypts the previously encrypted string for the current user._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encrypt-MyTextString -TextString "MyPassword" -ProtectionScope LocalMachine -EncryptKey "ExtraSecret"_x000D__x000A_      Encrypts the string "MyPassword" for any user on the machine, using "ExtraSecret" as additional entropy._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$TextString,_x000D__x000A_    [ValidateSet("LocalMachine", "CurrentUser")]_x000D__x000A_    [String]$ProtectionScope = "CurrentUser",_x000D__x000A_    [String]$EncryptKey = $Null,_x000D__x000A_    [Switch]$Decrypt_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Security.Cryptography.ProtectedData")).Type))_x000D__x000A_  {_x000D__x000A_    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Security")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("EncryptKey"))_x000D__x000A_  {_x000D__x000A_    $OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes($EncryptKey)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $OptionalEntropy = $Null_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($Decrypt.IsPresent)_x000D__x000A_  {_x000D__x000A_    $EncryptedData = [System.Convert]::FromBase64String($TextString)_x000D__x000A_    $DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect($EncryptedData, $OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]$ProtectionScope))_x000D__x000A_    [System.Text.Encoding]::ASCII.GetString($DecryptedData)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempData = [System.Text.Encoding]::ASCII.GetBytes($TextString)_x000D__x000A_    $EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect($TempData, $OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]$ProtectionScope))_x000D__x000A_    [System.Convert]::ToBase64String($EncryptedData)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionListBoxMouseDown</S>
            <Obj N="Value" RefId="79">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionListBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$ListBoxOptionListBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($ListBoxOptionListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $ListBoxOptionContextMenuStrip.Show($ListBoxOptionListBox, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$ListBoxOptionListBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Write-MyLogFile</S>
            <Obj N="Value" RefId="80">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Write-MyLogFile</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Writes a log entry to a specified log file with customizable severity, formatting, and output options._x000D__x000A_    .DESCRIPTION_x000D__x000A_      The Write-MyLogFile function writes log messages to a file, with support for log rotation, severity levels, colored host output, and customizable log folder and file names. _x000D__x000A_      It is designed for flexible logging in scripts and automation tasks._x000D__x000A_    .PARAMETER LogFolder_x000D__x000A_      Specifies the folder where the log file will be stored. Defaults to the script name if not specified._x000D__x000A_    .PARAMETER LogName_x000D__x000A_      Specifies the name of the log file. Defaults to the script name with a .log extension._x000D__x000A_    .PARAMETER SystemLog_x000D__x000A_      Switch to use the Windows system log folder for storing the log file._x000D__x000A_    .PARAMETER Severity_x000D__x000A_      Specifies the severity of the log entry. Valid values are Text, Info, Good, Warning, and Error. Default is Text._x000D__x000A_    .PARAMETER Message_x000D__x000A_      The message to log. This parameter is mandatory._x000D__x000A_    .PARAMETER Component_x000D__x000A_      Specifies the component or source of the log entry. Defaults to the script name._x000D__x000A_    .PARAMETER Context_x000D__x000A_      Additional context information for the log entry._x000D__x000A_    .PARAMETER Thread_x000D__x000A_      The thread or process ID associated with the log entry. Defaults to the current process ID._x000D__x000A_    .PARAMETER MaxSize_x000D__x000A_      The maximum size (in bytes) of the log file before it is rotated. Default is 52428800 (50 MB)._x000D__x000A_    .PARAMETER OutHost_x000D__x000A_      Switch to also write the log message to the host (console) with color._x000D__x000A_    .PARAMETER ColorText_x000D__x000A_      The color used for Text severity messages in the host output. Default is Gray._x000D__x000A_    .PARAMETER ColorInfo_x000D__x000A_      The color used for Info severity messages in the host output. Default is DarkCyan._x000D__x000A_    .PARAMETER ColorGood_x000D__x000A_      The color used for Good severity messages in the host output. Default is DarkGreen._x000D__x000A_    .PARAMETER ColorWarn_x000D__x000A_      The color used for Warning severity messages in the host output. Default is DarkYellow._x000D__x000A_    .PARAMETER ColorError_x000D__x000A_      The color used for Error severity messages in the host output. Default is DarkRed._x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Message "This is My Info Log File Message"_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Info" -Message "This is My Info Log File Message"_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Warning" -Message "This is My Warning Log File Message"_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Error" -Message "This is My Error Log File Message"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "LogFolder")]_x000D__x000A_    [String]$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [String]$LogName = "$([System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName)).log",_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "SystemLog")]_x000D__x000A_    [Switch]$SystemLog,_x000D__x000A_    [ValidateSet("Text", "Info", "Good", "Warning", "Error")]_x000D__x000A_    [String]$Severity = "Text",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message,_x000D__x000A_    [String]$Component = "",_x000D__x000A_    [String]$Context = "",_x000D__x000A_    [Int]$Thread = $PID,_x000D__x000A_    [ValidateRange(0, 16777216)]_x000D__x000A_    [Int]$MaxSize = 52428800,_x000D__x000A_    [Switch]$OutHost,_x000D__x000A_    [ConsoleColor]$ColorText = [ConsoleColor]::Gray,_x000D__x000A_    [ConsoleColor]$ColorInfo = [ConsoleColor]::DarkCyan,_x000D__x000A_    [ConsoleColor]$ColorGood = [ConsoleColor]::DarkGreen,_x000D__x000A_    [ConsoleColor]$ColorWarn = [ConsoleColor]::DarkYellow,_x000D__x000A_    [ConsoleColor]$ColorError = [ConsoleColor]::DarkRed_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Write-MyLogFile"_x000D__x000A__x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "LogFolder"_x000D__x000A_    {_x000D__x000A_      $LogPath = $LogFolder_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "SystemLog"_x000D__x000A_    {_x000D__x000A_      $LogPath = "$($ENV:SystemRoot)\Logs\$($LogFolder)"_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    Default_x000D__x000A_    {_x000D__x000A_      $LogPath = "$($PSScriptRoot)\Logs"_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if (-not [System.IO.Directory]::Exists($LogPath))_x000D__x000A_  {_x000D__x000A_    [Void][System.IO.Directory]::CreateDirectory($LogPath)_x000D__x000A_  }_x000D__x000A_  $TempFile = "$($LogPath)\$LogName"_x000D__x000A__x000D__x000A_  switch ($Severity)_x000D__x000A_  {_x000D__x000A_    "Text"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 1_x000D__x000A_      $HostColor = $ColorText_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Info"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 1_x000D__x000A_      $HostColor = $ColorInfo_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Good"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 1_x000D__x000A_      $HostColor = $ColorGood_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Warning"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 2_x000D__x000A_      $HostColor = $ColorWarn_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Error"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 3_x000D__x000A_      $HostColor = $ColorError_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempDate = [DateTime]::Now_x000D__x000A__x000D__x000A_  if (-not $PSBoundParameters.ContainsKey("Component"))_x000D__x000A_  {_x000D__x000A_    $TempSource = [System.IO.Path]::GetFileName($MyInvocation.ScriptName)_x000D__x000A_    $Component = [System.IO.Path]::GetFileNameWithoutExtension($TempSource)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ([System.IO.File]::Exists($TempFile) -and $MaxSize -gt 0)_x000D__x000A_  {_x000D__x000A_    if (([System.IO.FileInfo]$TempFile).Length -gt $MaxSize)_x000D__x000A_    {_x000D__x000A_      $TempBackup = [System.IO.Path]::ChangeExtension($TempFile, "lo_")_x000D__x000A_      if ([System.IO.File]::Exists($TempBackup))_x000D__x000A_      {_x000D__x000A_        Remove-Item -Force -Path $TempBackup_x000D__x000A_      }_x000D__x000A_      Rename-Item -Force -Path $TempFile -NewName ([System.IO.Path]::GetFileName($TempBackup))_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($OutHost.IsPresent)_x000D__x000A_  {_x000D__x000A_    Write-Host -Object "$($TempDate.ToString("yy-MM-dd HH:mm:ss")) - $($Message)" -ForegroundColor $HostColor_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Add-Content -Encoding Ascii -Path $TempFile -Value ("&lt;![LOG[{0}]LOG]!&gt;&lt;time=`"{1}`" date=`"{2}`" component=`"{3}`" context=`"{4}`" type=`"{5}`" thread=`"{6}`" file=`"{7}`"&gt;" -f $Message, $($TempDate.ToString("HH:mm:ss.fff+000")), $($TempDate.ToString("MM-dd-yyyy")), $Component, $Context, $TempSeverity, $Thread, $TempSource)_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Write-MyLogFile"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Sample-ProgressBarStatus</S>
            <Obj N="Value" RefId="81">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Sample-ProgressBarStatus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .PARAMETER ProgressBar_x000D__x000A_      The Progress Bar_x000D__x000A_    .PARAMETER Label_x000D__x000A_      The Label to Indicate the Current Item being Proccessed_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      Passed Paramters HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ProgressBar]$ProgressBar,_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Label]$Label,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Sample-ProgressBarStatus"_x000D__x000A__x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $ProgressBar.Refresh()_x000D__x000A__x000D__x000A_  # Write KPI Event_x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"_x000D__x000A__x000D__x000A_  # Update Status Message_x000D__x000A_  $PILBtmStatusStrip.Items["Status"].Text = $ProgressBar.Parent.Parent.Text_x000D__x000A__x000D__x000A_  # Month Names_x000D__x000A_  $Values = $HashTable.Values_x000D__x000A__x000D__x000A_  # Set Starting ProgresBar Values_x000D__x000A_  $ProgressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Blocks_x000D__x000A_  $ProgressBar.Maximum = $Values.Count_x000D__x000A_  $ProgressBar.Minimum = 1_x000D__x000A_  $ProgressBar.Step = 1_x000D__x000A_  $ProgressBar.Value = 1_x000D__x000A__x000D__x000A_  :UserCancel ForEach ($Value In $Values)_x000D__x000A_  {_x000D__x000A_    # Update Progress Information_x000D__x000A__x000D__x000A_    $Label.Text = $Value_x000D__x000A_    $Label.Refresh()_x000D__x000A__x000D__x000A_    # Check for Fast Exit_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_    If ($ProgressBar.Parent.Parent.Tag.Cancel)_x000D__x000A_    {_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort_x000D__x000A_      Break UserCancel_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Pause Processing Loop_x000D__x000A_    If ($ProgressBar.Parent.Parent.Tag.Pause)_x000D__x000A_    {_x000D__x000A_      $TmpTitle = $ProgressBar.Parent.Parent.Text_x000D__x000A_      $ProgressBar.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"_x000D__x000A_      While ($ProgressBar.Parent.Parent.Tag.Pause)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(100)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A_      $ProgressBar.Parent.Parent.Text = $TmpTitle_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $ProgressBar.Increment(1)_x000D__x000A_    $ProgressBar.Refresh()_x000D__x000A_    Start-Sleep -Milliseconds 1000_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Update Status Message_x000D__x000A_  $PILBtmStatusStrip.Items["Status"].Text = "Completed $($ProgressBar.Parent.Parent.Text)"_x000D__x000A__x000D__x000A_  # Return DialogResult_x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Sample-ProgressBarStatus"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILFormShown</S>
            <Obj N="Value" RefId="82">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shown Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shown Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Shown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Shown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Shown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $Sender.Refresh()_x000D__x000A__x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 1 -Category 0 -Message "Begin Running $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A__x000D__x000A_  $HashTable = @{"ShowHeader" = $True; "ConfigFile" = $ConfigFile}_x000D__x000A_  $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Display-InitiliazePILUtility -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_  $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable_x000D__x000A__x000D__x000A_  if ([MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    # Enable $PILTimer_x000D__x000A_    $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Shown Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Invoke-MyConCommand</S>
            <Obj N="Value" RefId="83">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Invoke-MyConCommand</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Invokes a console command and returns the exit code, output, and error message._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function executes a specified console command with optional parameters, captures the exit code, standard output, and standard error, and returns them in a custom object. _x000D__x000A_      Useful for running external processes and retrieving their results in PowerShell._x000D__x000A_    .PARAMETER Command_x000D__x000A_      The full path to the executable or command to run. This parameter is mandatory._x000D__x000A_    .PARAMETER Parameters_x000D__x000A_      Optional command line parameters to pass to the executable. Default is $Null._x000D__x000A_    .EXAMPLE_x000D__x000A_      Invoke-MyConCommand -Command "C:\Windows\System32\cmd.exe" -Parameters "/c Exit 1"_x000D__x000A_      Runs cmd.exe with the specified parameters and returns the exit code and output._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Command,_x000D__x000A_    [String]$Parameters = $Null_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Invoke-MyConCommand"_x000D__x000A__x000D__x000A_  if ([System.IO.File]::Exists($Command))_x000D__x000A_  {_x000D__x000A_    $PSI = [System.Diagnostics.ProcessStartInfo]::New($Command, $Parameters)_x000D__x000A_    $PSI.UseShellExecute = $False_x000D__x000A_    $PSI.RedirectStandardError = $True_x000D__x000A_    $PSI.RedirectStandardOutput = $True_x000D__x000A_    try_x000D__x000A_    {_x000D__x000A_      $Out = [System.Diagnostics.Process]::Start($PSI)_x000D__x000A_      $Out.WaitForExit()_x000D__x000A_      [MyConCommand]::New($Out.ExitCode, $Out.StandardOutput.ReadToEnd(), $Out.StandardError.ReadToEnd())_x000D__x000A_    }_x000D__x000A_    catch_x000D__x000A_    {_x000D__x000A_      [MyConCommand]::New(-2, $Null, $Error[0].Message)_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [MyConCommand]::New(-1, $Null, "Command was not Found")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Invoke-MyConCommand"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Wait-MyRSJob</S>
            <Obj N="Value" RefId="84">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Wait-MyRSJob</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Wait for RSJob to Finish_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Wait for RSJob to Finish_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of Pool to Get Jobs From_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of Pool to Get Jobs From_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of Jobs to Get_x000D__x000A_    .PARAMETER JobID_x000D__x000A_      ID of Jobs to Get_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      ScriptBlock to invoke while waiting_x000D__x000A__x000D__x000A_      For windows Forms scripts add the DoEvents method in to the Wait ScritpBlock_x000D__x000A__x000D__x000A_      [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      [System.Threading.Thread]::Sleep(250)_x000D__x000A_    .PARAMETER Wait_x000D__x000A_      TimeSpace to wait_x000D__x000A_    .PARAMETER NoWait_x000D__x000A_      No Wait, Return when any Job states changes to Stopped, Completed, or Failed_x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      Return the New Jobs to the Pipeline_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Wait-MyRSJob -PassThru_x000D__x000A__x000D__x000A_      Wait for and Get RSJobs from the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Wait-MyRSJob -RSPool $RSPool -PassThru_x000D__x000A__x000D__x000A_      $MyRSJobs = Wait-MyRSJob -PoolName $PoolName -PassThru_x000D__x000A__x000D__x000A_      $MyRSJobs = Wait-MyRSJob -PoolID $PoolID -PassThru_x000D__x000A__x000D__x000A_      Wait for and Get RSJobs from the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State,_x000D__x000A_    [ScriptBlock]$SciptBlock = { [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 },_x000D__x000A_    [UInt16]$Wait = 60,_x000D__x000A_    [Switch]$NoWait,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Wait-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Remove Invalid Get-MyRSJob Parameters_x000D__x000A_    if ($PSCmdlet.ParameterSetName -ne "RSJob")_x000D__x000A_    {_x000D__x000A_      if ($PSBoundParameters.ContainsKey("PassThru"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("PassThru")_x000D__x000A_      }_x000D__x000A_      if ($PSBoundParameters.ContainsKey("Wait"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("Wait")_x000D__x000A_      }_x000D__x000A_      if ($PSBoundParameters.ContainsKey("NoWait"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("NoWait")_x000D__x000A_      }_x000D__x000A_      if ($PSBoundParameters.ContainsKey("ScriptBlock"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("ScriptBlock")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for Wait Jobs_x000D__x000A_    $WaitJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Wait-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Wait-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $WaitJobs.AddRange([MyRSJob[]]($RSJob))_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $WaitJobs.AddRange([MyRSJob[]](Get-MyRSJob @PSBoundParameters))_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Wait-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Wait-MyRSJob End Block"_x000D__x000A__x000D__x000A_    # Wait for Jobs to be Finshed_x000D__x000A_    if ($NoWait.IsPresent)_x000D__x000A_    {_x000D__x000A_      While (@(($WaitJobs | Where-Object -FilterScript { $PSItem.State -notmatch "Stopped|Completed|Failed" })).Count -eq $WaitJobs.Count)_x000D__x000A_      {_x000D__x000A_        $SciptBlock.Invoke()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Object[]]$CheckJobs = $WaitJobs.ToArray()_x000D__x000A_      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_      While (@(($CheckJobs = $CheckJobs | Where-Object -FilterScript { $PSItem.State -notmatch "Stopped|Completed|Failed" })).Count -and (($StopWatch.TotalSeconds -le $Wait) -or ($Wait -eq 0)))_x000D__x000A_      {_x000D__x000A_        $SciptBlock.Invoke()_x000D__x000A_      }_x000D__x000A_      $StopWatch.Stop()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    if ($PassThru.IsPresent)_x000D__x000A_    {_x000D__x000A_      # Return Completed Jobs_x000D__x000A_      [MyRSJob[]]($WaitJobs | Where-Object -FilterScript { $PSItem.State -match "Stopped|Completed|Failed" })_x000D__x000A_    }_x000D__x000A_    $WaitJobs.Clear()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Wait-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-ComboBoxOption</S>
            <Obj N="Value" RefId="85">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-ComboBoxOption</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ComboBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ComboBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ComboBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ComboBox_x000D__x000A_    .PARAMETER Sorted_x000D__x000A_      Sort ComboBox_x000D__x000A_    .PARAMETER SelectText_x000D__x000A_      The Default Selected Item when no Value is Selected_x000D__x000A_    .PARAMETER DisplayMember_x000D__x000A_      Name of the Property to Display in the CheckedListBox_x000D__x000A_    .PARAMETER ValueMember_x000D__x000A_      Name of the Property for the Value_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected ComboBox Item_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ComboBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Variables = @(Get-ChildItem -Path "Variable:\")_x000D__x000A_      $DialogResult = Get-ComboBoxOption -Title "Combo Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Variables -DisplayMember "Name" -ValueMember "Value" -Selected ($Variables[4])_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [Switch]$Sorted,_x000D__x000A_    [String]$SelectText = "Select Value",_x000D__x000A_    [String]$DisplayMember = "Text",_x000D__x000A_    [String]$ValueMember = "Value",_x000D__x000A_    [Object]$Selected,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ComboBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ComboBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ComboBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ComboBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $ComboBoxOptionForm.KeyPreview = $True_x000D__x000A_  $ComboBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $ComboBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $ComboBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $ComboBoxOptionForm.Name = "ComboBoxOptionForm"_x000D__x000A_  $ComboBoxOptionForm.Owner = $PILForm_x000D__x000A_  $ComboBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $ComboBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ComboBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionFormKeyDown ********_x000D__x000A_  function Start-ComboBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ComboBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ComboBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ComboBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionFormKeyDown ********_x000D__x000A_  $ComboBoxOptionForm.add_KeyDown({ Start-ComboBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionFormShown ********_x000D__x000A_  function Start-ComboBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ComboBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ComboBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ComboBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ComboBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionFormShown ********_x000D__x000A_  $ComboBoxOptionForm.add_Shown({ Start-ComboBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ComboBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionForm.Controls.Add($ComboBoxOptionPanel)_x000D__x000A_  $ComboBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ComboBoxOptionPanel.Name = "ComboBoxOptionPanel"_x000D__x000A_  #endregion $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ComboBoxOptionPanel.Controls.Add($ComboBoxOptionLabel)_x000D__x000A_    $ComboBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $ComboBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $ComboBoxOptionLabel.Name = "ComboBoxOptionLabel"_x000D__x000A_    $ComboBoxOptionLabel.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $ComboBoxOptionLabel.Text = $Message_x000D__x000A_    $ComboBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ComboBoxOptionLabel.Text, [MyConfig]::Font.Regular, $ComboBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $ComboBoxOptionLabel.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $ComboBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ComboBoxOptionPanel.Controls.Add($ComboBoxOptionGroupBox)_x000D__x000A_  $ComboBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $ComboBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ComboBoxOptionGroupBox.Name = "ComboBoxOptionGroupBox"_x000D__x000A_  $ComboBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)_x000D__x000A_  #endregion $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_  $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_  $ComboBoxOptionGroupBox.Controls.Add($GetComboChoiceComboBox)_x000D__x000A_  $GetComboChoiceComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $GetComboChoiceComboBox.AutoSize = $True_x000D__x000A_  $GetComboChoiceComboBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $GetComboChoiceComboBox.DisplayMember = $DisplayMember_x000D__x000A_  $GetComboChoiceComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList_x000D__x000A_  $GetComboChoiceComboBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $GetComboChoiceComboBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  [void]$GetComboChoiceComboBox.Items.Add([PSCustomObject]@{ $DisplayMember = " - $($SelectText) - "; $ValueMember = " - $($SelectText) - "})_x000D__x000A_  $GetComboChoiceComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $GetComboChoiceComboBox.Name = "GetComboChoiceComboBox"_x000D__x000A_  $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_  $GetComboChoiceComboBox.Size = [System.Drawing.Size]::New(($ComboBoxOptionGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $GetComboChoiceComboBox.PreferredHeight)_x000D__x000A_  $GetComboChoiceComboBox.Sorted = $Sorted.IsPresent_x000D__x000A_  $GetComboChoiceComboBox.TabIndex = 0_x000D__x000A_  $GetComboChoiceComboBox.TabStop = $True_x000D__x000A_  $GetComboChoiceComboBox.Tag = $Null_x000D__x000A_  $GetComboChoiceComboBox.ValueMember = $ValueMember_x000D__x000A_  #endregion $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A__x000D__x000A_  $GetComboChoiceComboBox.Items.AddRange($Items)_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Selected"))_x000D__x000A_  {_x000D__x000A_    $GetComboChoiceComboBox.Tag = $Items | Where-Object -FilterScript { $PSItem -eq $Selected}_x000D__x000A_    $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ComboBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($ComboBoxOptionGroupBox.ClientSize.Width, ($GetComboChoiceComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($ComboBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($ComboBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionForm.Controls.Add($ComboBoxOptionBtmPanel)_x000D__x000A_  $ComboBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ComboBoxOptionBtmPanel.Name = "ComboBoxOptionBtmPanel"_x000D__x000A_  #endregion $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ComboBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmLeftButton)_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ComboBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Name = "ComboBoxOptionBtmLeftButton"_x000D__x000A_  $ComboBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $ComboBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-ComboBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ComboBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($GetComboChoiceComboBox.SelectedIndex -gt 0)_x000D__x000A_    {_x000D__x000A_      $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $ComboBoxOptionBtmLeftButton.add_Click({ Start-ComboBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmMidButton)_x000D__x000A_  $ComboBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ComboBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ComboBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ComboBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxOptionBtmMidButton.Name = "ComboBoxOptionBtmMidButton"_x000D__x000A_  $ComboBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $ComboBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $ComboBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ComboBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ComboBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionBtmMidButtonClick ********_x000D__x000A_  function Start-ComboBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ([String]::IsNullOrEmpty($GetComboChoiceComboBox.Tag))_x000D__x000A_    {_x000D__x000A_      $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionBtmMidButtonClick ********_x000D__x000A_  $ComboBoxOptionBtmMidButton.add_Click({ Start-ComboBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmRightButton)_x000D__x000A_  $ComboBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ComboBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ComboBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxOptionBtmRightButton.Name = "ComboBoxOptionBtmRightButton"_x000D__x000A_  $ComboBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $ComboBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $ComboBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ComboBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionBtmRightButtonClick ********_x000D__x000A_  function Start-ComboBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionBtmRightButtonClick ********_x000D__x000A_  $ComboBoxOptionBtmRightButton.add_Click({ Start-ComboBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ComboBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ComboBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ComboBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ComboBoxOptionForm.ClientSize = [System.Drawing.Size]::New($ComboBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $ComboBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ComboBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ComboBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ComboBoxOptionForm.ShowDialog()_x000D__x000A_  [ComboBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $GetComboChoiceComboBox.SelectedItem)_x000D__x000A__x000D__x000A_  $ComboBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ComboBoxOption"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionFormKeyDown</S>
            <Obj N="Value" RefId="86">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ListViewOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ListViewOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ListViewOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Sample-RichTextStatus</S>
            <Obj N="Value" RefId="87">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Sample-RichTextStatus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      Passed Paramters HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Sample-RichTextStatus -RichTextBox $RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Sample-RichTextStatus"_x000D__x000A__x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A__x000D__x000A_  # Get Passed Values_x000D__x000A_  If ($HashTable.ContainsKey("ShowHeader"))_x000D__x000A_  {_x000D__x000A_    $ShowHeader = $HashTable.ShowHeader_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $ShowHeader = $True_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # **************_x000D__x000A_  # RFT Formatting_x000D__x000A_  # **************_x000D__x000A_  # Permanate till Changed_x000D__x000A_  #$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left_x000D__x000A_  #$RichTextBox.SelectionBullet = $True_x000D__x000A_  #$RichTextBox.SelectionIndent = 10_x000D__x000A_  # Resets After AppendText_x000D__x000A_  #$RichTextBox.SelectionBackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$RichTextBox.SelectionCharOffset = 0_x000D__x000A_  #$RichTextBox.SelectionColor = [MyConfig]::Colors.TextFore_x000D__x000A_  #$RichTextBox.SelectionFont = [MyConfig]::Font.Bold_x000D__x000A_  # **********************_x000D__x000A_  # Update RichTextBox Text..._x000D__x000A_  # **********************_x000D__x000A__x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A__x000D__x000A_  # Write KPI Event_x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"_x000D__x000A__x000D__x000A_  if ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text_x000D__x000A__x000D__x000A_    # Initialize StopWatch_x000D__x000A_    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Started Proccess List Data Here..." -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A__x000D__x000A_  :UserCancel foreach ($Key in $HashTable.Keys)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Found Key" -TextFore ([MyConfig]::Colors.TextInfo) -Value "$($Key) = $($HashTable[$Key])" -ValueFore ([MyConfig]::Colors.TextGood)_x000D__x000A_    # Check for Fast Exit_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_    If ($RichTextBox.Parent.Parent.Tag.Cancel)_x000D__x000A_    {_x000D__x000A_      $RichTextBox.SelectionIndent = 10_x000D__x000A_      $RichTextBox.SelectionBullet = $False_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort_x000D__x000A_      Break UserCancel_x000D__x000A_    }_x000D__x000A_    # Pause Processing Loop_x000D__x000A_    If ($RichTextBox.Parent.Parent.Tag.Pause)_x000D__x000A_    {_x000D__x000A_      $TmpPause = $RichTextBox.SelectionBullet_x000D__x000A_      $TmpTitle = $RichTextBox.Parent.Parent.Text_x000D__x000A_      $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"_x000D__x000A_      $RichTextBox.SelectionBullet = $False_x000D__x000A_      While ($RichTextBox.Parent.Parent.Tag.Pause)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(100)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A_      $RichTextBox.SelectionBullet = $TmpPause_x000D__x000A_      $RichTextBox.Parent.Parent.Text = $TmpTitle_x000D__x000A_    }_x000D__x000A_    Start-Sleep -Milliseconds 100_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Pause Before Deployment_x000D__x000A_  $RichTextBox.Parent.Parent.Tag.Pause = $True_x000D__x000A_  $TmpPause = $RichTextBox.SelectionBullet_x000D__x000A_  $TmpTitle = $RichTextBox.Parent.Parent.Text_x000D__x000A_  $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A__x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Pause to Review Status" -Font ([MyConfig]::Font.Bold) -Alignment Center_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Press 'Pause' to Continue with the Current Deployment" -Alignment Center_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "or Ctrl-Alt-Backspace to Exit / Cancel" -Alignment Center_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_  While ($RichTextBox.Parent.Parent.Tag.Pause)_x000D__x000A_  {_x000D__x000A_    [System.Threading.Thread]::Sleep(100)_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_    If ($RichTextBox.Parent.Parent.Tag.Cancel)_x000D__x000A_    {_x000D__x000A_      $RichTextBox.Parent.Parent.Tag.Pause = $False_x000D__x000A_      $RichTextBox.SelectionIndent = 10_x000D__x000A_      $RichTextBox.SelectionBullet = $False_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $RichTextBox.SelectionBullet = $TmpPause_x000D__x000A_  $RichTextBox.Parent.Parent.Text = $TmpTitle_x000D__x000A__x000D__x000A_  # Display an Error Information_x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Show Fake Error Message" -TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  Try_x000D__x000A_  {_x000D__x000A_    Throw "This is a Fake Error!"_x000D__x000A_  }_x000D__x000A_  Catch_x000D__x000A_  {_x000D__x000A_    # Write Error to Status Dialog_x000D__x000A_    Write-RichTextBoxError -RichTextBox $RichTextBox_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionIndent = 10_x000D__x000A_    $RichTextBox.SelectionBullet = $False_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_    # Set Final Status Message_x000D__x000A_    Switch ($DisplayResult)_x000D__x000A_    {_x000D__x000A_      "OK"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Add Success Message Here!"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextGood_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Cancel"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Add Error Message Here!"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextBad_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Abort"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Add Abort Message Here!"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextWarn_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Write Final Status Message_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $FinalMsg_x000D__x000A_    $StopWatch.Stop()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Return DialogResult_x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Sample-RichTextStatus"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Set-EnvironmentVariable</S>
            <Obj N="Value" RefId="88">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Set-EnvironmentVariable</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Sets or creates an environment variable on the local or remote workstation._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function sets the value of an environment variable for a specified user on one or more computers using CIM/WMI. If the variable does not exist, it will be created._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Specifies one or more computer names to target. Defaults to the local computer._x000D__x000A_    .PARAMETER Variable_x000D__x000A_      Specifies the name of the environment variable to set. This parameter is mandatory._x000D__x000A_    .PARAMETER Value_x000D__x000A_      Specifies the value to assign to the environment variable._x000D__x000A_    .PARAMETER UserName_x000D__x000A_      Specifies the user context for the environment variable. Defaults to '&lt;SYSTEM&gt;' for system-wide variables._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Specifies a PSCredential object for authentication when connecting to remote computers._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-EnvironmentVariable -Variable "Path" -Value "C:\MyPath"_x000D__x000A_      Sets the "Path" environment variable for the system on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-EnvironmentVariable -ComputerName "Server01","Server02" -Variable "TEMP" -Value "C:\Temp" -UserName "DOMAIN\User"_x000D__x000A_      Sets the "TEMP" environment variable for the specified user on multiple remote computers._x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Variable,_x000D__x000A_    [String]$Value,_x000D__x000A_    [String]$UserName = "&lt;SYSTEM&gt;",_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-EnvironmentVariable Begin Block"_x000D__x000A__x000D__x000A_    $Query = "Select * from Win32_Environment Where Name = '$Variable' and UserName = '$UserName'"_x000D__x000A__x000D__x000A_    $SessionParams = @{_x000D__x000A_      "ComputerName" = ""_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      [Void]$SessionParms.Add("Credential", $Credential)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-EnvironmentVariable Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-EnvironmentVariable Process Block"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      $SessionParams.ComputerName = $Computer_x000D__x000A_      $CimSession = New-CimSession @SessionParams_x000D__x000A_      if ([String]::IsNullOrEmpty(($Instance = Get-CimInstance -CimSession $CimSession -Query $Query)))_x000D__x000A_      {_x000D__x000A_        New-CimInstance -CimSession $CimSession -ClassName Win32_Environment -Property @{ "Name" = $Variable; "VariableValue" = $Value; "UserName" = $UserName }_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        Set-CimInstance -InputObject $Instance -Property @{ "Name" = $Variable; "VariableValue" = $Value } -PassThru_x000D__x000A_      }_x000D__x000A_      $CimSession.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-EnvironmentVariable Process Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RichTextStatusFormKeyDown</S>
            <Obj N="Value" RefId="89">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RichTextStatusFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the RichTextStatus Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the RichTextStatus Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-RichTextStatusFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$RichTextStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Cancel = $True_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }_x000D__x000A_        {_x000D__x000A_          if ($Sender.Tag.Finished)_x000D__x000A_          {_x000D__x000A_            $Sender.DialogResult = $ButtonDefault_x000D__x000A_          }_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$RichTextStatusForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTimerTick</S>
            <Obj N="Value" RefId="90">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTimerTick</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Tick Event for the PIL Timer Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Tick Event for the PIL Timer Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Tick Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Tick Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILTimerTick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Timer]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Tick Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit += 1_x000D__x000A_  Write-Verbose -Message "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"_x000D__x000A_  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)_x000D__x000A_  {_x000D__x000A_    $PILForm.Close()_x000D__x000A_  }_x000D__x000A_  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)_x000D__x000A_  {_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Tick Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCScriptContextMenuStripOpening</S>
            <Obj N="Value" RefId="91">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCScriptContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCScript ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCScript ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckBoxOptionFormShown</S>
            <Obj N="Value" RefId="92">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckBoxOptionFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the CheckBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the CheckBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$CheckBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$CheckBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Show-ChangeLog</S>
            <Obj N="Value" RefId="93">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Show-ChangeLog</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-ChangeLog_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-ChangeLog_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-ChangeLog Dialog Window_x000D__x000A_    .PARAMETER ChangeText_x000D__x000A_      Change Log Text_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Show-ChangeLog Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Show-ChangeLog Dialog Window_x000D__x000A_    .EXAMPLE_x000D__x000A_      $TmpContent = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()_x000D__x000A_      $CLogStart = ($TmpContent.IndexOf("&lt;") + 3)_x000D__x000A_      $CLogEnd = ($TmpContent.IndexOf("&gt;") - 1)_x000D__x000A_      Show-ChangeLog -ChangeText ($TmpContent.SubString($CLogStart, ($CLogEnd - $CLogStart)))_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "Change Log - $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$ChangeText,_x000D__x000A_    [Int]$Width = 60,_x000D__x000A_    [Int]$Height = 30_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-ChangeLog"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ChangeLog **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ChangeLog Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ChangeLogForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ChangeLogForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ChangeLogForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ChangeLogForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ChangeLogForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ChangeLogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ChangeLogForm.Icon = $PILForm.Icon_x000D__x000A_  $ChangeLogForm.KeyPreview = $True_x000D__x000A_  $ChangeLogForm.MaximizeBox = $False_x000D__x000A_  $ChangeLogForm.MinimizeBox = $False_x000D__x000A_  $ChangeLogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ChangeLogForm.Name = "ChangeLogForm"_x000D__x000A_  $ChangeLogForm.Owner = $PILForm_x000D__x000A_  $ChangeLogForm.ShowInTaskbar = $False_x000D__x000A_  $ChangeLogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ChangeLogForm.Tag = $False_x000D__x000A_  $ChangeLogForm.Text = $Title_x000D__x000A_  #endregion $ChangeLogForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ChangeLogFormKeyDown ********_x000D__x000A_  Function Start-ChangeLogFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the ChangeLog Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the ChangeLog Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ChangeLogFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ChangeLogForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $ChangeLogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ChangeLogForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ChangeLogFormKeyDown ********_x000D__x000A_  $ChangeLogForm.add_KeyDown({ Start-ChangeLogFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ChangeLogFormShown ********_x000D__x000A_  Function Start-ChangeLogFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_     .SYNOPSIS_x000D__x000A_       Shown Event for the ChangeLog Form Control_x000D__x000A_     .DESCRIPTION_x000D__x000A_       Shown Event for the ChangeLog Form Control_x000D__x000A_     .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_     .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ChangeLogFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ChangeLogForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    $ChangeLogTextBox.AppendText($ChangeText)_x000D__x000A__x000D__x000A_    $ChangeLogTextBox.SelectionLength = 0_x000D__x000A_    $ChangeLogTextBox.SelectionStart = 0_x000D__x000A_    $ChangeLogTextBox.ScrollToCaret()_x000D__x000A_    $Sender.Refresh()_x000D__x000A_    $Sender.Activate()_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ChangeLogForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ChangeLogFormShown ********_x000D__x000A_  $ChangeLogForm.add_Shown({ Start-ChangeLogFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ChangeLog Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ChangeLog Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ChangeLogPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogForm.Controls.Add($ChangeLogPanel)_x000D__x000A_  $ChangeLogPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ChangeLogPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ChangeLogPanel.Name = "ChangeLogPanel"_x000D__x000A_  #endregion $ChangeLogPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ChangeLogPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $ChangeLogPanel.Controls.Add($ChangeLogTextBox)_x000D__x000A_  $ChangeLogTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $ChangeLogTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ChangeLogTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $ChangeLogTextBox.Font = [System.Drawing.Font]::New("Courier New", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)_x000D__x000A_  $ChangeLogTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ChangeLogTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ChangeLogTextBox.MaxLength = [Int]::MaxValue_x000D__x000A_  $ChangeLogTextBox.Multiline = $True_x000D__x000A_  $ChangeLogTextBox.Name = "ChangeLogTextBox"_x000D__x000A_  $ChangeLogTextBox.ReadOnly = $True_x000D__x000A_  $ChangeLogTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both_x000D__x000A_  $ChangeLogTextBox.Size = [System.Drawing.Size]::New(($ChangeLogPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ChangeLogPanel.ClientSize.Height - ($ChangeLogTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $ChangeLogTextBox.TabStop = $False_x000D__x000A_  $ChangeLogTextBox.Text = $Null_x000D__x000A_  $ChangeLogTextBox.WordWrap = $False_x000D__x000A_  #endregion $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_  #endregion ******** $ChangeLogPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ChangeLogBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogForm.Controls.Add($ChangeLogBtmPanel)_x000D__x000A_  $ChangeLogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ChangeLogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ChangeLogBtmPanel.Name = "ChangeLogBtmPanel"_x000D__x000A_  #endregion $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ChangeLogBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ChangeLogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ChangeLogBtmPanel.Controls.Add($ChangeLogBtmMidButton)_x000D__x000A_  $ChangeLogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ChangeLogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ChangeLogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ChangeLogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $ChangeLogBtmMidButton.Enabled = $True_x000D__x000A_  $ChangeLogBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ChangeLogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ChangeLogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), 0)_x000D__x000A_  $ChangeLogBtmMidButton.Name = "ChangeLogBtmMidButton"_x000D__x000A_  $ChangeLogBtmMidButton.TabStop = $True_x000D__x000A_  $ChangeLogBtmMidButton.Text = "&amp;Ok"_x000D__x000A_  $ChangeLogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ChangeLogBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  $ChangeLogBtmPanel.ClientSize = [System.Drawing.Size]::New(($ChangeLogTextBox.Right + [MyConfig]::FormSpacer), (($ChangeLogBtmPanel.Controls[$ChangeLogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ChangeLogBtmPanel Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ChangeLog Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** Show-ChangeLog **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ChangeLogForm.ShowDialog($PILForm)_x000D__x000A_  $ChangeLogForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-ChangeLog"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-MenuLabel</S>
            <Obj N="Value" RefId="94">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-MenuLabel</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuLabel (ToolStripLabel) to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripLabel with the specified properties and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of text, name, tooltip, icon, display style, alignment, tag, enabled/disabled state, font, and colors._x000D__x000A_      The new MenuLabel can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuLabel will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new MenuLabel. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new MenuLabel. If not specified, the Text value is used.  _x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the MenuLabel._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      The icon to display for the MenuLabel. If specified, the label will show the icon._x000D__x000A_    .PARAMETER DisplayStyle_x000D__x000A_      Specifies how the MenuLabel displays its image and text. Defaults to 'Text'._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      Specifies the alignment of the MenuLabel's text and image. Defaults to 'MiddleLeft'._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new MenuLabel._x000D__x000A_    .PARAMETER Disable_x000D__x000A_      If specified, disables the MenuLabel (sets Enabled to $false)._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the MenuLabel text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuLabel. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the MenuLabel. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created MenuLabel object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-MenuLabel -Menu $menuStrip -Text "Info" -Tag "Information"_x000D__x000A_      Adds a new MenuLabel with text "Info" and tag "Information" to $menuStrip._x000D__x000A_    .EXAMPLE_x000D__x000A_      $label = New-MenuLabel -Menu $contextMenu -Text "Help" -Icon $icon -PassThru_x000D__x000A_      Adds a new MenuLabel with an icon and returns the created MenuLabel object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",_x000D__x000A_    [System.Drawing.ContentAlignment]$Alignment = "MiddleLeft",_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Switch]$Disable,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]_x000D__x000A_  $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New($Text)_x000D__x000A__x000D__x000A_  if ($Menu.GetType().Name -eq "ToolStripMenuItem")_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.DropDownItems.Add($TempMenuLabel)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.Items.Add($TempMenuLabel)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuLabel.TextAlign = $Alignment_x000D__x000A_  $TempMenuLabel.Tag = $Tag_x000D__x000A_  $TempMenuLabel.ToolTipText = $ToolTip_x000D__x000A_  $TempMenuLabel.DisplayStyle = $DisplayStyle_x000D__x000A_  $TempMenuLabel.Enabled = (-not $Disable.IsPresent)_x000D__x000A__x000D__x000A_  $TempMenuLabel.BackColor = $BackColor_x000D__x000A_  $TempMenuLabel.ForeColor = $ForeColor_x000D__x000A_  $TempMenuLabel.Font = $Font_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Icon"))_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.Image = $Icon_x000D__x000A_    $TempMenuLabel.ImageAlign = $Alignment_x000D__x000A_    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage_x000D__x000A_  }_x000D__x000A_  #endregion $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]_x000D__x000A__x000D__x000A_  if ($PassThru)_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuLabel = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RadioButtonOptionBtmLeftButtonClick</S>
            <Obj N="Value" RefId="95">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RadioButtonOptionBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If (@($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "RadioButton") -and $PSItem.Checked }).Count -eq 1)_x000D__x000A_    {_x000D__x000A_      $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($RadioButtonOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionListViewMouseDown</S>
            <Obj N="Value" RefId="96">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionListViewMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($ListViewOptionListView.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $ListViewOptionContextMenuStrip.Show($ListViewOptionListView, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$ListViewOptionListView"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Write-RichTextBoxValue</S>
            <Obj N="Value" RefId="97">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Write-RichTextBoxValue</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Write Property Value to RichTextBox_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Write Property Value to RichTextBox_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER TextFore_x000D__x000A_    .PARAMETER ValueFore_x000D__x000A_    .PARAMETER BulletFore_x000D__x000A_    .PARAMETER Font_x000D__x000A_    .PARAMETER Text_x000D__x000A_    .PARAMETER Value_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Text -Value $Value_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox,_x000D__x000A_    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Color]$ValueFore = [MyConfig]::Colors.TextInfo,_x000D__x000A_    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [AllowEmptyString()]_x000D__x000A_    [AllowNull()]_x000D__x000A_    [String]$Value_x000D__x000A_  )_x000D__x000A_  $RichTextBox.SelectionLength = 0_x000D__x000A_  $RichTextBox.SelectionStart = $RichTextBox.TextLength_x000D__x000A_  $RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left_x000D__x000A_  $RichTextBox.SelectionFont = $Font_x000D__x000A_  $RichTextBox.SelectionColor = $TextFore_x000D__x000A_  $RichTextBox.AppendText("$($Text)")_x000D__x000A_  $RichTextBox.SelectionColor = $BulletFore_x000D__x000A_  $RichTextBox.AppendText(": ")_x000D__x000A_  $RichTextBox.SelectionColor = $ValueFore_x000D__x000A_  $RichTextBox.AppendText("$($Value)")_x000D__x000A_  $RichTextBox.SelectionColor = $BulletFore_x000D__x000A_  $RichTextBox.AppendText("`r`n")_x000D__x000A_  $RichTextBox.ScrollToCaret()_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  $RichTextBox.Parent.Parent.Activate()_x000D__x000A_  [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Decode-MySecureString</S>
            <Obj N="Value" RefId="98">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Decode-MySecureString</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Decodes a SecureString to plain text._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function converts a System.Security.SecureString object to its plain text string representation. _x000D__x000A_      It is useful for retrieving the original value from a SecureString, such as when you need to use the password or sensitive data in plain text form._x000D__x000A_    .PARAMETER SecureString_x000D__x000A_      The SecureString object to decode. This should be a System.Security.SecureString instance containing the sensitive data you want to convert to plain text._x000D__x000A_    .EXAMPLE_x000D__x000A_      $secure = Read-Host "Enter secret" -AsSecureString_x000D__x000A_      Decode-MySecureString -SecureString $secure_x000D__x000A_      Decodes the entered SecureString and outputs the plain text value._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Security.SecureString]$SecureString_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecureString))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListListViewMouseDown</S>
            <Obj N="Value" RefId="99">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListListViewMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      MouseDown Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      MouseDown Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the MouseDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList MouseDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_  {_x000D__x000A_    If (-not [String]::IsNullOrEmpty(($TmpItem = $Sender.GetItemAt($EventArg.Location.X, $EventArg.Location.Y))))_x000D__x000A_    {_x000D__x000A_      # Show Item Selected Context Menu_x000D__x000A_      If ($Sender.SelectedIndices -notcontains $TmpItem.Index)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndices.Add($TmpItem.Index) | Out-Null_x000D__x000A_      }_x000D__x000A_      #$PILItemListContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    $PILItemListContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationFormKeyDown</S>
            <Obj N="Value" RefId="100">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ThreadConfigurationFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ThreadConfigurationForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ThreadConfigurationForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionContextMenuStripOpening</S>
            <Obj N="Value" RefId="101">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the ListBoxOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the ListBoxOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$ListBoxOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$ListBoxOptionContextMenuStrip"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RadioButtonOptionBtmRightButtonClick</S>
            <Obj N="Value" RefId="102">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RadioButtonOptionBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RadioButtonOptionBtmMidButtonClick</S>
            <Obj N="Value" RefId="103">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RadioButtonOptionBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($RadioButton In @($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))_x000D__x000A_    {_x000D__x000A_      $RadioButton.Checked = ($RadioButton.Tag -eq $Selected)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-EnvironmentVariable</S>
            <Obj N="Value" RefId="104">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-EnvironmentVariable</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Retrieves environment variables from the local or remote workstation._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function queries environment variables for a specified user on one or more computers using CIM/WMI._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Specifies one or more computer names to query. Defaults to the local computer._x000D__x000A_    .PARAMETER Variable_x000D__x000A_      Specifies the name of the environment variable to retrieve. Supports wildcards. Defaults to '%' (all variables)._x000D__x000A_    .PARAMETER UserName_x000D__x000A_      Specifies the user context for the environment variable. Defaults to '&lt;SYSTEM&gt;' for system-wide variables._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Specifies a PSCredential object for authentication when connecting to remote computers._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-EnvironmentVariable -Variable "Path"_x000D__x000A_      Retrieves the "Path" environment variable for the system on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-EnvironmentVariable -ComputerName "Server01","Server02" -Variable "TEMP" -UserName "DOMAIN\User"_x000D__x000A_      Retrieves the "TEMP" environment variable for the specified user on multiple remote computers._x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [String]$Variable = "%",_x000D__x000A_    [String]$UserName = "&lt;SYSTEM&gt;",_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-EnvironmentVariable Begin Block"_x000D__x000A__x000D__x000A_    $Query = "Select * from Win32_Environment Where Name like '$Variable' and UserName = '$UserName'"_x000D__x000A__x000D__x000A_    $SessionParams = @{_x000D__x000A_      "ComputerName" = ""_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      [Void]$SessionParms.Add("Credential", $Credential)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-EnvironmentVariable Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-EnvironmentVariable Process Block"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      $SessionParams.ComputerName = $Computer_x000D__x000A_      Get-CimInstance -CimSession (New-CimSession @SessionParams) -Query $Query_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-EnvironmentVariable Process Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Close-MyRSPool</S>
            <Obj N="Value" RefId="105">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Close-MyRSPool</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Close RunspacePool and Stop all Running Jobs_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Close RunspacePool and Stop all Running Jobs_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to clsoe_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RSPool to close_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      PoolID of Job to close_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to close_x000D__x000A_    .EXAMPLE_x000D__x000A_      Close-MyRSPool_x000D__x000A__x000D__x000A_      Close the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      Close-MyRSPool -PoolName $PoolName_x000D__x000A__x000D__x000A_      Close-MyRSPool -PoolID $PoolID_x000D__x000A__x000D__x000A_      Close Specified RSPools_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "All")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSPool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolName")]_x000D__x000A_    [String[]]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolID")]_x000D__x000A_    [Guid[]]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "All")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolID")]_x000D__x000A_    [ValidateSet("BeforeOpen", "Opening", "Opened", "Closed", "Closing", "Broken", "Disconnecting", "Disconnected", "Connecting")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Close-MyRSPool Process Block"_x000D__x000A__x000D__x000A_    If ($PSCmdlet.ParameterSetName -eq "RSPool")_x000D__x000A_    {_x000D__x000A_      $TempPools = $RSPool_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempPools = [MyRSPool[]](Get-MyRSPool @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Close RunspacePools, This will Stop all Running Jobs_x000D__x000A_    ForEach ($TempPool in $TempPools)_x000D__x000A_    {_x000D__x000A_      if (-not [String]::IsNullOrEmpty($TempPool.Mutex))_x000D__x000A_      {_x000D__x000A_        $TempPool.Mutex.Close()_x000D__x000A_        $TempPool.Mutex.Dispose()_x000D__x000A_      }_x000D__x000A_      $TempPool.RunspacePool.Close()_x000D__x000A_      $TempPool.RunspacePool.Dispose()_x000D__x000A_      [Void]$Script:MyHiddenRSPool.Remove($TempPool.Name)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Close-MyRSPool Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Close-MyRSPool End Block"_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Close-MyRSPool End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILFormMove</S>
            <Obj N="Value" RefId="106">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILFormMove</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Move Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Move Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Move Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Move Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Move Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Move Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionContextMenuStripOpening</S>
            <Obj N="Value" RefId="107">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the ListViewOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the ListViewOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$ListViewOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$ListViewOptionContextMenuStrip"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCThreadsTrackBarValueChanged</S>
            <Obj N="Value" RefId="108">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCThreadsTrackBarValueChanged</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ValueChanged Event for the PILTCModules TrackBar Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ValueChanged Event for the PILTCModules TrackBar Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the ValueChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules ValueChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCThreadsTrackBarValueChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TrackBar]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ValueChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $PILToolTip.SetToolTip($PILTCThreadsTrackBar, $PILTCThreadsTrackBar.Value)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit ValueChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-TextBoxInput</S>
            <Obj N="Value" RefId="109">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-TextBoxInput</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-TextBoxInput_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-TextBoxInput_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-TextBoxInput Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER HintText_x000D__x000A_      Hint Text to Display_x000D__x000A_    .PARAMETER ValidChars_x000D__x000A_      RegEx Allowed Valid Characters for Input_x000D__x000A_    .PARAMETER ValidOutput_x000D__x000A_      RegEx Validate Output Format_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Default Items / Text_x000D__x000A_    .PARAMETER MaxLength_x000D__x000A_      Maximum Length of Text Input_x000D__x000A_    .PARAMETER Multi_x000D__x000A_      Allow Multiple Lines of TExt_x000D__x000A_    .PARAMETER NoDuplicates_x000D__x000A_      Do Not Allow Duplicate Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Get-TextBoxInput Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Get-TextBoxInput Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $DialogResult = Get-TextBoxInput -Title "Get User Text - Multi" -Message "Show this Sample Message Prompt to the User" -Multi -Items @("Computer Name 01", "Computer Name 02", "Computer Name 03")_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Single")]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [String]$HintText = "Enter Value Here",_x000D__x000A_    [String]$ValidChars = "[\s\w\d\.\-_,;]",_x000D__x000A_    [String]$ValidOutput = ".+",_x000D__x000A_    [String[]]$Items = @(),_x000D__x000A_    [Int]$MaxLength = [Int]::MaxValue,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Multi")]_x000D__x000A_    [Switch]$Multi,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Multi")]_x000D__x000A_    [Switch]$NoDuplicates,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Multi")]_x000D__x000A_    [Int]$Height = 18,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-TextBoxInput"_x000D__x000A__x000D__x000A_  #region ******** Begin **** TextBoxInput **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInput Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $TextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $TextBoxInputForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $TextBoxInputForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $TextBoxInputForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $TextBoxInputForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $TextBoxInputForm.Icon = $PILForm.Icon_x000D__x000A_  $TextBoxInputForm.KeyPreview = $True_x000D__x000A_  $TextBoxInputForm.MaximizeBox = $False_x000D__x000A_  $TextBoxInputForm.MinimizeBox = $False_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TextBoxInputForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TextBoxInputForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  }_x000D__x000A_  $TextBoxInputForm.Name = "TextBoxInputForm"_x000D__x000A_  $TextBoxInputForm.Owner = $PILForm_x000D__x000A_  $TextBoxInputForm.ShowInTaskbar = $False_x000D__x000A_  $TextBoxInputForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $TextBoxInputForm.Text = $Title_x000D__x000A_  #endregion $TextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputFormKeyDown ********_x000D__x000A_  function Start-TextBoxInputFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the TextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the TextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputFormKeyDown ********_x000D__x000A_  $TextBoxInputForm.add_KeyDown({ Start-TextBoxInputFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputFormShown ********_x000D__x000A_  function Start-TextBoxInputFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the TextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the TextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$TextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TextBoxInputTextBox.DeselectAll()_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$TextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputFormShown ********_x000D__x000A_  $TextBoxInputForm.add_Shown({ Start-TextBoxInputFormShown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Controls for TextBoxInput Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInput Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputForm.Controls.Add($TextBoxInputPanel)_x000D__x000A_  $TextBoxInputPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $TextBoxInputPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $TextBoxInputPanel.Name = "TextBoxInputPanel"_x000D__x000A_  #endregion $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $TextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $TextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $TextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $TextBoxInputPanel.Controls.Add($TextBoxInputLabel)_x000D__x000A_    $TextBoxInputLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $TextBoxInputLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $TextBoxInputLabel.Name = "TextBoxInputLabel"_x000D__x000A_    $TextBoxInputLabel.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $TextBoxInputLabel.Text = $Message_x000D__x000A_    $TextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $TextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($TextBoxInputLabel.Text, [MyConfig]::Font.Regular, $TextBoxInputLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $TextBoxInputLabel.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $TextBoxInputLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInput GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $TextBoxInputPanel.Controls.Add($TextBoxInputGroupBox)_x000D__x000A_  $TextBoxInputGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $TextBoxInputGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $TextBoxInputGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $TextBoxInputGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $TextBoxInputGroupBox.Name = "TextBoxInputGroupBox"_x000D__x000A_  $TextBoxInputGroupBox.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TextBoxInputPanel.ClientSize.Height - ($TextBoxInputGroupBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $TextBoxInputGroupBox.Text = $Null_x000D__x000A_  #endregion $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  _x000D__x000A_  #region ******** $TextBoxInputGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  #region $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $TextBoxInputGroupBox.Controls.Add($TextBoxInputTextBox)_x000D__x000A_  $TextBoxInputTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $TextBoxInputTextBox.AutoSize = $True_x000D__x000A_  $TextBoxInputTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $TextBoxInputTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $TextBoxInputTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $TextBoxInputTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $TextBoxInputTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $TextBoxInputTextBox.MaxLength = $MaxLength_x000D__x000A_  $TextBoxInputTextBox.Multiline = $Multi.IsPresent_x000D__x000A_  $TextBoxInputTextBox.Name = "TextBoxInputTextBox"_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TextBoxInputTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both_x000D__x000A_    If ($Items.Count)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = $Items_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = ""_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = $Items }_x000D__x000A_    }_x000D__x000A_    $TextBoxInputTextBox.Size = [System.Drawing.Size]::New(($TextBoxInputGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TextBoxInputGroupBox.ClientSize.Height - ($TextBoxInputTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TextBoxInputTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None_x000D__x000A_    if ($Items.Count)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = $Items[0]_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items[0] } _x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = ""_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = "" }_x000D__x000A_    }_x000D__x000A_    $TextBoxInputTextBox.Size = [System.Drawing.Size]::New(($TextBoxInputGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TextBoxInputTextBox.PreferredHeight)_x000D__x000A_  }_x000D__x000A_  $TextBoxInputTextBox.TabIndex = 0_x000D__x000A_  $TextBoxInputTextBox.TabStop = $True_x000D__x000A_  $TextBoxInputTextBox.WordWrap = $False_x000D__x000A_  #endregion $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxGotFocus ********_x000D__x000A_  Function Start-TextBoxInputTextBoxGotFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      GotFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      GotFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the GotFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox GotFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter GotFocus Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ($Sender.Tag.HintEnabled)_x000D__x000A_    {_x000D__x000A_      $Sender.Text = ""_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit GotFocus Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxGotFocus ********_x000D__x000A_  $TextBoxInputTextBox.add_GotFocus({ Start-TextBoxInputTextBoxGotFocus -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxKeyDown ********_x000D__x000A_  function Start-TextBoxInputTextBoxKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the TextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the TextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The TextBox Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the TextBox KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))_x000D__x000A_    {_x000D__x000A_      $TextBoxInputBtmLeftButton.PerformClick()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxKeyDown ********_x000D__x000A_  $TextBoxInputTextBox.add_KeyDown({ Start-TextBoxInputTextBoxKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxKeyPress ********_x000D__x000A_  Function Start-TextBoxInputTextBoxKeyPress_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyPress Event for the TextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyPress Event for the TextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TextBox Control that fired the KeyPress Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TextBox KeyPress Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-TextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyPress Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X_x000D__x000A_    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyPress Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxKeyPress ********_x000D__x000A_  $TextBoxInputTextBox.add_KeyPress({Start-TextBoxInputTextBoxKeyPress -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxKeyUp ********_x000D__x000A_  Function Start-TextBoxInputTextBoxKeyUp_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyUp Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyUp Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the KeyUp Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox KeyUp Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyUp Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyUp Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxKeyUp ********_x000D__x000A_  $TextBoxInputTextBox.add_KeyUp({ Start-TextBoxInputTextBoxKeyUp -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxLostFocus ********_x000D__x000A_  Function Start-TextBoxInputTextBoxLostFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      LostFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      LostFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the LostFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox LostFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter LostFocus Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_    {_x000D__x000A_      $Sender.Text = $Sender.Tag.HintText_x000D__x000A_      $Sender.Tag.HintEnabled = $True_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $Sender.Tag.HintEnabled = $False_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit LostFocus Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxLostFocus ********_x000D__x000A_  $TextBoxInputTextBox.add_LostFocus({ Start-TextBoxInputTextBoxLostFocus -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  $TextBoxInputGroupBox.ClientSize = [System.Drawing.Size]::New($TextBoxInputGroupBox.ClientSize.Width, ($TextBoxInputTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  _x000D__x000A_  #endregion ******** $TextBoxInputGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($TextBoxInputGroupBox.Right + [MyConfig]::FormSpacer), ($TextBoxInputGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $TextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInputBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputForm.Controls.Add($TextBoxInputBtmPanel)_x000D__x000A_  $TextBoxInputBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $TextBoxInputBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $TextBoxInputBtmPanel.Name = "TextBoxInputBtmPanel"_x000D__x000A_  #endregion $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $TextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($TextBoxInputBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmLeftButton)_x000D__x000A_  $TextBoxInputBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $TextBoxInputBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $TextBoxInputBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $TextBoxInputBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $TextBoxInputBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $TextBoxInputBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $TextBoxInputBtmLeftButton.Name = "TextBoxInputBtmLeftButton"_x000D__x000A_  $TextBoxInputBtmLeftButton.TabIndex = 1_x000D__x000A_  $TextBoxInputBtmLeftButton.TabStop = $True_x000D__x000A_  $TextBoxInputBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $TextBoxInputBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $TextBoxInputBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputBtmLeftButtonClick ********_x000D__x000A_  function Start-TextBoxInputBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ((-not $TextBoxInputTextBox.Tag.HintEnabled) -and ("$($TextBoxInputTextBox.Text.Trim())".Length -gt 0))_x000D__x000A_    {_x000D__x000A_      $ChkOutput = $True_x000D__x000A_      ($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { $ChkOutput = ($ChkOutput -and $PSItem -match $ValidOutput) }_x000D__x000A_      If ($ChkOutput)_x000D__x000A_      {_x000D__x000A_        $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Missing Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputBtmLeftButtonClick ********_x000D__x000A_  $TextBoxInputBtmLeftButton.add_Click({ Start-TextBoxInputBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmMidButton)_x000D__x000A_  $TextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $TextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $TextBoxInputBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $TextBoxInputBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $TextBoxInputBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $TextBoxInputBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $TextBoxInputBtmMidButton.Location = [System.Drawing.Point]::New(($TextBoxInputBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $TextBoxInputBtmMidButton.Name = "TextBoxInputBtmMidButton"_x000D__x000A_  $TextBoxInputBtmMidButton.TabIndex = 2_x000D__x000A_  $TextBoxInputBtmMidButton.TabStop = $True_x000D__x000A_  $TextBoxInputBtmMidButton.Text = $ButtonMid_x000D__x000A_  $TextBoxInputBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $TextBoxInputBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputBtmMidButtonClick ********_x000D__x000A_  function Start-TextBoxInputBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = $TextBoxInputTextBox.Tag.Items_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = $TextBoxInputTextBox.Tag.Items_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    $TextBoxInputTextBox.Tag.HintEnabled = ($TextBoxInputTextBox.TextLength -gt 0)_x000D__x000A_    Start-TextBoxInputTextBoxLostFocus -Sender $TextBoxInputTextBox -EventArg "LostFocus"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputBtmMidButtonClick ********_x000D__x000A_  $TextBoxInputBtmMidButton.add_Click({ Start-TextBoxInputBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmRightButton)_x000D__x000A_  $TextBoxInputBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $TextBoxInputBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $TextBoxInputBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $TextBoxInputBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $TextBoxInputBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $TextBoxInputBtmRightButton.Location = [System.Drawing.Point]::New(($TextBoxInputBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $TextBoxInputBtmRightButton.Name = "TextBoxInputBtmRightButton"_x000D__x000A_  $TextBoxInputBtmRightButton.TabIndex = 3_x000D__x000A_  $TextBoxInputBtmRightButton.TabStop = $True_x000D__x000A_  $TextBoxInputBtmRightButton.Text = $ButtonRight_x000D__x000A_  $TextBoxInputBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $TextBoxInputBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputBtmRightButtonClick ********_x000D__x000A_  function Start-TextBoxInputBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A_    _x000D__x000A_    $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputBtmRightButtonClick ********_x000D__x000A_  $TextBoxInputBtmRightButton.add_Click({ Start-TextBoxInputBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $TextBoxInputBtmPanel.ClientSize = [System.Drawing.Size]::New(($TextBoxInputBtmRightButton.Right + [MyConfig]::FormSpacer), ($TextBoxInputBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $TextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $TextBoxInputForm.ClientSize = [System.Drawing.Size]::New($TextBoxInputForm.ClientSize.Width, ($TempClientSize.Height + $TextBoxInputBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for TextBoxInput Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** Get-TextBoxInput **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $TextBoxInputForm.ShowDialog($PILForm)_x000D__x000A_  If ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    If ($NoDuplicates.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TmpItems = @(($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | Select-Object -Unique)_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $TmpItems = @(($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries))_x000D__x000A_    }_x000D__x000A_    [TextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpItems)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [TextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TextBoxInputTextBox.Text)_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  $TextBoxInputForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-TextBoxInput"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILFormClosing</S>
            <Obj N="Value" RefId="110">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILFormClosing</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Closing Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Closing Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Closing Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Closing Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormClosing -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Closing Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 2 -Category 0 -Message "Exiting $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A__x000D__x000A_  if ([MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    [Void][Console.Window]::Show()_x000D__x000A_    [System.Console]::Title = "CLOSING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_    $PILForm.Tag = $True_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Closing Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListContextMenuStripOpening</S>
            <Obj N="Value" RefId="111">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Opening Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Opening Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the Opening Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList Opening Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A_  _x000D__x000A_  # Do Not Show Context Menu if it is Disabled_x000D__x000A_  $EventArg.Cancel = (-not $PILItemListContextMenuStrip.Enabled)_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-UserResponse</S>
            <Obj N="Value" RefId="112">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-UserResponse</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-UserResponse_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-UserResponse_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-UserResponse Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Get-UserResponse Dialog Window_x000D__x000A_    .PARAMETER Icon_x000D__x000A_      Message Icon_x000D__x000A_    .PARAMETER ButtonDefault_x000D__x000A_      The Default Button_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $DialogResult = Get-UserResponse -Title "Get User Text - Single" -Message "Show this Sample Message Prompt to the User"_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "One")]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [System.Drawing.Icon]$Icon = [System.Drawing.SystemIcons]::Information,_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonLeft,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "One")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonMid = "OK",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonRight_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-UserResponse"_x000D__x000A_  _x000D__x000A_  #region ******** Begin **** $UserResponse **** Begin ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # $UserResponse Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $UserResponseForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $UserResponseForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $UserResponseForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $UserResponseForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $UserResponseForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $UserResponseForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $UserResponseForm.Icon = $PILForm.Icon_x000D__x000A_  $UserResponseForm.KeyPreview = $AllowControl.IsPresent_x000D__x000A_  $UserResponseForm.MaximizeBox = $False_x000D__x000A_  $UserResponseForm.MinimizeBox = $False_x000D__x000A_  $UserResponseForm.Name = "UserResponseForm"_x000D__x000A_  $UserResponseForm.Owner = $PILForm_x000D__x000A_  $UserResponseForm.ShowInTaskbar = $False_x000D__x000A_  $UserResponseForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))_x000D__x000A_  $UserResponseForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $UserResponseForm.Tag = @{ "Cancel" = $False; "Pause" = $False }_x000D__x000A_  $UserResponseForm.Text = $Title_x000D__x000A_  #endregion $UserResponseForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-UserResponseFormKeyDown ********_x000D__x000A_  Function Start-UserResponseFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the UserResponse Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the UserResponse Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-UserResponseFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$UserResponseForm"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $UserResponseForm.Close()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$UserResponseForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-UserResponseFormKeyDown ********_x000D__x000A_  $UserResponseForm.add_KeyDown({ Start-UserResponseFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-UserResponseFormShown ********_x000D__x000A_  Function Start-UserResponseFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $UserResponse Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $UserResponse Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-UserResponseFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$UserResponseForm"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $Sender.Refresh()_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$UserResponseForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-UserResponseFormShown ********_x000D__x000A_  $UserResponseForm.add_Shown({ Start-UserResponseFormShown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Controls for $UserResponse Form ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # $UserResponse Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $UserResponsePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponsePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponseForm.Controls.Add($UserResponsePanel)_x000D__x000A_  $UserResponsePanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponsePanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $UserResponsePanel.Name = "UserResponsePanel"_x000D__x000A_  #endregion $UserResponsePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  _x000D__x000A_  #region ******** $UserResponsePanel Controls ********_x000D__x000A_  _x000D__x000A_  #region $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()_x000D__x000A_  $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()_x000D__x000A_  $UserResponsePanel.Controls.Add($UserResponsePictureBox)_x000D__x000A_  $UserResponsePictureBox.AutoSize = $False_x000D__x000A_  $UserResponsePictureBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $UserResponsePictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponsePictureBox.Image = $Icon_x000D__x000A_  $UserResponsePictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_  $UserResponsePictureBox.Name = "UserResponsePictureBox"_x000D__x000A_  $UserResponsePictureBox.Size = [System.Drawing.Size]::New(32, 32)_x000D__x000A_  $UserResponsePictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage_x000D__x000A_  #endregion $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()_x000D__x000A_  _x000D__x000A_  #region $UserResponseLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $UserResponseLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $UserResponsePanel.Controls.Add($UserResponseLabel)_x000D__x000A_  $UserResponseLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponseLabel.Font = [MyConfig]::Font.Regular_x000D__x000A_  $UserResponseLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_  $UserResponseLabel.Location = [System.Drawing.Point]::New(($UserResponsePictureBox.Right + [MyConfig]::FormSpacer), $UserResponsePictureBox.Top)_x000D__x000A_  $UserResponseLabel.Name = "UserResponseLabel"_x000D__x000A_  $UserResponseLabel.Size = [System.Drawing.Size]::New(($UserResponsePanel.ClientSize.Width - ($UserResponseLabel.Left + ([MyConfig]::FormSpacer * 3))), $UserResponsePanel.ClientSize.Width)_x000D__x000A_  $UserResponseLabel.Text = $Message_x000D__x000A_  $UserResponseLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_  #endregion $UserResponseLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  _x000D__x000A_  # Returns the minimum size required to display the text_x000D__x000A_  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($UserResponseLabel.Text, [MyConfig]::Font.Regular, $UserResponseLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_  $UserResponseLabel.Size = [System.Drawing.Size]::New(($UserResponsePanel.ClientSize.Width - ($UserResponseLabel.Left + ([MyConfig]::FormSpacer * 3))), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A_  _x000D__x000A_  #endregion ******** $UserResponsePanel Controls ********_x000D__x000A_  _x000D__x000A_  Switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "One"_x000D__x000A_    {_x000D__x000A_      $UserResponseButtons = 1_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Two"_x000D__x000A_    {_x000D__x000A_      $UserResponseButtons = 2_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Three"_x000D__x000A_    {_x000D__x000A_      $UserResponseButtons = 3_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  # ************************************************_x000D__x000A_  # $UserResponseBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponseForm.Controls.Add($UserResponseBtmPanel)_x000D__x000A_  $UserResponseBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponseBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $UserResponseBtmPanel.Name = "UserResponseBtmPanel"_x000D__x000A_  #endregion $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  _x000D__x000A_  #region ******** $UserResponseBtmPanel Controls ********_x000D__x000A_  _x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($UserResponseBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A_  _x000D__x000A_  #region $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  If (($UserResponseButtons -eq 2) -or ($UserResponseButtons -eq 3))_x000D__x000A_  {_x000D__x000A_    $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    $UserResponseBtmPanel.Controls.Add($UserResponseBtmLeftButton)_x000D__x000A_    $UserResponseBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_    $UserResponseBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_    $UserResponseBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_    $UserResponseBtmLeftButton.DialogResult = $ButtonLeft_x000D__x000A_    $UserResponseBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_    $UserResponseBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_    $UserResponseBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_    $UserResponseBtmLeftButton.Name = "UserResponseBtmLeftButton"_x000D__x000A_    $UserResponseBtmLeftButton.TabIndex = 0_x000D__x000A_    $UserResponseBtmLeftButton.TabStop = $True_x000D__x000A_    $UserResponseBtmLeftButton.Text = "&amp;$($ButtonLeft.ToString())"_x000D__x000A_    $UserResponseBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $UserResponseBtmLeftButton.PreferredSize.Height)_x000D__x000A_    if ($ButtonLeft -eq $ButtonDefault)_x000D__x000A_    {_x000D__x000A_      $UserResponseBtmLeftButton.Select()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  _x000D__x000A_  #region $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  If (($UserResponseButtons -eq 1) -or ($UserResponseButtons -eq 3))_x000D__x000A_  {_x000D__x000A_    $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    $UserResponseBtmPanel.Controls.Add($UserResponseBtmMidButton)_x000D__x000A_    $UserResponseBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_    $UserResponseBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_    $UserResponseBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_    $UserResponseBtmMidButton.DialogResult = $ButtonMid_x000D__x000A_    $UserResponseBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_    $UserResponseBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_    $UserResponseBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_    $UserResponseBtmMidButton.Name = "UserResponseBtmMidButton"_x000D__x000A_    $UserResponseBtmMidButton.TabStop = $True_x000D__x000A_    $UserResponseBtmMidButton.Text = "&amp;$($ButtonMid.ToString())"_x000D__x000A_    $UserResponseBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $UserResponseBtmMidButton.PreferredSize.Height)_x000D__x000A_    if ($ButtonMid -eq $ButtonDefault)_x000D__x000A_    {_x000D__x000A_      $UserResponseBtmMidButton.Select()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  _x000D__x000A_  #region $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  If (($UserResponseButtons -eq 2) -or ($UserResponseButtons -eq 3))_x000D__x000A_  {_x000D__x000A_    $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    $UserResponseBtmPanel.Controls.Add($UserResponseBtmRightButton)_x000D__x000A_    $UserResponseBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_    $UserResponseBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_    $UserResponseBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_    $UserResponseBtmRightButton.DialogResult = $ButtonRight_x000D__x000A_    $UserResponseBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_    $UserResponseBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_    $UserResponseBtmRightButton.Location = [System.Drawing.Point]::New(($UserResponseBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_    $UserResponseBtmRightButton.Name = "UserResponseBtmRightButton"_x000D__x000A_    $UserResponseBtmRightButton.TabIndex = 1_x000D__x000A_    $UserResponseBtmRightButton.TabStop = $True_x000D__x000A_    $UserResponseBtmRightButton.Text = "&amp;$($ButtonRight.ToString())"_x000D__x000A_    $UserResponseBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $UserResponseBtmRightButton.PreferredSize.Height)_x000D__x000A_    if ($ButtonRight -eq $ButtonDefault)_x000D__x000A_    {_x000D__x000A_      $UserResponseBtmRightButton.Select()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  _x000D__x000A_  $UserResponseBtmPanel.ClientSize = [System.Drawing.Size]::New(($UserResponseTextBox.Right + [MyConfig]::FormSpacer), (($UserResponseBtmPanel.Controls[$UserResponseBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  _x000D__x000A_  #endregion ******** $UserResponseBtmPanel Controls ********_x000D__x000A_  _x000D__x000A_  $UserResponseForm.ClientSize = [System.Drawing.Size]::New($UserResponseForm.ClientSize.Width, ($UserResponseForm.ClientSize.Height - ($UserResponsePanel.ClientSize.Height - ([Math]::Max($UserResponsePictureBox.Bottom, $UserResponseLabel.Bottom) + ([MyConfig]::FormSpacer * 2)))))_x000D__x000A_  _x000D__x000A_  #endregion ******** Controls for $UserResponse Form ********_x000D__x000A_  _x000D__x000A_  #endregion ******** End **** $Get-UserResponse **** End ********_x000D__x000A_  _x000D__x000A_  $DialogResult = $UserResponseForm.ShowDialog($PILForm)_x000D__x000A_  [UserResponse]::New(($DialogResult -eq $ButtonDefault), $DialogResult)_x000D__x000A_  _x000D__x000A_  $UserResponseForm.Dispose()_x000D__x000A_  _x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Get-UserResponse"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Prompt</S>
            <Obj N="Value" RefId="113">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Prompt</S>
                <S N="ScriptBlock">{_x000D__x000A_  [Console]::Title = $PWD_x000D__x000A_  "PS$($PSVersionTable.PSVersion.Major)$("&gt;" * ($NestedPromptLevel + 1)) "_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputTextBoxKeyDown</S>
            <Obj N="Value" RefId="114">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputTextBoxKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the TextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the TextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The TextBox Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the TextBox KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))_x000D__x000A_    {_x000D__x000A_      $TextBoxInputBtmLeftButton.PerformClick()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-MyISScriptData</S>
            <Obj N="Value" RefId="115">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-MyISScriptData</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Reads Script Data from the Registry_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Reads Script Data from the Registry_x000D__x000A_    .PARAMETER Script_x000D__x000A_     Name of the Regsitry Key to read the values from. Defaults to the name of the script._x000D__x000A_    .PARAMETER Name_x000D__x000A_     Name of the Value to read_x000D__x000A_    .PARAMETER User_x000D__x000A_      Read from the HKCU Registry Hive_x000D__x000A_    .PARAMETER Computer_x000D__x000A_      Read from the HKLM Registry Hive_x000D__x000A_    .PARAMETER Bitness_x000D__x000A_      Specify 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name"_x000D__x000A__x000D__x000A_      Read the value from the HKCU Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name" -User -Script "ScriptName"_x000D__x000A__x000D__x000A_      Read the value from the HKCU Registry Hive under the Specified Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name" -Computer_x000D__x000A__x000D__x000A_      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name" -Bitness "32" -Script "ScriptName" -Computer_x000D__x000A__x000D__x000A_      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "User")]_x000D__x000A_  param (_x000D__x000A_    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [String[]]$Name = "*",_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "User")]_x000D__x000A_    [Switch]$User,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [Switch]$Computer,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Comp")]_x000D__x000A_    [ValidateSet("32", "64")]_x000D__x000A_    [String]$Bitness = "64"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-MyISScriptData"_x000D__x000A__x000D__x000A_  # Get Default Registry Path_x000D__x000A_  if ($Computer.IsPresent)_x000D__x000A_  {_x000D__x000A_    if ($Bitness -eq "64")_x000D__x000A_    {_x000D__x000A_      $RegPath = "Registry::HKEY_LOCAL_MACHINE\Software"_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $RegPath = "Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node"_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $RegPath = "Registry::HKEY_CURRENT_USER\Software"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Get the values from the registry._x000D__x000A_  Get-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -ErrorAction "SilentlyContinue" | Select-Object -Property $Name_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-MyISScriptData"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionCheckedListBoxMouseDown</S>
            <Obj N="Value" RefId="116">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionCheckedListBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.CheckedListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$CheckedListBoxOptionCheckedListBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($CheckedListBoxOptionCheckedListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $CheckedListBoxOptionContextMenuStrip.Show($CheckedListBoxOptionCheckedListBox, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$CheckedListBoxOptionCheckedListBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListListViewDrawColumnHeader</S>
            <Obj N="Value" RefId="117">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListListViewDrawColumnHeader</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      DrawColumnHeader Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      DrawColumnHeader Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the DrawColumnHeader Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList DrawColumnHeader Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter DrawColumnHeader Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)_x000D__x000A_  $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))_x000D__x000A_  $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit DrawColumnHeader Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ScriptInfoFormShown</S>
            <Obj N="Value" RefId="118">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ScriptInfoFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shown Event for the ScriptInfo Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shown Event for the ScriptInfo Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the Shown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form Shown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ScriptInfoFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Start-ScriptInfoLeftToolStripItemClick -Sender ($ScriptInfoLeftMenuStrip.Items[$DefInfoTopic]) -EventArg $EventArg_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ScriptInfoForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputTextBoxLostFocus</S>
            <Obj N="Value" RefId="119">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputTextBoxLostFocus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      LostFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      LostFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the LostFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox LostFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter LostFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_    {_x000D__x000A_      $Sender.Text = $Sender.Tag.HintText_x000D__x000A_      $Sender.Tag.HintEnabled = $True_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $Sender.Tag.HintEnabled = $False_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit LostFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationBtmRightButtonClick</S>
            <Obj N="Value" RefId="120">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ThreadConfigurationForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckBoxOptionFormKeyDown</S>
            <Obj N="Value" RefId="121">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckBoxOptionFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the CheckBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the CheckBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$CheckBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $CheckBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$CheckBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationFormShown</S>
            <Obj N="Value" RefId="122">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $Sender.Refresh()_x000D__x000A_    Start-ThreadConfigurationBtmMidButtonClick -Sender $ThreadConfigurationBtmMidButton -EventArg "Reset"_x000D__x000A_    $ThreadConfigurationBtmLeftButton.Select()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ThreadConfigurationForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-CheckedListBoxOption</S>
            <Obj N="Value" RefId="123">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-CheckedListBoxOption</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-CheckedListBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-CheckedListBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-CheckedListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ListView_x000D__x000A_    .PARAMETER Sorted_x000D__x000A_      Sort ListView_x000D__x000A_    .PARAMETER DisplayMember_x000D__x000A_      Name of the Property to Display in the CheckedListBox_x000D__x000A_    .PARAMETER ValueMember_x000D__x000A_      Name of the Property for the Value_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected CheckedListBox Items_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-CheckedListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Get-CheckedListBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Items = Get-Service_x000D__x000A_      $DialogResult = CheckedGet-CheckedListBoxOption -Title "Get CheckListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7]_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [Switch]$Sorted,_x000D__x000A_    [String]$DisplayMember = "Text",_x000D__x000A_    [String]$ValueMember = "Value",_x000D__x000A_    [Object[]]$Selected,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [Int]$Height = 20,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$Required_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-CheckedListBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** CheckedListBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckedListBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckedListBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $CheckedListBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $CheckedListBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $CheckedListBoxOptionForm.KeyPreview = $True_x000D__x000A_  $CheckedListBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $CheckedListBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $CheckedListBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $CheckedListBoxOptionForm.Name = "CheckedListBoxOptionForm"_x000D__x000A_  $CheckedListBoxOptionForm.Owner = $PILForm_x000D__x000A_  $CheckedListBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $CheckedListBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $CheckedListBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionFormKeyDown ********_x000D__x000A_  function Start-CheckedListBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$CheckedListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$CheckedListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionFormKeyDown ********_x000D__x000A_  $CheckedListBoxOptionForm.add_KeyDown({ Start-CheckedListBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionFormShown ********_x000D__x000A_  function Start-CheckedListBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$CheckedListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$CheckedListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionFormShown ********_x000D__x000A_  $CheckedListBoxOptionForm.add_Shown({ Start-CheckedListBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for CheckedListBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionForm.Controls.Add($CheckedListBoxOptionPanel)_x000D__x000A_  $CheckedListBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckedListBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $CheckedListBoxOptionPanel.Name = "CheckedListBoxOptionPanel"_x000D__x000A_  #endregion $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckedListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckedListBoxOptionPanel.Controls.Add($CheckedListBoxOptionLabel)_x000D__x000A_    $CheckedListBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $CheckedListBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $CheckedListBoxOptionLabel.Name = "CheckedListBoxOptionLabel"_x000D__x000A_    $CheckedListBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $CheckedListBoxOptionLabel.Text = $Message_x000D__x000A_    $CheckedListBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($CheckedListBoxOptionLabel.Text, [MyConfig]::Font.Regular, $CheckedListBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $CheckedListBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $CheckedListBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $CheckedListBoxOptionPanel.Controls.Add($CheckedListBoxOptionGroupBox)_x000D__x000A_  $CheckedListBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckedListBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $CheckedListBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $CheckedListBoxOptionGroupBox.Name = "CheckedListBoxOptionGroupBox"_x000D__x000A_  $CheckedListBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), ($CheckedListBoxOptionPanel.Height - ($CheckedListBoxOptionGroupBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  #endregion $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckedListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()_x000D__x000A_  $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()_x000D__x000A_  $CheckedListBoxOptionGroupBox.Controls.Add($CheckedListBoxOptionCheckedListBox)_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.AutoSize = $True_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.CheckOnClick = $True_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.DisplayMember = $DisplayMember_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Name = "CheckedListBoxOptionCheckedListBox"_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Sorted = $Sorted.IsPresent_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.TabIndex = 0_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Tag = $Null_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.ValueMember = $ValueMember_x000D__x000A_  #endregion $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Items.AddRange($Items)_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Selected"))_x000D__x000A_  {_x000D__x000A_    $CheckedListBoxOptionCheckedListBox.Tag = @($Items | Where-Object -FilterScript { $PSItem -in $Selected})_x000D__x000A_    $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $CheckedListBoxOptionCheckedListBox.Tag = @()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionCheckedListBoxMouseDown ********_x000D__x000A_  function Start-CheckedListBoxOptionCheckedListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.CheckedListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$CheckedListBoxOptionCheckedListBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($CheckedListBoxOptionCheckedListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $CheckedListBoxOptionContextMenuStrip.Show($CheckedListBoxOptionCheckedListBox, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$CheckedListBoxOptionCheckedListBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionCheckedListBoxMouseDown ********_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.add_MouseDown({ Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($CheckedListBoxOptionGroupBox.ClientSize.Width, ($CheckedListBoxOptionCheckedListBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$CheckedListBoxOptionListView.Controls.Add($CheckedListBoxOptionContextMenuStrip)_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$CheckedListBoxOptionContextMenuStrip.Enabled = $True_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.Name = "CheckedListBoxOptionContextMenuStrip"_x000D__x000A_  #endregion $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionContextMenuStripOpening ********_x000D__x000A_  function Start-CheckedListBoxOptionContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the CheckedListBoxOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the CheckedListBoxOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$CheckedListBoxOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$CheckedListBoxOptionContextMenuStrip"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionContextMenuStripOpening ********_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.add_Opening({Start-CheckedListBoxOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionContextMenuStripItemClick ********_x000D__x000A_  function Start-CheckedListBoxOptionContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "CheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_        (0..$($CheckedListBoxOptionCheckedListBox.Items.Count - 1)) | Where-Object -FilterScript { $PSItem -notin $TmpCheckedItems } | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $True) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnCheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_        $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionContextMenuStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $CheckedListBoxOptionContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $CheckedListBoxOptionContextMenuStrip -Text "Uncheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $CheckedListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($CheckedListBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($CheckedListBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckedListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionForm.Controls.Add($CheckedListBoxOptionBtmPanel)_x000D__x000A_  $CheckedListBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Name = "CheckedListBoxOptionBtmPanel"_x000D__x000A_  #endregion $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckedListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($CheckedListBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmLeftButton)_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Name = "CheckedListBoxOptionBtmLeftButton"_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckedListBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-CheckedListBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($CheckedListBoxOptionCheckedListBox.CheckedItems.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($CheckedListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.add_Click({ Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmMidButton)_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($CheckedListBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Name = "CheckedListBoxOptionBtmMidButton"_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $CheckedListBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionBtmMidButtonClick ********_x000D__x000A_  function Start-CheckedListBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_    $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }_x000D__x000A_    if ($CheckedListBoxOptionCheckedListBox.Tag.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionBtmMidButtonClick ********_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.add_Click({ Start-CheckedListBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmRightButton)_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($CheckedListBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Name = "CheckedListBoxOptionBtmRightButton"_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckedListBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionBtmRightButtonClick ********_x000D__x000A_  function Start-CheckedListBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionBtmRightButtonClick ********_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.add_Click({ Start-CheckedListBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($CheckedListBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($CheckedListBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckedListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionForm.ClientSize = [System.Drawing.Size]::New($CheckedListBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $CheckedListBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for CheckedListBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** CheckedListBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $CheckedListBoxOptionForm.ShowDialog()_x000D__x000A_  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    [CheckedListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $CheckedListBoxOptionCheckedListBox.CheckedItems)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [CheckedListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @())_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-CheckedListBoxOption"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionFormShown</S>
            <Obj N="Value" RefId="124">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$CheckedListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$CheckedListBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionTextBoxLostFocus</S>
            <Obj N="Value" RefId="125">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionTextBoxLostFocus</S>
                <S N="ScriptBlock">{_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          LostFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          LostFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the LostFocus Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox LostFocus Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter LostFocus Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_      If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_      {_x000D__x000A_        $Sender.Text = $Sender.Tag.HintText_x000D__x000A_        $Sender.Tag.HintEnabled = $True_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A__x000D__x000A_        $ListViewOptionListView.Items.Clear()_x000D__x000A_        $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $Sender.Tag.HintEnabled = $False_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A__x000D__x000A_        $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $ListViewOptionTextBox.Text) -or ($PSItem.SubItems[1].Text -Match $ListViewOptionTextBox.Text) })_x000D__x000A_        $ListViewOptionListView.Items.Clear()_x000D__x000A_        $ListViewOptionListView.Items.AddRange($TmpNewList)_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit LostFocus Event for `$ListViewOptionTextBox"_x000D__x000A_    }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Install-MyModule</S>
            <Obj N="Value" RefId="126">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Install-MyModule</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Checks for, installs if required, and imports the specified PowerShell module._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function checks if the specified module is imported or installed. If not, it installs the module from the given repository and imports it. Supports custom repositories and installation scopes._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the module to check, install, and import._x000D__x000A_    .PARAMETER Version_x000D__x000A_      The minimum required version of the module. Defaults to "0.0.0.0" (any version)._x000D__x000A_    .PARAMETER Scope_x000D__x000A_      Specifies whether to install/import the module for AllUsers or CurrentUser. Defaults to "AllUsers"._x000D__x000A_    .PARAMETER Repository_x000D__x000A_      The name of the repository to use for installation. Defaults to "sie-powershell"._x000D__x000A_    .PARAMETER Install_x000D__x000A_      If specified, performs the installation of the module if not present._x000D__x000A_    .PARAMETER NoImport_x000D__x000A_      If specified, Do not Import the specified module_x000D__x000A_    .PARAMETER SourceLocation_x000D__x000A_      The URL of the repository source location. Used when registering a custom repository._x000D__x000A_    .PARAMETER PublishLocation_x000D__x000A_      The URL of the repository publish location. Used when registering a custom repository._x000D__x000A_    .EXAMPLE_x000D__x000A_      Install-MyModule -Name "MSAL.PS" -Version "2.0.0.0" -Scope "AllUsers" -Install_x000D__x000A_      Checks for MSAL.PS module, installs version 2.0.0.0 or higher for all users if required, and imports it._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Name,_x000D__x000A_    [Version]$Version = "0.0.0.0",_x000D__x000A_    [ValidateSet("AllUsers", "CurrentUser")]_x000D__x000A_    [String]$Scope = "AllUsers",_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Default")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Custom")]_x000D__x000A_    [String]$Repository = "PSGallery",_x000D__x000A_    [Switch]$Install,_x000D__x000A_    [Switch]$NoImport,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Custom")]_x000D__x000A_    [String]$SourceLocation,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Custom")]_x000D__x000A_    [String]$PublishLocation_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Install-MyModule"_x000D__x000A__x000D__x000A_  # Zero Verion for Checks_x000D__x000A_  $ZeroVersion = [Version]::new(0, 0, 0, 0)_x000D__x000A__x000D__x000A_  # Get Module Common Parameters_x000D__x000A_  $GMParams = @{_x000D__x000A_    "Name"          = $Name_x000D__x000A_    "WarningAction" = "SilentlyContinue"_x000D__x000A_    "ErrorAction"   = "SilentlyContinue"_x000D__x000A_    "Verbose"       = $False_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Install Module Parameters_x000D__x000A_  $IMParams = @{_x000D__x000A_    "Name"          = $Name_x000D__x000A_    "WarningAction" = "SilentlyContinue"_x000D__x000A_    "ErrorAction"   = "SilentlyContinue"_x000D__x000A_    "Verbose"       = $False_x000D__x000A_  }_x000D__x000A_  If ($PSBoundParameters.ContainsKey("Version"))_x000D__x000A_  {_x000D__x000A_    $IMParams.Add("RequiredVersion", $Version)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Check if Module is Already Imported_x000D__x000A_  $ChkInstalled = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_  If ([String]::IsNullOrEmpty($ChkInstalled.Version))_x000D__x000A_  {_x000D__x000A_    # Get Installed Module Versions_x000D__x000A_    $ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { ($PSItem.Version -eq $Version) -or ($Version -eq $ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_    If ([String]::IsNullOrEmpty($ChkInstalled.Version))_x000D__x000A_    {_x000D__x000A_      If (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and ($Scope -eq "AllUsers")) -or ($Scope -eq "CurrentUser")) -and $Install.IsPresent)_x000D__x000A_      {_x000D__x000A_        # Check if Repo Exists_x000D__x000A_        $ChkRepo = Get-PSRepository -Name $Repository -ErrorAction SilentlyContinue_x000D__x000A_        If ([String]::IsNullOrEmpty($ChkRepo.Name))_x000D__x000A_        {_x000D__x000A_          # Add Custom Repo_x000D__x000A_          Register-PSRepository -Name $Repository -SourceLocation $SourceLocation -PublishLocation $PublishLocation -InstallationPolicy "Trusted"_x000D__x000A_        }_x000D__x000A_        # Install / Update Module_x000D__x000A_        Install-Module @IMParams -Repository $Repository -Scope $Scope -Force -AllowClobber | Out-Null_x000D__x000A_        If ($Repository -ne "PSGallery")_x000D__x000A_        {_x000D__x000A_          # Remove Custom Repo_x000D__x000A_          Unregister-PSRepository -Name $Repository_x000D__x000A_        }_x000D__x000A_        $ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { ($PSItem.Version -eq $Version) -or ($Version -eq $ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_        If ([String]::IsNullOrEmpty($ChkInstalled.Version))_x000D__x000A_        {_x000D__x000A_          # Module Installed Failed_x000D__x000A_          [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install Failed" }_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          If ($NoImport.IsPresent)_x000D__x000A_          {_x000D__x000A_            [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install Succeeded" }_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            # Import Module_x000D__x000A_            Import-Module @IMParams_x000D__x000A_            # Verify Imported Module_x000D__x000A_            $ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_            If ($ChkImported.Version -eq $ChkInstalled.Version)_x000D__x000A_            {_x000D__x000A_              # Module Install / Import Succeeded_x000D__x000A_              [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install / Import Succeeded" }_x000D__x000A_            }_x000D__x000A_            Else_x000D__x000A_            {_x000D__x000A_              # Module Install / Import Failed_x000D__x000A_              [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install / Import Failed" }_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Module Install / Import Failed_x000D__x000A_        [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install / Import Not Installed" }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      If ($NoImport.IsPresent)_x000D__x000A_      {_x000D__x000A_        [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install Succeeded" }_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Import Module_x000D__x000A_        Import-Module @IMParams_x000D__x000A_        # Verify Imported Module_x000D__x000A_        $ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_        If ($ChkImported.Version -eq $ChkInstalled.Version)_x000D__x000A_        {_x000D__x000A_          # Module Import Succeeded_x000D__x000A_          [PSCustomObject]@{ "Success" = $True; "Message" = "Module Import Succeeded" }_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          # Module Import Failed_x000D__x000A_          [PSCustomObject]@{ "Success" = $False; "Message" = "Module Import Failed" }_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    # Module Previously Imported_x000D__x000A_    If (($ChkInstalled.Version -eq $Version) -or ($Version -eq $ZeroVersion))_x000D__x000A_    {_x000D__x000A_      # Correct Module Version Imported_x000D__x000A_      [PSCustomObject]@{ "Success" = $True; "Message" = "Correct Version Previously Loaded" }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      # Wrong Module Version Imported_x000D__x000A_      [PSCustomObject]@{ "Success" = $False; "Message" = "Wrong Version Previously Loaded" }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Install-MyModule"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RadioButtonOptionFormShown</S>
            <Obj N="Value" RefId="127">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RadioButtonOptionFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the RadioButtonOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the RadioButtonOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$RadioButtonOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$RadioButtonOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-AlertMessageFormKeyDown</S>
            <Obj N="Value" RefId="128">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-AlertMessageFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the AlertMessage Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the AlertMessage Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-AlertMessageFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$AlertMessageForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$AlertMessageForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCModulesListBoxSelectedIndexChanged</S>
            <Obj N="Value" RefId="129">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCModulesListBoxSelectedIndexChanged</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCModules ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCModules ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionContextMenuStripItemClick</S>
            <Obj N="Value" RefId="130">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "CheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_        (0..$($CheckedListBoxOptionCheckedListBox.Items.Count - 1)) | Where-Object -FilterScript { $PSItem -notin $TmpCheckedItems } | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $True) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnCheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_        $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionContextMenuStripItem"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionFormShown</S>
            <Obj N="Value" RefId="131">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ListViewOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ListViewOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ListViewOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ListViewOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-MultiTextBoxInput</S>
            <Obj N="Value" RefId="132">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-MultiTextBoxInput</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-MultiTextBoxInput_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-MultiTextBoxInput_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-MultiTextBoxInput Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER ReturnTitle_x000D__x000A_      Title of Values Group Box_x000D__x000A_    .PARAMETER OrderedItems_x000D__x000A_      Ordered List (HashTable) if Names and Values_x000D__x000A_    .PARAMETER ValidCars_x000D__x000A_      Valid Inputy Chatacters_x000D__x000A_    .PARAMETER Width_x000D__x000A_      With of Get-MultiTextBoxInput Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .PARAMETER AllRequired_x000D__x000A_      All Values are Required_x000D__x000A_    .EXAMPLE_x000D__x000A_      $DialogResult = Get-MultiTextBoxInput -Title "Get Multi Text Input" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message,_x000D__x000A_    [String]$ReturnTitle,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,_x000D__x000A_    [String]$ValidChars = "[\s\w\d\.\-_]",_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$AllRequired_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-MultiTextBoxInput"_x000D__x000A__x000D__x000A_  #region ******** Begin **** MultiTextBoxInput **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInput Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $MultiTextBoxInputForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $MultiTextBoxInputForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $MultiTextBoxInputForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $MultiTextBoxInputForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $MultiTextBoxInputForm.Icon = $PILForm.Icon_x000D__x000A_  $MultiTextBoxInputForm.KeyPreview = $True_x000D__x000A_  $MultiTextBoxInputForm.MaximizeBox = $False_x000D__x000A_  $MultiTextBoxInputForm.MinimizeBox = $False_x000D__x000A_  $MultiTextBoxInputForm.Name = "MultiTextBoxInputForm"_x000D__x000A_  $MultiTextBoxInputForm.Owner = $PILForm_x000D__x000A_  $MultiTextBoxInputForm.ShowInTaskbar = $False_x000D__x000A_  $MultiTextBoxInputForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))_x000D__x000A_  $MultiTextBoxInputForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $MultiTextBoxInputForm.Tag = $AllRequired.IsPresent_x000D__x000A_  $MultiTextBoxInputForm.Text = $Title_x000D__x000A_  #endregion $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputFormKeyDown ********_x000D__x000A_  Function Start-MultiTextBoxInputFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputFormKeyDown ********_x000D__x000A_  $MultiTextBoxInputForm.add_KeyDown({ Start-MultiTextBoxInputFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputFormShown ********_x000D__x000A_  Function Start-MultiTextBoxInputFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$MultiTextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$MultiTextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputFormShown ********_x000D__x000A_  $MultiTextBoxInputForm.add_Shown({ Start-MultiTextBoxInputFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for MultiTextBoxInput Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInput Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputForm.Controls.Add($MultiTextBoxInputPanel)_x000D__x000A_  $MultiTextBoxInputPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $MultiTextBoxInputPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $MultiTextBoxInputPanel.Name = "MultiTextBoxInputPanel"_x000D__x000A_  $MultiTextBoxInputPanel.Text = "MultiTextBoxInputPanel"_x000D__x000A_  #endregion $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $MultiTextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputPanel.Controls.Add($MultiTextBoxInputLabel)_x000D__x000A_    $MultiTextBoxInputLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $MultiTextBoxInputLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $MultiTextBoxInputLabel.Name = "SearchTextMainLabel"_x000D__x000A_    $MultiTextBoxInputLabel.Size = [System.Drawing.Size]::New(($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $MultiTextBoxInputLabel.Text = $Message_x000D__x000A_    $MultiTextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_    #endregion $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($MultiTextBoxInputLabel.Text, [MyConfig]::Font.Regular, $MultiTextBoxInputLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $MultiTextBoxInputLabel.Size = [System.Drawing.Size]::New(($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $MultiTextBoxInputLabel.Bottom_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInput GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $MultiTextBoxInputPanel.Controls.Add($MultiTextBoxInputGroupBox)_x000D__x000A_  $MultiTextBoxInputGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $MultiTextBoxInputGroupBox.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $MultiTextBoxInputGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $MultiTextBoxInputGroupBox.Name = "MultiTextBoxInputGroupBox"_x000D__x000A_  $MultiTextBoxInputGroupBox.Text = $ReturnTitle_x000D__x000A_  $MultiTextBoxInputGroupBox.Width = ($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))_x000D__x000A_  #endregion $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  $TmpLabelWidth = 0_x000D__x000A_  $Count = 0_x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    #region $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputGroupBox.Controls.Add($MultiTextBoxInputLabel)_x000D__x000A_    $MultiTextBoxInputLabel.AutoSize = $True_x000D__x000A_    $MultiTextBoxInputLabel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $MultiTextBoxInputLabel.Font = [MyConfig]::Font.Regular_x000D__x000A_    $MultiTextBoxInputLabel.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_    $MultiTextBoxInputLabel.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + (($MultiTextBoxInputLabel.PreferredHeight + [MyConfig]::FormSpacer) * $Count)))_x000D__x000A_    $MultiTextBoxInputLabel.Name = "$($Key)Label"_x000D__x000A_    $MultiTextBoxInputLabel.Tag = $Null_x000D__x000A_    $MultiTextBoxInputLabel.Text = "$($Key):"_x000D__x000A_    $MultiTextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight_x000D__x000A_    #endregion $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    $TmpLabelWidth = [Math]::Max($TmpLabelWidth, $MultiTextBoxInputLabel.Width)_x000D__x000A_    $Count += 1_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxGotFocus ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxGotFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      GotFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      GotFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the GotFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox GotFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter GotFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ($Sender.Tag.HintEnabled)_x000D__x000A_    {_x000D__x000A_      $Sender.Text = ""_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit GotFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxGotFocus ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxKeyDown ********_x000D__x000A_  function Start-MultiTextBoxInputTextBoxKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the GetMultiValueMain TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the GetMultiValueMain TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The TextBox Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the TextBox KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputBtmLeftButton.PerformClick()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyDown ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxKeyPress ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxKeyPress_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyPress Event for the MultiTextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyPress Event for the MultiTextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TextBox Control that fired the KeyPress Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TextBox KeyPress Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-MultiTextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyPress Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X_x000D__x000A_    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyPress Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyPress ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxKeyUp ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxKeyUp_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyUp Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyUp Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the KeyUp Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox KeyUp Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyUp Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyUp Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyUp ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxLostFocus ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxLostFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      LostFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      LostFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the LostFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox LostFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter LostFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_    {_x000D__x000A_      $Sender.Text = $Sender.Tag.HintText_x000D__x000A_      $Sender.Tag.HintEnabled = $True_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $Sender.Tag.HintEnabled = $False_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit LostFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxLostFocus ********_x000D__x000A__x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    $TmpLabel = $MultiTextBoxInputGroupBox.Controls["$($Key)Label"]_x000D__x000A_    $TmpLabel.AutoSize = $False_x000D__x000A_    $TmpLabel.Size = [System.Drawing.Size]::New($TmpLabelWidth, $TmpLabel.PreferredHeight)_x000D__x000A__x000D__x000A_    #region $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $MultiTextBoxInputGroupBox.Controls.Add($MultiTextBoxInputTextBox)_x000D__x000A_    $MultiTextBoxInputTextBox.AutoSize = $False_x000D__x000A_    $MultiTextBoxInputTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_    $MultiTextBoxInputTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $MultiTextBoxInputTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    $MultiTextBoxInputTextBox.Location = [System.Drawing.Size]::New(($TmpLabel.Right + [MyConfig]::FormSpacer), $TmpLabel.Top)_x000D__x000A_    $MultiTextBoxInputTextBox.MaxLength = 25_x000D__x000A_    $MultiTextBoxInputTextBox.Name = "$($Key)"_x000D__x000A_    $MultiTextBoxInputTextBox.TabStop = $True_x000D__x000A_    $MultiTextBoxInputTextBox.Text = $OrderedItems[$Key]_x000D__x000A_    $MultiTextBoxInputTextBox.Tag = @{ "HintText" = "Enter Value for '$($Key)'"; "HintEnabled" = ($MultiTextBoxInputTextBox.TextLength -eq 0); "Value" = $OrderedItems[$Key] }_x000D__x000A_    $MultiTextBoxInputTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left_x000D__x000A_    $MultiTextBoxInputTextBox.Size = [System.Drawing.Size]::New(($MultiTextBoxInputGroupBox.ClientSize.Width - ($TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), $TmpLabel.Height)_x000D__x000A_    #endregion $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_    $MultiTextBoxInputTextBox.add_GotFocus({ Start-MultiTextBoxInputTextBoxGotFocus -Sender $This -EventArg $PSItem})_x000D__x000A_    $MultiTextBoxInputTextBox.add_KeyDown({ Start-MultiTextBoxInputTextBoxKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_    $MultiTextBoxInputTextBox.add_KeyPress({ Start-MultiTextBoxInputTextBoxKeyPress -Sender $This -EventArg $PSItem })_x000D__x000A_    $MultiTextBoxInputTextBox.add_KeyUp({ Start-MultiTextBoxInputTextBoxKeyUp -Sender $This -EventArg $PSItem })_x000D__x000A_    $MultiTextBoxInputTextBox.add_LostFocus({ Start-MultiTextBoxInputTextBoxLostFocus -Sender $This -EventArg $PSItem })_x000D__x000A_    Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputTextBox -EventArg $EventArg_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $MultiTextBoxInputGroupBox.ClientSize = [System.Drawing.Size]::New($MultiTextBoxInputGroupBox.ClientSize.Width, (($MultiTextBoxInputGroupBox.Controls[$MultiTextBoxInputGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($MultiTextBoxInputTextBox.Right + [MyConfig]::FormSpacer), ($MultiTextBoxInputGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $MultiTextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInputBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputForm.Controls.Add($MultiTextBoxInputBtmPanel)_x000D__x000A_  $MultiTextBoxInputBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $MultiTextBoxInputBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $MultiTextBoxInputBtmPanel.Name = "MultiTextBoxInputBtmPanel"_x000D__x000A_  $MultiTextBoxInputBtmPanel.Text = "MultiTextBoxInputBtmPanel"_x000D__x000A_  #endregion $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $MultiTextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($MultiTextBoxInputBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmLeftButton)_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Name = "MultiTextBoxInputBtmLeftButton"_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.TabIndex = 1_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.TabStop = $True_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $MultiTextBoxInputBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputBtmLeftButtonClick ********_x000D__x000A_  Function Start-MultiTextBoxInputBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TmpValidCheck = $MultiTextBoxInputForm.Tag_x000D__x000A_    ForEach ($Key In @($OrderedItems.Keys))_x000D__x000A_    {_x000D__x000A_      $TmpItemValue = "$($MultiTextBoxInputGroupBox.Controls[$Key].Text)".Trim()_x000D__x000A_      $ChkItemValue = (-not (([String]::IsNullOrEmpty($TmpItemValue) -or $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled)))_x000D__x000A_      if ($ChkItemValue)_x000D__x000A_      {_x000D__x000A_        $OrderedItems[$Key] = $TmpItemValue_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $OrderedItems[$Key] = $Null_x000D__x000A_      }_x000D__x000A__x000D__x000A_      if ($MultiTextBoxInputForm.Tag)_x000D__x000A_      {_x000D__x000A_        $TmpValidCheck = $ChkItemValue -and $TmpValidCheck_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TmpValidCheck = $ChkItemValue -or $TmpValidCheck_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    If ($TmpValidCheck)_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($MultiTextBoxInputForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputBtmLeftButtonClick ********_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.add_Click({ Start-MultiTextBoxInputBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmMidButton)_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $MultiTextBoxInputBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $MultiTextBoxInputBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Location = [System.Drawing.Point]::New(($MultiTextBoxInputBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Name = "MultiTextBoxInputBtmMidButton"_x000D__x000A_  $MultiTextBoxInputBtmMidButton.TabIndex = 2_x000D__x000A_  $MultiTextBoxInputBtmMidButton.TabStop = $True_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Text = $ButtonMid_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $MultiTextBoxInputBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputBtmMidButtonClick ********_x000D__x000A_  Function Start-MultiTextBoxInputBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($Key In @($OrderedItems.Keys))_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputGroupBox.Controls[$Key].Text = $MultiTextBoxInputGroupBox.Controls[$Key].Tag.Value_x000D__x000A_      $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled = ($MultiTextBoxInputGroupBox.TextLength -eq 0)_x000D__x000A_      Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputGroupBox.Controls[$Key] -EventArg $EventArg_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputBtmMidButtonClick ********_x000D__x000A_  $MultiTextBoxInputBtmMidButton.add_Click({ Start-MultiTextBoxInputBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmRightButton)_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $MultiTextBoxInputBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $MultiTextBoxInputBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Location = [System.Drawing.Point]::New(($MultiTextBoxInputBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Name = "MultiTextBoxInputBtmRightButton"_x000D__x000A_  $MultiTextBoxInputBtmRightButton.TabIndex = 3_x000D__x000A_  $MultiTextBoxInputBtmRightButton.TabStop = $True_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Text = $ButtonRight_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $MultiTextBoxInputBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputBtmRightButtonClick ********_x000D__x000A_  Function Start-MultiTextBoxInputBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputBtmRightButtonClick ********_x000D__x000A_  $MultiTextBoxInputBtmRightButton.add_Click({ Start-MultiTextBoxInputBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $MultiTextBoxInputBtmPanel.ClientSize = [System.Drawing.Size]::New(($MultiTextBoxInputBtmRightButton.Right + [MyConfig]::FormSpacer), ($MultiTextBoxInputBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $MultiTextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $MultiTextBoxInputForm.ClientSize = [System.Drawing.Size]::New($MultiTextBoxInputForm.ClientSize.Width, ($TempClientSize.Height + $MultiTextBoxInputBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for MultiTextBoxInput Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** MultiTextBoxInput **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $MultiTextBoxInputForm.ShowDialog($PILForm)_x000D__x000A_  [MultiTextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $OrderedItems)_x000D__x000A__x000D__x000A_  $MultiTextBoxInputForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-MultiTextBoxInput"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTopMenuStripItemClick</S>
            <Obj N="Value" RefId="133">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTopMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the PILTop MenuStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the PILTop MenuStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Top Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Top Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILTopMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  Switch ($Sender.Name)_x000D__x000A_  {_x000D__x000A_    "AddList"_x000D__x000A_    {_x000D__x000A_      #region Add New Items List_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Add New Items for Processing"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      $DialogResult = Get-TextBoxInput -Title "Get Item List" -Message "Enter the list of items to add for processing" -Multi -NoDuplicates_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        $NewCount = 0_x000D__x000A_        $TmpSubItems = @(" ") * ([MyRuntime]::MaxColumns)_x000D__x000A_        ForEach ($TmpItem In $DialogResult.Items)_x000D__x000A_        {_x000D__x000A_          If (-not $PILItemListListView.Items.ContainsKey($TmpItem))_x000D__x000A_          {_x000D__x000A_            $TmpListItem = [System.Windows.Forms.ListViewItem]::New($TmpItem, "StatusInfo16Icon")_x000D__x000A_            $TmpListItem.Name = $TmpItem_x000D__x000A_            $TmpListItem.Font = [MyConfig]::Font.Regular_x000D__x000A_            $TmpListItem.SubItems.AddRange($TmpSubItems)_x000D__x000A_            [Void]$PILItemListListView.Items.Add($TmpListItem)_x000D__x000A_            $NewCount++_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Success_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Added $($NewCount) New Items for Processing"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Adding New Items for Processing"_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_      #endregion Add New Items List_x000D__x000A_    }_x000D__x000A_    "ImportList"_x000D__x000A_    {_x000D__x000A_      #region Import Item List_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Importing Item List"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Get File to Import_x000D__x000A_      $PILOpenFileDialog.FileName = ""_x000D__x000A_      $PILOpenFileDialog.Filter = "CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|Supported Files|*.csv;*.txt|All Files (*.*)|*.*"_x000D__x000A_      $PILOpenFileDialog.FilterIndex = 3_x000D__x000A_      $PILOpenFileDialog.Multiselect = $False_x000D__x000A_      $PILOpenFileDialog.Title = "Select an Item List Import File"_x000D__x000A_      $PILOpenFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        Try_x000D__x000A_        {_x000D__x000A_          If ([System.IO.path]::GetExtension($PILOpenFileDialog.SafeFileName) -eq ".csv")_x000D__x000A_          {_x000D__x000A_            $TmpCSV = Import-Csv -Path $PILOpenFileDialog.FileName_x000D__x000A_            If ($TmpCSV.Count -gt 0)_x000D__x000A_            {_x000D__x000A_              $TmpColNames = @($TmpCSV[0].PSObject.Properties)_x000D__x000A_              If ($TmpColNames.Count -gt 1)_x000D__x000A_              {_x000D__x000A_                $DialogResult = Get-ComboBoxOption -Title "Select Item Column Name" -Message "Select the CSV Column Name that has the Lost of Items you want to Import." -SelectText "Select the CSV Column Name" -Items $TmpColNames -DisplayMember "Name" -ValueMember "MemberType"_x000D__x000A_                If ($DialogResult.Success)_x000D__x000A_                {_x000D__x000A_                  $TmpColName = $DialogResult.Item.Name_x000D__x000A_                }_x000D__x000A_                Else_x000D__x000A_                {_x000D__x000A_                  $TmpColName = "No Column Was Selected"_x000D__x000A_                }_x000D__x000A_              }_x000D__x000A_              Else_x000D__x000A_              {_x000D__x000A_                $TmpColName = $TmpColNames[0].Name_x000D__x000A_              }_x000D__x000A_              _x000D__x000A_              $TmpItems = @($TmpCSV | Select-Object -ExpandProperty $TmpColName)_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            $TmpItems = @(Get-Content -Path $PILOpenFileDialog.FileName)_x000D__x000A_          }_x000D__x000A_          _x000D__x000A_          If ($TmpItems.Count -eq 0)_x000D__x000A_          {_x000D__x000A_            $PILBtmStatusStrip.Items["Status"].Text = "No Items were Found to Import"_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            $NewCount = 0_x000D__x000A_            $TmpSubItems = @(" ") * ([MyRuntime]::MaxColumns)_x000D__x000A_            ForEach ($TmpItem In $TmpItems)_x000D__x000A_            {_x000D__x000A_              If (-not $PILItemListListView.Items.ContainsKey($TmpItem))_x000D__x000A_              {_x000D__x000A_                $TmpListItem = [System.Windows.Forms.ListViewItem]::New($TmpItem, "StatusInfo16Icon")_x000D__x000A_                $TmpListItem.Name = $TmpItem_x000D__x000A_                $TmpListItem.Font = [MyConfig]::Font.Regular_x000D__x000A_                $TmpListItem.SubItems.AddRange($TmpSubItems)_x000D__x000A_                [Void]$PILItemListListView.Items.Add($TmpListItem)_x000D__x000A_                $NewCount++_x000D__x000A_              }_x000D__x000A_            }_x000D__x000A_            _x000D__x000A_            # Success_x000D__x000A_            $PILBtmStatusStrip.Items["Status"].Text = "Successfully Added $($NewCount) New Items for Processing"_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Catch_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Error Importing Item List"_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILOpenFileDialog.FileName)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Importing Item List"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Import Item List_x000D__x000A_    }_x000D__x000A_    "LoadExport"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Load Exported Process-ItemList Data"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Get File to Import_x000D__x000A_      $PILOpenFileDialog.FileName = ""_x000D__x000A_      $PILOpenFileDialog.Filter = "CSV Files (*.csv)|*.csv|All Files (*.*)|*.*"_x000D__x000A_      $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_      $PILOpenFileDialog.Multiselect = $False_x000D__x000A_      $PILOpenFileDialog.Title = "Select a PIL Export Data File"_x000D__x000A_      $PILOpenFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        _x000D__x000A_        $HashTable = @{"ShowHeader" = $True; "ConfigFile" = $PILOpenFileDialog.FileName }_x000D__x000A_        $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Load-PILDataExport -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_        $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          _x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Load Exported Process-ItemList Data"_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILOpenFileDialog.FileName)_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "TotalColumns"_x000D__x000A_    {_x000D__x000A_      #region Set Total Columns_x000D__x000A_      $PILTopMenuStrip.Items["Configure"].DropDownItems["TotalColumns"].DropDownItems[[MyRuntime]::MaxColumns - 2].ImageKey = $Null_x000D__x000A_      [MyRuntime]::UpdateTotalColumn($Sender.Tag)_x000D__x000A_      $TmpColumns = [MyRuntime]::ThreadConfig.GetColumnNames()_x000D__x000A_      $PILItemListListView.BeginUpdate()_x000D__x000A_      $PILItemListListView.Columns.Clear()_x000D__x000A_      For ($I = 0; $I -lt ([MyRuntime]::MaxColumns); $I++)_x000D__x000A_      {_x000D__x000A_        New-ColumnHeader -ListView $PILItemListListView -Text ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Name ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Tag ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Width -2_x000D__x000A_      }_x000D__x000A_      $PILItemListListView.AutoResizeColumns([System.Windows.Forms.ColumnHeaderAutoResizeStyle]::HeaderSize)_x000D__x000A_      New-ColumnHeader -ListView $PILItemListListView -Text " " -Name "Blank" -Tag " " -Width ($PILForm.Width * 4)_x000D__x000A_      $PILItemListListView.EndUpdate()_x000D__x000A_      $PILTopMenuStrip.Items["Configure"].DropDownItems["TotalColumns"].DropDownItems[[MyRuntime]::MaxColumns - 2].ImageKey = "Selected16Icon"_x000D__x000A_      #endregion Set Total Columns_x000D__x000A_    }_x000D__x000A_    "ColumnNames"_x000D__x000A_    {_x000D__x000A_      #region Set Column Names_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Update Column Names"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      $DialogResult = Get-MultiTextBoxInput -Title "Update Column Names" -Message "Enter the New Column Names for the $([MyConfig]::ScriptName) Utility" -OrderedItems ([MyRuntime]::ThreadConfig.GetColumnNames()) -AllRequired_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_        $TmpNames = @($DialogResult.OrderedItems.Values)_x000D__x000A_        $Max = $TmpNames.Count_x000D__x000A_        For ($I = 0; $I -lt $Max; $I++)_x000D__x000A_        {_x000D__x000A_          $PILItemListListView.Columns[$I].Text = $TmpNames[$I]_x000D__x000A_        }_x000D__x000A_        [MyRuntime]::ThreadConfig.SetColumnNames($TmpNames)_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Updated Column Names"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Failed to Update Column Names"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Set Column Names_x000D__x000A_    }_x000D__x000A_    "ThreadScript"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Update PIL Threads Configuration"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      $DialogResult = Update-ThreadConfiguration_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Updated PIL Threads Configuration"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Updating PIL Threads Configuration"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "LoadConfig"_x000D__x000A_    {_x000D__x000A_      #region Load PIL Configuration_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Load PIL Configuration File"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Open Selected File_x000D__x000A_      $PILOpenFileDialog.FileName = ""_x000D__x000A_      $PILOpenFileDialog.Filter = "PIL Config File|*.PILConfig|All Files (*.*)|*.*"_x000D__x000A_      $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_      $PILOpenFileDialog.Multiselect = $False_x000D__x000A_      $PILOpenFileDialog.Title = "Load PIL Configuration File"_x000D__x000A_      $PILOpenFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        $HashTable = @{"ShowHeader" = $True; "ConfigFile" = $PILOpenFileDialog.FileName }_x000D__x000A_        $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Load-PILConfigFIle -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_        $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title ($PILBtmStatusStrip.Items["Status"].Text) -ButtonMid "OK" -HashTable $HashTable_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Success Loading PIL Configuration File"_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Errors Loading PIL Configuration File"_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILOpenFileDialog.FileName)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Loading PIL Configuration File"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Load PIL Configuration_x000D__x000A_    }_x000D__x000A_    "SaveConfig"_x000D__x000A_    {_x000D__x000A_      #region Save PIL Configuration File_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Save PIL Configuration File"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Save Export File_x000D__x000A_      $PILSaveFileDialog.FileName = ""_x000D__x000A_      $PILSaveFileDialog.Filter = "PIL Config File|*.PILConfig|All Files (*.*)|*.*"_x000D__x000A_      $PILSaveFileDialog.FilterIndex = 1_x000D__x000A_      $PILSaveFileDialog.Title = "Save PIL Configuration File"_x000D__x000A_      $PILSaveFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILSaveFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        # Save Config_x000D__x000A_        [MyRuntime]::ThreadConfig | Export-Clixml -Path $PILSaveFileDialog.FileName -Encoding ASCII_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILSaveFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILSaveFileDialog.FileName)_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Success Saving PIL Configuration File"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Saving PIL Configuration File"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Save PIL Configuration File_x000D__x000A_    }_x000D__x000A_    "ProcessItems"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Processing Item List"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Disable Main Menu Iteme_x000D__x000A_      $PILTopMenuStrip.Items["AddItems"].Enabled = $False_x000D__x000A_      $PILTopMenuStrip.Items["Configure"].Enabled = $False_x000D__x000A_      $PILTopMenuStrip.Items["ProcessItems"].Enabled = $False_x000D__x000A_      $PILTopMenuStrip.Items["ListData"].Enabled = $False_x000D__x000A_      _x000D__x000A_      # Disable Right Click Menu_x000D__x000A_      $PILItemListContextMenuStrip.Enabled = $False_x000D__x000A_      _x000D__x000A_      # Disable ListView Sort_x000D__x000A_      $PILItemListListView.ListViewItemSorter.Enable = $False_x000D__x000A_      _x000D__x000A_      # Set Processing ToolStrip_x000D__x000A_      $PILItelListToolStrip.Items["Process"].Checked = $True_x000D__x000A_      $PILItelListToolStrip.Items["Pause"].Checked = $False_x000D__x000A_      $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_      $PILItelListToolStrip.BringToFront()_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "ExportCSV"_x000D__x000A_    {_x000D__x000A_      #region Export CSV Report_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Export CSV Report"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Save Export File_x000D__x000A_      $PILSaveFileDialog.FileName = ""_x000D__x000A_      $PILSaveFileDialog.Filter = "CSV File (*.csv)|*.csv|All Files (*.*)|*.*"_x000D__x000A_      $PILSaveFileDialog.FilterIndex = 1_x000D__x000A_      $PILSaveFileDialog.Title = "Export PIL CSV Report"_x000D__x000A_      $PILSaveFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILSaveFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        $TmpCount = ([MyRuntime]::MaxColumns - 1)_x000D__x000A_        $StringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A_        [Void]$StringBuilder.AppendLine(($PILItemListListView.Columns[0..$($TmpCount)] | Select-Object -ExpandProperty Text) -Join ",")_x000D__x000A_        $PILItemListListView.Items | ForEach-Object -Process { [Void]$StringBuilder.AppendLine("`"{0}`"" -f (($PSItem.SubItems[0..$($TmpCount)] | Select-Object -ExpandProperty Text) -join "`",`"")) }_x000D__x000A_        ConvertFrom-Csv -InputObject (($StringBuilder.ToString())) -Delimiter "," | Export-Csv -Path $PILSaveFileDialog.FileName -NoTypeInformation -Encoding ASCII_x000D__x000A_        $StringBuilder.Clear()_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILSaveFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILSaveFileDialog.FileName)_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Success Exporting CSV Report"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Export CSV Report"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Export CSV Report_x000D__x000A_    }_x000D__x000A_    "ClearList"_x000D__x000A_    {_x000D__x000A_      #region Clear Item List_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clear Item List?"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      $DialogResult = Get-UserResponse -Title "Clear Item List?" -Message "Do you want to Clear the Item List?" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes -Icon ([System.Drawing.SystemIcons]::Question)_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Clear Item List_x000D__x000A_        $PILItemListListView.Items.Clear()_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Cleared Item List"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Clearing Item List"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Clear Item List_x000D__x000A_    }_x000D__x000A_    "Help"_x000D__x000A_    {_x000D__x000A_      #region Show Help_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Show Help"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      $DialogResult = Show-ScriptInfo -Topics $ScriptInfoTopics -Title "$([MyConfig]::ScriptName) $([MyConfig]::ScriptVersion)" -InfoTitle "PIL Help Topics"_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Success Help Shown"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Failed Help Shown"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Show Help_x000D__x000A_    }_x000D__x000A_    "Exit"_x000D__x000A_    {_x000D__x000A_      #region Exit Utility_x000D__x000A_      If ([MyConfig]::Production)_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Exiting $([MyConfig]::ScriptName)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        $FCGForm.Close()_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Exit Utility_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Set-MyISScriptData</S>
            <Obj N="Value" RefId="134">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Set-MyISScriptData</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Writes Script Data to the Registry_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Writes Script Data to the Registry_x000D__x000A_    .PARAMETER Script_x000D__x000A_     Name of the Regsitry Key to write the values under. Defaults to the name of the script._x000D__x000A_    .PARAMETER Name_x000D__x000A_     Name of the Value to write_x000D__x000A_    .PARAMETER Value_x000D__x000A_      The Data to write_x000D__x000A_    .PARAMETER MultiValue_x000D__x000A_      Write Multiple values to the Registry_x000D__x000A_    .PARAMETER User_x000D__x000A_      Write to the HKCU Registry Hive_x000D__x000A_    .PARAMETER Computer_x000D__x000A_      Write to the HKLM Registry Hive_x000D__x000A_    .PARAMETER Bitness_x000D__x000A_      Specify 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value "Value"_x000D__x000A__x000D__x000A_      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value @("This", "That") -User -Script "ScriptName"_x000D__x000A__x000D__x000A_      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key_x000D__x000A__x000D__x000A_      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ_x000D__x000A_      Use @() or (,) when specifing the Value paramter value_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value (,8) -Bitness "64" -Computer_x000D__x000A__x000D__x000A_      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key_x000D__x000A__x000D__x000A_      Number arrays are written to the registry as strings._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value 0 -Computer_x000D__x000A__x000D__x000A_      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -MultiValue @{"Name" = "MyName"; "Number" = 4; "Array" = @("First", 2, "3rd", 4)} -Computer -Bitness "32"_x000D__x000A__x000D__x000A_      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "User")]_x000D__x000A_  param (_x000D__x000A_    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "User")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [String]$Name,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "User")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [Object]$Value,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "UserMulti")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompMulti")]_x000D__x000A_    [HashTable]$MultiValue,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "User")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "UserMulti")]_x000D__x000A_    [Switch]$User,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompMulti")]_x000D__x000A_    [Switch]$Computer,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Comp")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompMulti")]_x000D__x000A_    [ValidateSet("32", "64", "All")]_x000D__x000A_    [String]$Bitness = "All"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Set-MyISScriptData"_x000D__x000A__x000D__x000A_  # Get Default Registry Paths_x000D__x000A_  $RegPaths = [System.Collections.ArrayList]::New()_x000D__x000A_  if ($Computer.IsPresent)_x000D__x000A_  {_x000D__x000A_    if ($Bitness -match "All|32")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node")_x000D__x000A_    }_x000D__x000A_    if ($Bitness -match "All|64")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software")_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$RegPaths.Add("Registry::HKEY_CURRENT_USER\Software")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Create the Registry Keys if Needed._x000D__x000A_  foreach ($RegPath in $RegPaths)_x000D__x000A_  {_x000D__x000A_    if ([String]::IsNullOrEmpty((Get-Item -Path "$RegPath\MyISScriptData" -ErrorAction "SilentlyContinue")))_x000D__x000A_    {_x000D__x000A_      try_x000D__x000A_      {_x000D__x000A_        [Void](New-Item -Path $RegPath -Name "MyISScriptData")_x000D__x000A_      }_x000D__x000A_      catch_x000D__x000A_      {_x000D__x000A_        throw "Error Creating Registry Key : MyISScriptData"_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    if ([String]::IsNullOrEmpty((Get-Item -Path "$RegPath\MyISScriptData\$Script" -ErrorAction "SilentlyContinue")))_x000D__x000A_    {_x000D__x000A_      try_x000D__x000A_      {_x000D__x000A_        [Void](New-Item -Path "$RegPath\MyISScriptData" -Name $Script)_x000D__x000A_      }_x000D__x000A_      catch_x000D__x000A_      {_x000D__x000A_        throw "Error Creating Registry Key : $Script"_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Write the values to the registry._x000D__x000A_  switch -regex ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "Multi"_x000D__x000A_    {_x000D__x000A_      foreach ($Key in $MultiValue.Keys)_x000D__x000A_      {_x000D__x000A_        if ($MultiValue[$Key] -is [Array])_x000D__x000A_        {_x000D__x000A_          $Data = [String[]]$MultiValue[$Key]_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $Data = $MultiValue[$Key]_x000D__x000A_        }_x000D__x000A_        foreach ($RegPath in $RegPaths)_x000D__x000A_        {_x000D__x000A_          [Void](Set-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -Name $Key -Value $Data)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    default_x000D__x000A_    {_x000D__x000A_      if ($Value -is [Array])_x000D__x000A_      {_x000D__x000A_        $Data = [String[]]$Value_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $Data = $Value_x000D__x000A_      }_x000D__x000A_      foreach ($RegPath in $RegPaths)_x000D__x000A_      {_x000D__x000A_        [Void](Set-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -Name $Name -Value $Data)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Set-MyISScriptData"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Test-Function</S>
            <Obj N="Value" RefId="135">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Test-Function</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Test Function for RunspacePool ScriptBlock_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Test Function for RunspacePool ScriptBlock_x000D__x000A_    .PARAMETER Value_x000D__x000A_      Value Command Line Parameter_x000D__x000A_    .EXAMPLE_x000D__x000A_      Test-Function -Value "String"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, HelpMessage = "Enter Value", ParameterSetName = "Default")]_x000D__x000A_    [Object[]]$Value = "Default Value"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Test-Function"_x000D__x000A__x000D__x000A_  Start-Sleep -Milliseconds (1000 * 5)_x000D__x000A_  ForEach ($Item in $Value)_x000D__x000A_  {_x000D__x000A_    "Return Value: `$Item = $Item"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Test-Function"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Test-MyClassLoaded</S>
            <Obj N="Value" RefId="136">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Test-MyClassLoaded</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Test if Custom Class is Loaded_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Test if Custom Class is Loaded_x000D__x000A_    .PARAMETER Name_x000D__x000A_      Name of Custom Class_x000D__x000A_    .EXAMPLE_x000D__x000A_      $IsLoaded = Test-MyClassLoaded -Name "CustomClass"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Default")]_x000D__x000A_    [String]$Name_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Test-MyClassLoaded"_x000D__x000A__x000D__x000A_  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New($Name)).Type))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Test-MyClassLoaded"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputFormKeyDown</S>
            <Obj N="Value" RefId="137">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Set-MyClipboard</S>
            <Obj N="Value" RefId="138">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Set-MyClipboard</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Copies object data to the clipboard in HTML and CSV format._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function copies the specified object data to the clipboard, formatting it as both HTML and CSV. _x000D__x000A_      The HTML output includes customizable styles for the table title, property headers, and row colors. _x000D__x000A_      The function is useful for exporting tabular data from PowerShell scripts for use in other applications._x000D__x000A_    .PARAMETER Items_x000D__x000A_      The array of objects to copy to the clipboard. Each object should contain the properties specified in the Properties parameter._x000D__x000A_    .PARAMETER Title_x000D__x000A_      The title displayed at the top of the HTML table. Default is "My Copied Data from PowerShell"._x000D__x000A_    .PARAMETER TitleFore_x000D__x000A_      The foreground (text) color for the table title. Default is "Black"._x000D__x000A_    .PARAMETER TitleBack_x000D__x000A_      The background color for the table title. Default is "LightSteelBlue"._x000D__x000A_    .PARAMETER Properties_x000D__x000A_      The list of property names to include as columns in the table. This parameter is mandatory._x000D__x000A_    .PARAMETER PropertyFore_x000D__x000A_      The foreground (text) color for the property header row. Default is "Black"._x000D__x000A_    .PARAMETER PropertyBack_x000D__x000A_      The background color for the property header row. Default is "PowderBlue"._x000D__x000A_    .PARAMETER RowFore_x000D__x000A_      The foreground (text) color for all data rows. Default is "Black"._x000D__x000A_    .PARAMETER RowEvenBack_x000D__x000A_      The background color for even-numbered data rows. Default is "White"._x000D__x000A_    .PARAMETER RowOddBack_x000D__x000A_      The background color for odd-numbered data rows. Default is "Gainsboro"._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyClipboard -Items $Items -Title "This is My Title" -Properties "Property1", "Property2", "Property3"_x000D__x000A_      Copies the specified properties of $Items to the clipboard with a custom title._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Office")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True)]_x000D__x000A_    [Object[]]$Items,_x000D__x000A_    [String]$Title = "My Copied Data from PowerShell",_x000D__x000A_    [String]$TitleFore = "Black",_x000D__x000A_    [String]$TitleBack = "LightSteelBlue",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String[]]$Properties,_x000D__x000A_    [String]$PropertyFore = "Black",_x000D__x000A_    [String]$PropertyBack = "PowderBlue",_x000D__x000A_    [String]$RowFore = "Black",_x000D__x000A_    [String]$RowEvenBack = "White",_x000D__x000A_    [String]$RowOddBack = "Gainsboro"_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-MyClipboard Begin Block"_x000D__x000A__x000D__x000A_    # Init StringBuilding_x000D__x000A_    $HTMLStringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A__x000D__x000A_    # Start HTML ClipBaord Data_x000D__x000A_    [Void]$HTMLStringBuilder.Append("Version:1.0`r`nStartHTML:000START`r`nEndHTML:00000END`r`nStartFragment:00FSTART`r`nEndFragment:0000FEND`r`n")_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("000START", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;html&gt;&lt;head&gt;&lt;title&gt;My Copied Data&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--StartFragment--&gt;")_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("00FSTART", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A__x000D__x000A_    # Table Style_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;style&gt;`r`n.Title{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: $($TitleFore); background: $($TitleBack);}`r`n.Property{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: $($PropertyFore); background: $($PropertyBack);}`r`n.Row0 {border: 1px solid black; border-collapse: collapse;color: $($RowFore); background: $($RowEvenBack);}`r`n.Row1 {border: 1px solid black; border-collapse: collapse; color: $($RowFore); background: $($RowOddBack);}`r`n&lt;/style&gt;")_x000D__x000A__x000D__x000A_    # Start Build Table / Set Title_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;table&gt;&lt;tr&gt;&lt;th class=Title aligh=center colspan=$($Properties.Count)&gt;&amp;nbsp;$($Title)&amp;nbsp;&lt;/th&gt;&lt;/tr&gt;")_x000D__x000A__x000D__x000A_    # Add Table Column / Property Names_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;tr&gt;$(($Properties | ForEach-Object -Process { "&lt;td class=Property aligh=center&gt;&amp;nbsp;$($PSItem)&amp;nbsp;&lt;/td&gt;" }) -join '')&lt;/tr&gt;")_x000D__x000A__x000D__x000A_    # Start Row Count_x000D__x000A_    $TmpRowCount = 0_x000D__x000A__x000D__x000A_    $TmpItemList = [System.Collections.ArrayList]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-MyClipboard Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-MyClipboard Process Block"_x000D__x000A__x000D__x000A_    foreach ($Item in $Items)_x000D__x000A_    {_x000D__x000A_      [Void]$HTMLStringBuilder.Append("&lt;tr&gt;$(((($Properties | ForEach-Object -Process { $Item.($PSItem) }) | ForEach-Object -Process { "&lt;td class=Row$($TmpRowCount)&gt;&amp;nbsp;$($PSItem)&amp;nbsp;&lt;/td&gt;" }) -join ''))&lt;/tr&gt;")_x000D__x000A_      [Void]$TmpItemList.Add(($Item | Select-Object -Property $Properties))_x000D__x000A_      $TmpRowCount = ($TmpRowCount + 1) % 2_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-MyClipboard Process Block"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-MyClipboard End Block"_x000D__x000A__x000D__x000A_    # Close HTML Table_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;/table&gt;&lt;br&gt;&lt;br&gt;")_x000D__x000A__x000D__x000A_    # Set End Clipboard Values_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("0000FEND", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;!--EndFragment--&gt;&lt;/body&gt;&lt;/html&gt;")_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("00000END", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A__x000D__x000A_    [System.Windows.Forms.Clipboard]::Clear()_x000D__x000A_    $DataObject = [System.Windows.Forms.DataObject]::New("Text", ($TmpItemList | Select-Object -Property $Properties | ConvertTo-Csv -NoTypeInformation | Out-String))_x000D__x000A_    $DataObject.SetData("HTML Format", $HTMLStringBuilder.ToString())_x000D__x000A_    [System.Windows.Forms.Clipboard]::SetDataObject($DataObject)_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-MyClipboard End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Listen-MyTextMessage</S>
            <Obj N="Value" RefId="139">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Listen-MyTextMessage</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Listens for text messages sent via UDP from remote or local computers._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function listens for incoming UDP text messages on a specified port and IP address or computer name. _x000D__x000A_      It displays received messages and the sender's address. The listener runs until a message with the content "Exit" is received._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer to listen for messages from. Defaults to the local computer. Used only if IPAddress is not specified._x000D__x000A_    .PARAMETER IPAddress_x000D__x000A_      The IP address to listen on. Defaults to "127.0.0.1". Use "0.0.0.0" to listen on all interfaces._x000D__x000A_    .PARAMETER Port_x000D__x000A_      The UDP port to listen on. Defaults to 2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Listen-MyTextMessage_x000D__x000A_      Listens for UDP messages on 127.0.0.1:2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Listen-MyTextMessage -IPAddress "0.0.0.0" -Port 3000_x000D__x000A_      Listens for UDP messages on all interfaces at port 3000._x000D__x000A_    .EXAMPLE_x000D__x000A_      Listen-MyTextMessage -ComputerName "RemotePC"_x000D__x000A_      Listens for UDP messages from the computer named RemotePC._x000D__x000A_    .NOTES_x000D__x000A_      Original function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "IPAddress")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ComputerName")]_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "IPAddress")]_x000D__x000A_    [System.Net.IPAddress]$IPAddress = "127.0.0.1",_x000D__x000A_    [int]$Port = 2500_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter function Listen-MyTextMessage"_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "IPAddress")_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New($IPAddress, $Port)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName($ComputerName)).AddressList[0]), $Port)_x000D__x000A_  }_x000D__x000A_  $UDPClient = [System.Net.Sockets.UdpClient]::New($Port)_x000D__x000A_  do_x000D__x000A_  {_x000D__x000A_    $TempRemoteClient = $RemoteClient_x000D__x000A_    $Message = $UDPClient.Receive([ref]$TempRemoteClient)_x000D__x000A_    $DecodedMessage = [Text.Encoding]::ASCII.GetString($Message)_x000D__x000A_    Write-Host -Object "Message From: $($TempRemoteClient.Address) - $($DecodedMessage)"_x000D__x000A_  } while ($True -and ($DecodedMessage -ne "Exit"))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit function Listen-MyTextMessage"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-MyRSPool</S>
            <Obj N="Value" RefId="140">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-MyRSPool</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Get RunspacePools that match specified criteria_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Get RunspacePools that match specified criteria_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RSPool to search for_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      PoolID of Job to search for_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSPools = Get-MyRSPool_x000D__x000A__x000D__x000A_      Get all RSPools_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSPools = Get-MyRSPool -PoolName $PoolName_x000D__x000A__x000D__x000A_      $MyRSPools = Get-MyRSPool -PoolID $PoolID_x000D__x000A__x000D__x000A_      Get Specified RSPools_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "All")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolName")]_x000D__x000A_    [String[]]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "PoolID")]_x000D__x000A_    [Guid[]]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "All")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolID")]_x000D__x000A_    [ValidateSet("BeforeOpen", "Opening", "Opened", "Closed", "Closing", "Broken", "Disconnecting", "Disconnected", "Connecting")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSPool Begin Block"_x000D__x000A__x000D__x000A_    # Set Job State RegEx Pattern_x000D__x000A_    if ($PSBoundParameters.ContainsKey("State"))_x000D__x000A_    {_x000D__x000A_      $StatePattern = $State -join "|"_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $StatePattern = ".*"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSPool Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSPool Process Block"_x000D__x000A__x000D__x000A_    switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "All" {_x000D__x000A_        # Return Matching Pools_x000D__x000A_        [MyRSPool[]]($Script:MyHiddenRSPool.Values | Where-Object -FilterScript { $PSItem.State -match $StatePattern })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolName" {_x000D__x000A_        # Set Pool Name and Return Matching Pools_x000D__x000A_        $NamePattern = $PoolName -join "|"_x000D__x000A_        [MyRSPool[]]($Script:MyHiddenRSPool.Values | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.Name -match $NamePattern})_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolID" {_x000D__x000A_        # Set PoolID and Return Matching Pools_x000D__x000A_        $IDPattern = $PoolID -join "|"_x000D__x000A_        [MyRSPool[]]($Script:MyHiddenRSPool.Values | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.InstanceId -match $IDPattern })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSPool Process Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxOptionBtmMidButtonClick</S>
            <Obj N="Value" RefId="141">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxOptionBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ([String]::IsNullOrEmpty($GetComboChoiceComboBox.Tag))_x000D__x000A_    {_x000D__x000A_      $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ScriptInfoFormResize</S>
            <Obj N="Value" RefId="142">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ScriptInfoFormResize</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Resize Event for the ScriptInfo Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Resize Event for the ScriptInfo Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Resize Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Resize Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ScriptInfoFormResize -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Resize Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Resize Event for `$ScriptInfoForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputFormKeyDown</S>
            <Obj N="Value" RefId="143">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the TextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the TextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionListViewDrawItem</S>
            <Obj N="Value" RefId="144">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionListViewDrawItem</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawItem Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawItem Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawItem Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawItem Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawItem -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawItem Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Return to Default Draw_x000D__x000A_    $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawItem Event for `$ListViewOptionListView"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Load-PILConfigFIle</S>
            <Obj N="Value" RefId="145">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Load-PILConfigFIle</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      Passed Paramters HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Load-PILConfigFIle -RichTextBox $RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Load-PILConfigFIle -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Load-PILConfigFIle"_x000D__x000A_  _x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  _x000D__x000A_  # Get Passed Values_x000D__x000A_  $ShowHeader = $HashTable.ShowHeader_x000D__x000A_  $ConfigFile = $HashTable.ConfigFile_x000D__x000A_  _x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text_x000D__x000A_    _x000D__x000A_    # Initialize StopWatch_x000D__x000A_    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Processing PIL Configuration File" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  _x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Configuration File" -Value ([System.IO.Path]::GetFileName($ConfigFile)) -Font ([MyConfig]::Font.Bold)_x000D__x000A_  $RichTextBox.SelectionIndent = 30_x000D__x000A_  _x000D__x000A_  If ([System.IO.File]::Exists($ConfigFile))_x000D__x000A_  {_x000D__x000A_    Try_x000D__x000A_    {_x000D__x000A_      # Load Configuration_x000D__x000A_      $TmpConfig = Import-Clixml -LiteralPath $ConfigFile_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "SUCCESS" -TextFore ([MyConfig]::Colors.TextGood) -Value "Found PIL Config File" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_      _x000D__x000A_      # Add / Update PIL Columns_x000D__x000A_      $RichTextBox.SelectionIndent = 20_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Number of Columns" -Value ($TmpConfig.ColumnNames.Count)_x000D__x000A_      [MyRuntime]::UpdateTotalColumn($TmpConfig.ColumnNames.Count)_x000D__x000A_      $RichTextBox.SelectionIndent = 30_x000D__x000A_      $PILItemListListView.BeginUpdate()_x000D__x000A_      $PILItemListListView.Columns.Clear()_x000D__x000A_      $PILItemListListView.Items.Clear()_x000D__x000A_      [MyRuntime]::ThreadConfig.ColumnNames = $TmpConfig.ColumnNames_x000D__x000A_      For ($I = 0; $I -lt ([MyRuntime]::MaxColumns); $I++)_x000D__x000A_      {_x000D__x000A_        New-ColumnHeader -ListView $PILItemListListView -Text ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Name ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Tag ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Width -2_x000D__x000A_      }_x000D__x000A_      $PILItemListListView.AutoResizeColumns([System.Windows.Forms.ColumnHeaderAutoResizeStyle]::HeaderSize)_x000D__x000A_      New-ColumnHeader -ListView $PILItemListListView -Text " " -Name "Blank" -Tag " " -Width ($PILForm.Width * 4)_x000D__x000A_      $PILItemListListView.EndUpdate()_x000D__x000A_      _x000D__x000A_      # Update Thread Script_x000D__x000A_      $RichTextBox.SelectionIndent = 20_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Runspace Pool Threads" -Value ($TmpConfig.ThreadCount)_x000D__x000A_      [MyRuntime]::ThreadConfig.UpdateThreadInfo($TmpConfig.ThreadCount, $TmpConfig.ThreadScript)_x000D__x000A_      _x000D__x000A_      # Add / Update Common Modules_x000D__x000A_      $RichTextBox.SelectionIndent = 20_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Common Runspace Pool Modules" -Value ($TmpConfig.Modules.Count)_x000D__x000A_      _x000D__x000A_      # Install Modules Message_x000D__x000A_      If ([MyConfig]::IsLocalAdmin)_x000D__x000A_      {_x000D__x000A_        $TmpInallMsg = "the System Module Folder"_x000D__x000A_        $TmpScope = "AllUsers"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $TmpInallMsg = "Your User Profile Module Folder"_x000D__x000A_        $TmpScope = "CurrentUser"_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Modules.Clear()_x000D__x000A_      :LoadMods ForEach ($Key In $TmpConfig.Modules.Keys)_x000D__x000A_      {_x000D__x000A_        $Module = $TmpConfig.Modules[$Key]_x000D__x000A_        $RichTextBox.SelectionIndent = 30_x000D__x000A_        Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Module.Name -Value $Module.Version_x000D__x000A_        $RichTextBox.SelectionIndent = 40_x000D__x000A_        _x000D__x000A_        If ([MyRuntime]::Modules.ContainsKey($Module.Name))_x000D__x000A_        {_x000D__x000A_          If ([Version]::New([MyRuntime]::Modules[$Module.Name].Version) -lt [Version]::New($Module.Version))_x000D__x000A_          {_x000D__x000A_            $DialogResult = Get-UserResponse -Title "Incorrect Module Version" -Message "The Module $($Module.Name) Version $($Module.Version) was not Found would you like to Install it to $($TmpInallMsg)?" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes -Icon ([System.Drawing.SystemIcons]::Question)_x000D__x000A_            If ($DialogResult.Success)_x000D__x000A_            {_x000D__x000A_              $ChkInstall = Install-MyModule -Name $Module.Name -Version $Module.Version -Scope $TmpScope -Install -NoImport_x000D__x000A_              If ($ChkInstall.Success)_x000D__x000A_              {_x000D__x000A_                Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "SUCCESS" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation was Successful" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_              }_x000D__x000A_              Else_x000D__x000A_              {_x000D__x000A_                Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_                $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_                Break LoadMods_x000D__x000A_              }_x000D__x000A_            }_x000D__x000A_            Else_x000D__x000A_            {_x000D__x000A_              Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_              $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_              Break LoadMods_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-UserResponse -Title "Module Not Instaled" -Message "The Module $($Module.Name) Version $($Module.Version) was not Found would you like to Install it to $($TmpInallMsg)?" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes -Icon ([System.Drawing.SystemIcons]::Question)_x000D__x000A_          If ($DialogResult.Success)_x000D__x000A_          {_x000D__x000A_            $ChkInstall = Install-MyModule -Name $Module.Name -Version $Module.Version -Scope $TmpScope -Install -NoImport_x000D__x000A_            If ($ChkInstall.Success)_x000D__x000A_            {_x000D__x000A_              Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "SUCCESS" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation was Successful" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_            }_x000D__x000A_            Else_x000D__x000A_            {_x000D__x000A_              Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_              $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_              Break LoadMods_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_            $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_            Break LoadMods_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Add Module to List_x000D__x000A_        [Void][MyRuntime]::ThreadConfig.Modules.Add($Module.Name, [PILModule]::New($Module.Location, $Module.Name, $Module.Version))_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      If ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        # Add / Update Common Functions_x000D__x000A_        $RichTextBox.SelectionIndent = 20_x000D__x000A_        Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Common Runspace Pool Functions" -Value ($TmpConfig.Functions.Count)_x000D__x000A_        [MyRuntime]::ThreadConfig.Functions.Clear()_x000D__x000A_        $RichTextBox.SelectionIndent = 30_x000D__x000A_        ForEach ($Key In $TmpConfig.Functions.Keys)_x000D__x000A_        {_x000D__x000A_          Write-RichTextBox -RichTextBox $RichTextBox -Text $Key_x000D__x000A_          [Void][MyRuntime]::ThreadConfig.Functions.Add($Key, [PILFunction]::New($Key, $TmpConfig.Functions[$Key].ScriptBlock))_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Add / Update Common Variables_x000D__x000A_        $RichTextBox.SelectionIndent = 20_x000D__x000A_        Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Common Runspace Pool Variables" -Value ($TmpConfig.Variables.Count)_x000D__x000A_        [MyRuntime]::ThreadConfig.Variables.Clear()_x000D__x000A_        $RichTextBox.SelectionIndent = 30_x000D__x000A_        ForEach ($Key In $TmpConfig.Variables.Keys)_x000D__x000A_        {_x000D__x000A_          Write-RichTextBox -RichTextBox $RichTextBox -Text $Key_x000D__x000A_          [Void][MyRuntime]::ThreadConfig.Variables.Add($Key, [PILVariable]::New($Key, $TmpConfig.Variables[$Key].Value))_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Catch_x000D__x000A_    {_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value "PIL Config File was not Loaded" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_      Write-RichTextBoxError -RichTextBox $RichTextBox_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value "PIL Config File not Found" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_    $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionIndent = 10_x000D__x000A_    $RichTextBox.SelectionBullet = $False_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Set Final Status Message_x000D__x000A_    Switch ($DisplayResult)_x000D__x000A_    {_x000D__x000A_      "OK"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Successfully Imported PIL Configuration"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextGood_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Cancel"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Errors Importing PIL Configuration"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextBad_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Write Final Status Message_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $FinalMsg_x000D__x000A_    $StopWatch.Stop()_x000D__x000A_  }_x000D__x000A_    _x000D__x000A_  # Return DialogResult_x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Load-PILConfigFIle"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-MenuItem</S>
            <Obj N="Value" RefId="146">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-MenuItem</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuItem to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripMenuItem with the specified properties and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of text, name, tooltip, icon, image index/key, text-image relation, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors._x000D__x000A_      The new MenuItem can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuItem will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new MenuItem. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new MenuItem. If not specified, the Text value is used._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the MenuItem._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      The icon to display for the MenuItem. Used when specifying images by icon. Mandatory for the 'Icon' parameter set._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the MenuItem. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the MenuItem. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set._x000D__x000A_    .PARAMETER TextImageRelation_x000D__x000A_      Specifies the position of the text and image relative to each other. Defaults to 'ImageBeforeText'._x000D__x000A_    .PARAMETER DisplayStyle_x000D__x000A_      Specifies how the MenuItem displays its image and text. Defaults to 'Text'._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      Specifies the alignment of the MenuItem's text and image. Defaults to 'MiddleCenter'._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new MenuItem._x000D__x000A_    .PARAMETER Disable_x000D__x000A_      If specified, disables the MenuItem (sets Enabled to $false)._x000D__x000A_    .PARAMETER Check_x000D__x000A_      If specified, sets the MenuItem's Checked property to $true._x000D__x000A_    .PARAMETER ClickOnCheck_x000D__x000A_      If specified, enables the CheckOnClick property for the MenuItem._x000D__x000A_    .PARAMETER ShortcutKeys_x000D__x000A_      Specifies the shortcut keys for the MenuItem. Defaults to 'None'._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the MenuItem text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuItem. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the MenuItem. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created MenuItem object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-MenuItem -Menu $menuStrip -Text "Open" -Tag "OpenFile"_x000D__x000A_      Adds a new MenuItem with text "Open" and tag "OpenFile" to $menuStrip._x000D__x000A_    .EXAMPLE_x000D__x000A_      $item = New-MenuItem -Menu $contextMenu -Text "Save" -ImageIndex 2 -PassThru_x000D__x000A_      Adds a new MenuItem with an image at index 2 and returns the created MenuItem object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Icon")]_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]_x000D__x000A_    [Int]$ImageIndex,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [System.Windows.Forms.TextImageRelation]$TextImageRelation = "ImageBeforeText",_x000D__x000A_    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",_x000D__x000A_    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Switch]$Disable,_x000D__x000A_    [Switch]$Check,_x000D__x000A_    [Switch]$ClickOnCheck,_x000D__x000A_    [System.Windows.Forms.Keys]$ShortcutKeys = "None",_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]_x000D__x000A_  $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New($Text)_x000D__x000A__x000D__x000A_  if ($Menu.GetType().Name -eq "ToolStripMenuItem")_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.DropDownItems.Add($TempMenuItem)_x000D__x000A_    if ($Menu.DropDown.Items.Count -eq 1)_x000D__x000A_    {_x000D__x000A_      $Menu.DropDown.BackColor = $Menu.BackColor_x000D__x000A_      $Menu.DropDown.ForeColor = $Menu.ForeColor_x000D__x000A_      $Menu.DropDown.ImageList = $Menu.Owner.ImageList_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.Items.Add($TempMenuItem)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempMenuItem.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempMenuItem.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuItem.ShortcutKeys = $ShortcutKeys_x000D__x000A_  $TempMenuItem.Tag = $Tag_x000D__x000A_  $TempMenuItem.ToolTipText = $ToolTip_x000D__x000A_  $TempMenuItem.TextAlign = $Alignment_x000D__x000A_  $TempMenuItem.Checked = $Check.IsPresent_x000D__x000A_  $TempMenuItem.CheckOnClick = $ClickOnCheck.IsPresent_x000D__x000A_  $TempMenuItem.DisplayStyle = $DisplayStyle_x000D__x000A_  $TempMenuItem.Enabled = (-not $Disable.IsPresent)_x000D__x000A__x000D__x000A_  $TempMenuItem.BackColor = $BackColor_x000D__x000A_  $TempMenuItem.ForeColor = $ForeColor_x000D__x000A_  $TempMenuItem.Font = $Font_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "Default")_x000D__x000A_  {_x000D__x000A_    $TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "Icon"_x000D__x000A_      {_x000D__x000A_        $TempMenuItem.Image = $Icon_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageIndex"_x000D__x000A_      {_x000D__x000A_        $TempMenuItem.ImageIndex = $ImageIndex_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageKey"_x000D__x000A_      {_x000D__x000A_        $TempMenuItem.ImageKey = $ImageKey_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $TempMenuItem.ImageAlign = $Alignment_x000D__x000A_    $TempMenuItem.TextImageRelation = $TextImageRelation_x000D__x000A_  }_x000D__x000A_  #endregion $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempMenuItem_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuItem = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionBtmRightButtonClick</S>
            <Obj N="Value" RefId="147">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-MyComObject</S>
            <Obj N="Value" RefId="148">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-MyComObject</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates Local and Remote COMObjects._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a COM object either locally or on a remote computer using the specified ProgID. _x000D__x000A_      It is useful for automating tasks that require COM automation, such as interacting with Office applications or other COM-enabled software._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer on which to create the COM object. Defaults to the local computer._x000D__x000A_    .PARAMETER COMObject_x000D__x000A_      The ProgID of the COM object to create. This parameter is mandatory._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MyComObject -COMObject "Excel.Application"_x000D__x000A_      Creates an Excel COM object on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MyComObject -ComputerName "RemotePC" -COMObject "Excel.Application"_x000D__x000A_      Creates an Excel COM object on the remote computer "RemotePC"._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$COMObject_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function New-MyComObject"_x000D__x000A__x000D__x000A_  [Activator]::CreateInstance([Type]::GetTypeFromProgID($COMObject, $ComputerName))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function New-MyComObject"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ProgressBarStatusFormShown</S>
            <Obj N="Value" RefId="149">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ProgressBarStatusFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $ProgressBarStatus Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $ProgressBarStatus Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ProgressBarStatusFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ProgressBarStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Disable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = $False_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    if ($PassHashTable)_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel, $HashTable_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    $Sender.Tag.Finished = $True_x000D__x000A_    _x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Re-enable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $ProgressBarStatusForm.DialogResult = $DialogResult_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ProgressBarStatusForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputBtmMidButtonClick</S>
            <Obj N="Value" RefId="150">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($Key In @($OrderedItems.Keys))_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputGroupBox.Controls[$Key].Text = $MultiTextBoxInputGroupBox.Controls[$Key].Tag.Value_x000D__x000A_      $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled = ($MultiTextBoxInputGroupBox.TextLength -eq 0)_x000D__x000A_      Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputGroupBox.Controls[$Key] -EventArg $EventArg_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ThreadConfigurationFormLoad</S>
            <Obj N="Value" RefId="151">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ThreadConfigurationFormLoad</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Load Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Load Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Load Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Load Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormLoad -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Load Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Load Event for `$ThreadConfigurationForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxOptionBtmLeftButtonClick</S>
            <Obj N="Value" RefId="152">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxOptionBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ComboBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($GetComboChoiceComboBox.SelectedIndex -gt 0)_x000D__x000A_    {_x000D__x000A_      $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListContextMenuStripItemClick</S>
            <Obj N="Value" RefId="153">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      ItemClicked Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      ItemClicked Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the ItemClicked Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList ItemClicked Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  _x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A_  _x000D__x000A_  Switch ($Sender.Name)_x000D__x000A_  {_x000D__x000A_    "Process"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_      $Host.EnterNestedPrompt()_x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Export"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_      $Host.EnterNestedPrompt()_x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Clear"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_      $Host.EnterNestedPrompt()_x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RichTextStatusRichTextBoxMouseDown</S>
            <Obj N="Value" RefId="154">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RichTextStatusRichTextBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      MouseDown Event for the RichTextStatus RichTextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      MouseDown Event for the RichTextStatus RichTextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The RichTextBox Control that fired the MouseDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the RichTextBox MouseDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-RichTextStatusRichTextBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.RichTextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$RichTextStatusRichTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $RichTextStatusRichTextBox.SelectionLength = 0_x000D__x000A_    $RichTextStatusRichTextBox.SelectionStart = $RichTextStatusRichTextBox.TextLength_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$RichTextStatusRichTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Display-InitiliazePILUtility</S>
            <Obj N="Value" RefId="155">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Display-InitiliazePILUtility</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display PILUtility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display PILUtility Status Sample Function_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Display-InitiliazePILUtility -RichTextBox $RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Display-InitiliazePILUtility -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Display-InitiliazePILUtility"_x000D__x000A_  _x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  _x000D__x000A_  $ShowHeader = $HashTable.ShowHeader_x000D__x000A_  $ConfigFile = $HashTable.ConfigFile_x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  _x000D__x000A_  # Write KPI Event_x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text_x000D__x000A_    _x000D__x000A_    # Initialize StopWatch_x000D__x000A_    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  _x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Validate Runtime Parameters" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  _x000D__x000A_  #region ******** Validating Runtime Parameters ********_x000D__x000A_  _x000D__x000A_  # Script / Utility_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Utility" -Value ([MyConfig]::ScriptName) -ValueFore ([MyConfig]::Colors.TextGood)_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Version" -Value ([MyConfig]::ScriptVersion) -ValueFore ([MyConfig]::Colors.TextGood)_x000D__x000A_  _x000D__x000A_  # Run From/As Info_x000D__x000A_  $TmpRunFrom = Get-WmiObject -Query "Select Name, Domain, PartOfDomain From Win32_ComputerSystem"_x000D__x000A_  If ($TmpRunFrom.PartOfDomain)_x000D__x000A_  {_x000D__x000A_    $TmpRunFromText = "$($TmpRunFrom.Name).$($TmpRunFrom.Domain)"_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TmpRunFromText = "$($TmpRunFrom.Name)"_x000D__x000A_  }_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run From" -Value $TmpRunFromText_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run As" -Value "$([Environment]::UserDomainName)\$([Environment]::UserName)"_x000D__x000A_  _x000D__x000A_  # Microsoft Entra Logon_x000D__x000A_  #Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Microsoft Entra Logon: " -Value ([MyConfig]::AADLogonInfo.Context.Account.Id)_x000D__x000A_  _x000D__x000A_  # Logon Authentication_x000D__x000A_  If ([MyConfig]::CurrentUser.AuthenticationType -eq "CloudAP")_x000D__x000A_  {_x000D__x000A_    $TmpText = "Microsoft Entra"_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TmpText = "Active Directory"_x000D__x000A_  }_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Authentication" -Value "$($TmpText)"_x000D__x000A_  _x000D__x000A_  # Verify OS Architecture_x000D__x000A_  $TempRunOS = Get-WmiObject -Query "Select Caption, Version, OSArchitecture From Win32_OperatingSystem"_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Op Sys" -Value "$($TempRunOS.Caption)"_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Build" -Value "$($TempRunOS.Version)"_x000D__x000A_  _x000D__x000A_  # Verify AC Power_x000D__x000A_  $ChkBattery = (Get-WmiObject -Class Win32_Battery).BatteryStatus_x000D__x000A_  If ([String]::IsNullOrEmpty($ChkBattery) -or ($ChkBattery -eq 2))_x000D__x000A_  {_x000D__x000A_    $TmpText = "Yes"_x000D__x000A_    $TmpColor = [MyConfig]::Colors.TextGood_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TmpText = "No"_x000D__x000A_    $TmpColor = [MyConfig]::Colors.TextWarn_x000D__x000A_  }_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "AC Power" -Value "$($TmpText)" -ValueFore $TmpColor_x000D__x000A_  _x000D__x000A_  # -------------------------_x000D__x000A_  # Display Passed Parameters_x000D__x000A_  # -------------------------_x000D__x000A_  $CheckParams = $Script:PSBoundParameters_x000D__x000A_  If ($CheckParams.Keys.Count)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Text "Runtime Parameters"_x000D__x000A_    ForEach ($Key In $CheckParams.Keys)_x000D__x000A_    {_x000D__x000A_      $RichTextBox.SelectionIndent = 30_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Key -Value $($CheckParams[$Key])_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  #endregion ******** Validating Runtime Parameters ********_x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Begining Initialization" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  # Get All Users Modules_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Getting All Users Modules"_x000D__x000A_  Get-ModuleList -Location "All Users" -Path ([MyRuntime]::AUModules)_x000D__x000A_  # Get Curent User Modules_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Getting Current User Modules"_x000D__x000A_  Get-ModuleList -Location "Current User" -Path ([MyRuntime]::CUModules)_x000D__x000A_  _x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Modules Discovered" -Value ([MyRuntime]::Modules.Count)_x000D__x000A_  _x000D__x000A_  If (-not [String]::IsNullOrEmpty($ConfigFile))_x000D__x000A_  {_x000D__x000A_    $HashTable = @{"ShowHeader" = $False; "ConfigFile" = $ConfigFile }    _x000D__x000A_    $DialogResult = Load-PILConfigFIle -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionIndent = 10_x000D__x000A_    $RichTextBox.SelectionBullet = $False_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    If ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_    {_x000D__x000A_      $FinalMsg = "Initialization was Successful"_x000D__x000A_      $FinalClr = [MyConfig]::Colors.TextGood_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $FinalMsg = "Initialization Failed"_x000D__x000A_      $FinalClr = [MyConfig]::Colors.TextBad_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $FinalMsg_x000D__x000A_    $StopWatch.Stop()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Display-InitiliazePILUtility"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Write-RichTextBoxError</S>
            <Obj N="Value" RefId="156">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Write-RichTextBoxError</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Write Error Message to RichTextBox_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Write Error Message to RichTextBox_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-RichTextBoxError -RichTextBox $RichTextBox_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox_x000D__x000A_  )_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value ($($Error[0].Exception.Message)) -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "CODE" -TextFore ([MyConfig]::Colors.TextBad) -Value (($Error[0].InvocationInfo.Line).Trim()) -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "LINE" -TextFore ([MyConfig]::Colors.TextBad) -Value ($Error[0].InvocationInfo.ScriptLineNumber) -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MyRSJob</S>
            <Obj N="Value" RefId="157">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MyRSJob</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates or Updates a RunspacePool_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to add new RunspacePool Jobs to_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RunspacePool_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of RunspacePool_x000D__x000A_    .PARAMETER InputObject_x000D__x000A_      Object / Value to pass to the RunspacePool Job ScriptBlock_x000D__x000A_    .PARAMETER InputParam_x000D__x000A_      Paramter to pass the Object / Value as_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of RunspacePool Jobs_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      RunspacePool Job ScriptBock to Execute_x000D__x000A_    .PARAMETER Parameters_x000D__x000A_      Common Paramaters to pass to the RunspacePool Job ScriptBlock_x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      Return the New Jobs to the Pipeline_x000D__x000A_    .EXAMPLE_x000D__x000A_      Start-MyRSJob -ScriptBlock $ScriptBlock -JobName $JobName -InputObject $InputObject_x000D__x000A__x000D__x000A_      Add new RSJobs to the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $InputObject | Start-MyRSJob -ScriptBlock $ScriptBlock -RSPool $RSPool -JobName $JobName_x000D__x000A__x000D__x000A_      $InputObject | Start-MyRSJob -ScriptBlock $ScriptBlock -PoolName $PoolName -JobName $JobName_x000D__x000A__x000D__x000A_      $InputObject | Start-MyRSJob -ScriptBlock $ScriptBlock -PoolID $PoolID -JobName $JobName_x000D__x000A__x000D__x000A_      Add new RSJobs to the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "PoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "RSPool")]_x000D__x000A_    [MyRSPool]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [Object[]]$InputObject,_x000D__x000A_    [String]$InputParam = "InputObject",_x000D__x000A_    [String]$JobName = "Job Name",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [ScriptBlock]$ScriptBlock,_x000D__x000A_    [Hashtable]$Parameters,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Start-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    Switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "RSPool" {_x000D__x000A_        # Set Pool_x000D__x000A_        $TempPool = $RSPool_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolName" {_x000D__x000A_        # Set Pool Name and Return Matching Pools_x000D__x000A_        $TempPool = [MyRSPool](Start-MyRSPool -PoolName $PoolName -PassThru)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolID" {_x000D__x000A_        # Set PoolID Return Matching Pools_x000D__x000A_        $TempPool = [MyRSPool](Get-MyRSPool -PoolID $PoolID)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for New Jobs_x000D__x000A_    $NewJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Start-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Start-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("InputObject"))_x000D__x000A_    {_x000D__x000A_      ForEach ($Object in $InputObject)_x000D__x000A_      {_x000D__x000A_        # Create New PowerShell Instance with ScriptBlock_x000D__x000A_        $PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript($ScriptBlock)_x000D__x000A_        # Set RunspacePool_x000D__x000A_        $PowerShell.RunspacePool = $TempPool.RunspacePool_x000D__x000A_        # Add Parameters_x000D__x000A_        [Void]$PowerShell.AddParameter($InputParam, $Object)_x000D__x000A_        if ($PSBoundParameters.ContainsKey("Parameters"))_x000D__x000A_        {_x000D__x000A_          [Void]$PowerShell.AddParameters($Parameters)_x000D__x000A_        }_x000D__x000A_        # set Job Name_x000D__x000A_        if (($Object -is [String]) -or ($Object -is [ValueType]))_x000D__x000A_        {_x000D__x000A_          $TempJobName = "$JobName - $($Object)"_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $TempJobName = $($Object.$JobName)_x000D__x000A_        }_x000D__x000A_        [Void]$NewJobs.Add(([MyRSjob]::New($TempJobName, $PowerShell, $PowerShell.BeginInvoke(), $Object, $TempPool.Name, $TempPool.InstanceID)))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      # Create New PowerShell Instance with ScriptBlock_x000D__x000A_      $PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript($ScriptBlock)_x000D__x000A_      # Set RunspacePool_x000D__x000A_      $PowerShell.RunspacePool = $TempPool.RunspacePool_x000D__x000A_      # Add Parameters_x000D__x000A_      if ($PSBoundParameters.ContainsKey("Parameters"))_x000D__x000A_      {_x000D__x000A_        [Void]$PowerShell.AddParameters($Parameters)_x000D__x000A_      }_x000D__x000A_      [Void]$NewJobs.Add(([MyRSjob]::New($JobName, $PowerShell, $PowerShell.BeginInvoke(), $Null, $TempPool.Name, $TempPool.InstanceID)))_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Start-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Start-MyRSJob End Block"_x000D__x000A__x000D__x000A_    if ($NewJobs.Count)_x000D__x000A_    {_x000D__x000A_      $TempPool.Jobs.AddRange($NewJobs)_x000D__x000A_      # Return Jobs only if New RunspacePool_x000D__x000A_      if ($PassThru.IsPresent)_x000D__x000A_      {_x000D__x000A_        [MyRSJob[]]($NewJobs)_x000D__x000A_      }_x000D__x000A_      $NewJobs.Clear()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Start-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-ListViewItem</S>
            <Obj N="Value" RefId="158">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-ListViewItem</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new ListViewItem to a ListView control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ListViewItem with the specified properties and adds it to the provided ListView control._x000D__x000A_      It supports customization of text, name, subitems, tag, indentation, group, tooltip, checked state, font, colors, and image (by index or key)._x000D__x000A_      The new ListViewItem can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER ListView_x000D__x000A_      The ListView control to which the new ListViewItem will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the ListViewItem. Defaults to [MyConfig]::Colors.TextBack._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the ListViewItem. Defaults to [MyConfig]::Colors.TextFore._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the ListViewItem text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new ListViewItem. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new ListViewItem. This parameter is mandatory._x000D__x000A_    .PARAMETER SubItems_x000D__x000A_      An array of strings to add as subitems to the ListViewItem._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new ListViewItem._x000D__x000A_    .PARAMETER IndentCount_x000D__x000A_      The number of indentation levels to apply to the ListViewItem. Only used with ImageIndex or ImageKey parameter sets._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the ListViewItem. Used when specifying images by index._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the ListViewItem. Used when specifying images by key._x000D__x000A_    .PARAMETER Group_x000D__x000A_      The ListViewGroup to which the new ListViewItem will be added._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the ListViewItem._x000D__x000A_    .PARAMETER Checked_x000D__x000A_      If specified, sets the ListViewItem's Checked property to $true._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created ListViewItem object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-ListViewItem -ListView $listView -Text "Text" -Tag "Tag"_x000D__x000A_      Adds a new ListViewItem with text "Text" and tag "Tag" to $listView._x000D__x000A_    .EXAMPLE_x000D__x000A_      $item = New-ListViewItem -ListView $listView -Text "Item1" -ImageIndex 2 -SubItems @("Sub1","Sub2") -PassThru_x000D__x000A_      Adds a new ListViewItem with an image at index 2 and subitems, and returns the created ListViewItem object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$ListView,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [String]$Name,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String[]]$SubItems,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Index")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Key")]_x000D__x000A_    [Int]$IndentCount = 0,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Index")]_x000D__x000A_    [Int]$ImageIndex = -1,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Key")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [System.Windows.Forms.ListViewGroup]$Group,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [Switch]$Checked,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempListViewItem = [System.Windows.Forms.ListViewItem]_x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "Default")_x000D__x000A_  {_x000D__x000A_    $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $Group)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "Index")_x000D__x000A_    {_x000D__x000A_      $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $ImageIndex, $Group)_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $ImageKey, $Group)_x000D__x000A_    }_x000D__x000A_    $TempListViewItem.IndentCount = $IndentCount_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempListViewItem.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempListViewItem.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempListViewItem.Tag = $Tag_x000D__x000A_  $TempListViewItem.ToolTipText = $ToolTip_x000D__x000A_  $TempListViewItem.Checked = $Checked.IsPresent_x000D__x000A__x000D__x000A_  $TempListViewItem.BackColor = $BackColor_x000D__x000A_  $TempListViewItem.ForeColor = $ForeColor_x000D__x000A_  $TempListViewItem.Font = $Font_x000D__x000A_  if ($PSBoundParameters.ContainsKey("SubItems"))_x000D__x000A_  {_x000D__x000A_    $TempListViewItem.SubItems.AddRange($SubItems)_x000D__x000A_  }_x000D__x000A_  #endregion $TempListViewItem = [System.Windows.Forms.ListViewItem]_x000D__x000A__x000D__x000A_  [Void]$ListView.Items.Add($TempListViewItem)_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempListViewItem_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempListViewItem = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputFormShown</S>
            <Obj N="Value" RefId="159">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the TextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the TextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$TextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TextBoxInputTextBox.DeselectAll()_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$TextBoxInputForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Encode-MyData</S>
            <Obj N="Value" RefId="160">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Encode-MyData</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encodes or decodes data to and from Base64 format._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encodes a string to Base64 with optional line length, or decodes a Base64 string back to its original form. _x000D__x000A_      It supports output as a string or as an array of characters._x000D__x000A_    .PARAMETER Data_x000D__x000A_      The string data to encode or decode. When encoding, this is the plain text to convert to Base64. When decoding, this is the Base64 string to convert back._x000D__x000A_    .PARAMETER LineLength_x000D__x000A_      The maximum length of each line in the encoded Base64 output. Only used when encoding. Default is 160._x000D__x000A_    .PARAMETER Decode_x000D__x000A_      Switch to indicate that the operation should decode the input Base64 string instead of encoding._x000D__x000A_    .PARAMETER AsString_x000D__x000A_      When decoding, outputs the result as a string instead of an array of characters._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encode-MyData -Data "MySecret" _x000D__x000A_      Encodes the string "MySecret" to Base64._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encode-MyData -Data $Base64String -Decode_x000D__x000A_      Decodes the Base64 string back to its original value._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encode-MyData -Data $Base64String -Decode -AsString_x000D__x000A_      Decodes the Base64 string and returns the result as a string._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Encode")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Data,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Encode")]_x000D__x000A_    [Int]$LineLength = 160,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Decode")]_x000D__x000A_    [Switch]$Decode,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Decode")]_x000D__x000A_    [Switch]$AsString_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "Encode")_x000D__x000A_  {_x000D__x000A_    $StreamWriter = [System.IO.StreamWriter]::New($MemoryStream, [System.Text.Encoding]::UTF8)_x000D__x000A_    $StreamWriter.Write($Data)_x000D__x000A_    $StreamWriter.Close()_x000D__x000A__x000D__x000A_    $Encoded = [System.Text.StringBuilder]::New()_x000D__x000A_    ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?&lt;=\G.{$LineLength})(?=.)"))_x000D__x000A_    {_x000D__x000A_      [Void]$Encoded.AppendLine($Line)_x000D__x000A_    }_x000D__x000A_    $Encoded.ToString()_x000D__x000A_    $MemoryStream.Close()_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $CompressedData = [System.Convert]::FromBase64String($Data)_x000D__x000A_    $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)_x000D__x000A_    [Void]$MemoryStream.Seek(0, 0)_x000D__x000A_    $StreamReader = [System.IO.StreamReader]::New($MemoryStream, [System.Text.Encoding]::UTF8)_x000D__x000A__x000D__x000A_    if ($AsString.IsPresent)_x000D__x000A_    {_x000D__x000A_      $StreamReader.ReadToEnd()_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $ArrayList = [System.Collections.ArrayList]::New()_x000D__x000A_      $Buffer = [System.Char[]]::New(4096)_x000D__x000A_      While ($StreamReader.EndOfStream -eq $False)_x000D__x000A_      {_x000D__x000A_        $Bytes = $StreamReader.Read($Buffer, 0, 4096)_x000D__x000A_        if ($Bytes)_x000D__x000A_        {_x000D__x000A_          $ArrayList.AddRange($Buffer[0 .. ($Bytes - 1)])_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $ArrayList_x000D__x000A_      $ArrayList.Clear()_x000D__x000A_    }_x000D__x000A_    $StreamReader.Close()_x000D__x000A_    $MemoryStream.Close()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputTextBoxGotFocus</S>
            <Obj N="Value" RefId="161">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputTextBoxGotFocus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      GotFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      GotFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the GotFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox GotFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter GotFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ($Sender.Tag.HintEnabled)_x000D__x000A_    {_x000D__x000A_      $Sender.Text = ""_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit GotFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputBtmLeftButtonClick</S>
            <Obj N="Value" RefId="162">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TmpValidCheck = $MultiTextBoxInputForm.Tag_x000D__x000A_    ForEach ($Key In @($OrderedItems.Keys))_x000D__x000A_    {_x000D__x000A_      $TmpItemValue = "$($MultiTextBoxInputGroupBox.Controls[$Key].Text)".Trim()_x000D__x000A_      $ChkItemValue = (-not (([String]::IsNullOrEmpty($TmpItemValue) -or $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled)))_x000D__x000A_      if ($ChkItemValue)_x000D__x000A_      {_x000D__x000A_        $OrderedItems[$Key] = $TmpItemValue_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $OrderedItems[$Key] = $Null_x000D__x000A_      }_x000D__x000A__x000D__x000A_      if ($MultiTextBoxInputForm.Tag)_x000D__x000A_      {_x000D__x000A_        $TmpValidCheck = $ChkItemValue -and $TmpValidCheck_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TmpValidCheck = $ChkItemValue -or $TmpValidCheck_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    If ($TmpValidCheck)_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($MultiTextBoxInputForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-MenuButton</S>
            <Obj N="Value" RefId="163">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-MenuButton</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuButton (ToolStripButton) to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripButton with the specified properties and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of text, name, tooltip, icon, image index/key, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors._x000D__x000A_      The new MenuButton can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuButton will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new MenuButton. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new MenuButton. If not specified, the Text value is used._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the MenuButton._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      The icon to display for the MenuButton. Used when specifying images by icon. Mandatory for the 'Icon' parameter set._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the MenuButton. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the MenuButton. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set._x000D__x000A_    .PARAMETER DisplayStyle_x000D__x000A_      Specifies how the MenuButton displays its image and text. Defaults to 'Text'._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      Specifies the alignment of the MenuButton's text and image. Defaults to 'MiddleCenter'._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new MenuButton._x000D__x000A_    .PARAMETER Disable_x000D__x000A_      If specified, disables the MenuButton (sets Enabled to $false)._x000D__x000A_    .PARAMETER Check_x000D__x000A_      If specified, sets the MenuButton's Checked property to $true._x000D__x000A_    .PARAMETER ClickOnCheck_x000D__x000A_      If specified, enables the CheckOnClick property for the MenuButton._x000D__x000A_    .PARAMETER ShortcutKeys_x000D__x000A_      Specifies the shortcut keys for the MenuButton. Defaults to 'None'._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the MenuButton text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuButton. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the MenuButton. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created MenuButton object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-MenuButton -Menu $toolStrip -Text "Run" -Tag "RunAction"_x000D__x000A_      Adds a new MenuButton with text "Run" and tag "RunAction" to $toolStrip._x000D__x000A_    .EXAMPLE_x000D__x000A_      $button = New-MenuButton -Menu $toolStrip -Text "Save" -ImageIndex 1 -PassThru_x000D__x000A_      Adds a new MenuButton with an image at index 1 and returns the created MenuButton object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [String]$Text,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Name,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Icon")]_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]_x000D__x000A_    [Int]$ImageIndex,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [System.Windows.Forms.TextImageRelation]$TextImageRelation = "ImageBeforeText",_x000D__x000A_    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",_x000D__x000A_    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Switch]$Disable,_x000D__x000A_    [Switch]$Check,_x000D__x000A_    [Switch]$ClickOnCheck,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempMenuButton = [System.Windows.Forms.ToolStripButton]_x000D__x000A_  $TempMenuButton = [System.Windows.Forms.ToolStripButton]::New($Text)_x000D__x000A__x000D__x000A_  [Void]$Menu.Items.Add($TempMenuButton)_x000D__x000A_  _x000D__x000A_  $TempMenuButton.AutoSize = $False_x000D__x000A_  $TempMenuButton.Name = $Name_x000D__x000A_  $TempMenuButton.Tag = $Tag_x000D__x000A_  $TempMenuButton.ToolTipText = $ToolTip_x000D__x000A_  $TempMenuButton.TextAlign = $Alignment_x000D__x000A_  $TempMenuButton.Checked = $Check.IsPresent_x000D__x000A_  $TempMenuButton.CheckOnClick = $ClickOnCheck.IsPresent_x000D__x000A_  $TempMenuButton.DisplayStyle = $DisplayStyle_x000D__x000A_  $TempMenuButton.TextImageRelation = $TextImageRelation_x000D__x000A_  $TempMenuButton.Size = $Menu.ImageScalingSize_x000D__x000A_  $TempMenuButton.Enabled = (-not $Disable.IsPresent)_x000D__x000A__x000D__x000A_  $TempMenuButton.BackColor = $BackColor_x000D__x000A_  $TempMenuButton.ForeColor = $ForeColor_x000D__x000A_  $TempMenuButton.Font = $Font_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -ne "Default")_x000D__x000A_  {_x000D__x000A_    switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "Icon"_x000D__x000A_      {_x000D__x000A_        $TempMenuButton.Image = $Icon_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageIndex"_x000D__x000A_      {_x000D__x000A_        $TempMenuButton.ImageIndex = $ImageIndex_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageKey"_x000D__x000A_      {_x000D__x000A_        $TempMenuButton.ImageKey = $ImageKey_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $TempMenuButton.ImageAlign = $Alignment_x000D__x000A_  }_x000D__x000A_  #endregion $TempMenuButton = [System.Windows.Forms.ToolStripButton]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempMenuButton_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuButton = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckBoxOptionBtmMidButtonClick</S>
            <Obj N="Value" RefId="164">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckBoxOptionBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($CheckBox In @($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))_x000D__x000A_    {_x000D__x000A_      $CheckBox.Checked = ($CheckBox.Tag -in $Selected)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RichTextStatusFormShown</S>
            <Obj N="Value" RefId="165">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RichTextStatusFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $RichTextStatus Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $RichTextStatus Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-RichTextStatusFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$RichTextStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Disable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = $False_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PassHashTable)_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox, $HashTable_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox_x000D__x000A_    }_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Re-enable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($RichTextStatusButtons)_x000D__x000A_    {_x000D__x000A_      1_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmMidButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmMidButton.DialogResult = $DialogResult_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      2_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmRightButton.Enabled = $True_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      3_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmMidButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmRightButton.Enabled = $True_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Sender.Tag.Finished = $True_x000D__x000A__x000D__x000A_    if ((($DialogResult -eq $ButtonDefault) -and $AutoClose.IsPresent) -or ($RichTextStatusButtons -eq 0))_x000D__x000A_    {_x000D__x000A_      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_      while ($StopWatch.Elapsed.TotalMilliseconds -le $AutoCloseWait)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(10)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A__x000D__x000A_      $Sender.DialogResult = $DialogResult_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$RichTextStatusForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputBtmLeftButtonClick</S>
            <Obj N="Value" RefId="166">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ((-not $TextBoxInputTextBox.Tag.HintEnabled) -and ("$($TextBoxInputTextBox.Text.Trim())".Length -gt 0))_x000D__x000A_    {_x000D__x000A_      $ChkOutput = $True_x000D__x000A_      ($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { $ChkOutput = ($ChkOutput -and $PSItem -match $ValidOutput) }_x000D__x000A_      If ($ChkOutput)_x000D__x000A_      {_x000D__x000A_        $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Missing Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Invoke-MyPause</S>
            <Obj N="Value" RefId="167">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Invoke-MyPause</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Pauses script execution for a specified number of Milliseconds or until a condition is met._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function pauses the script for the specified number of Milliseconds. Optionally, a ScriptBlock can be provided to determine if the pause should continue. _x000D__x000A_      The function processes Windows Forms events during the pause._x000D__x000A_    .PARAMETER Milliseconds_x000D__x000A_      The number of Milliseconds to pause the script. Default is 60._x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      A ScriptBlock that returns $True to continue pausing or $False to stop. Default is { $True }._x000D__x000A_    .EXAMPLE_x000D__x000A_      Invoke-MyPause -Milliseconds 30_x000D__x000A_      Pauses the script for 30 Milliseconds._x000D__x000A_    .EXAMPLE_x000D__x000A_      Invoke-MyPause -Milliseconds 10 -ScriptBlock { $global:ContinuePause }_x000D__x000A_      Pauses the script for up to 10 Milliseconds or until $global:ContinuePause is $False._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [UInt16]$Milliseconds = 60,_x000D__x000A_    [ScriptBlock]$ScriptBlock = { $True }_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Invoke-MyPause"_x000D__x000A__x000D__x000A_  $TmpPause = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  do_x000D__x000A_  {_x000D__x000A_    [System.Threading.Thread]::Sleep(10)_x000D__x000A_    $WaitCheck = $ScriptBlock.Invoke()_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_  }_x000D__x000A_  while (($TmpPause.Elapsed.TotalMilliseconds -lt $Milliseconds) -and $WaitCheck)_x000D__x000A_  $TmpPause.Stop()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Invoke-MyPause"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-Function01</S>
            <Obj N="Value" RefId="168">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-Function01</S>
                <S N="ScriptBlock"> Get-Command </S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionListViewDrawSubItem</S>
            <Obj N="Value" RefId="169">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionListViewDrawSubItem</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawSubItem Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawSubItem Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawSubItem Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawSubItem Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawSubItem -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawSubItem Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Return to Default Draw_x000D__x000A_    $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawSubItem Event for `$ListViewOptionListView"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxOptionFormShown</S>
            <Obj N="Value" RefId="170">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxOptionFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ComboBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ComboBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ComboBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ComboBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputBtmMidButtonClick</S>
            <Obj N="Value" RefId="171">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = $TextBoxInputTextBox.Tag.Items_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = $TextBoxInputTextBox.Tag.Items_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    $TextBoxInputTextBox.Tag.HintEnabled = ($TextBoxInputTextBox.TextLength -gt 0)_x000D__x000A_    Start-TextBoxInputTextBoxLostFocus -Sender $TextBoxInputTextBox -EventArg "LostFocus"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionBtmMidButtonClick</S>
            <Obj N="Value" RefId="172">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_    $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }_x000D__x000A_    if ($CheckedListBoxOptionCheckedListBox.Tag.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxFilterFormShown</S>
            <Obj N="Value" RefId="173">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxFilterFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ComboBoxFilter Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ComboBoxFilter Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ComboBoxFilterForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ComboBoxFilterForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Convert-MyImageToBase64</S>
            <Obj N="Value" RefId="174">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Convert-MyImageToBase64</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Converts an image or icon to a Base64-encoded text block for embedding in scripts._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function converts an image file (such as .ico, .gif, .jpg, etc.) or a System.Drawing.Icon object into a Base64-encoded string, formatted for easy inclusion in PowerShell scripts. _x000D__x000A_      The output includes region markers and variable assignment for direct use. You can specify the output variable name and the maximum line length for the Base64 string._x000D__x000A_    .PARAMETER ScriptName_x000D__x000A_      The name of the script or variable prefix to use in the generated code for referencing the image list. Optional._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      A System.Drawing.Icon object to convert to Base64. Use this parameter set to encode an icon object directly._x000D__x000A_    .PARAMETER Path_x000D__x000A_      The file path to the image to convert. Supported formats include .ico, .gif, .jpg, and others supported by System.Drawing.Image._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The variable name to assign the Base64 string to in the generated code. This should be a valid PowerShell variable name._x000D__x000A_    .PARAMETER LineSize_x000D__x000A_      The maximum number of characters per line in the Base64 output. Default is 160._x000D__x000A_    .EXAMPLE_x000D__x000A_      Convert-MyImageToBase64 -Path "C:\Icons\myicon.ico" -Name "MyIcon"_x000D__x000A_      Converts the specified .ico file to a Base64 string and outputs PowerShell code assigning it to $MyIcon._x000D__x000A_    .EXAMPLE_x000D__x000A_      $icon = [System.Drawing.Icon]::ExtractAssociatedIcon("C:\Windows\System32\notepad.exe")_x000D__x000A_      Convert-MyImageToBase64 -Icon $icon -Name "NotepadIcon"_x000D__x000A_      Converts the provided Icon object to Base64 and outputs PowerShell code assigning it to $NotepadIcon._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet. Useful for embedding images or icons in PowerShell GUIs or scripts._x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "File")]_x000D__x000A_  Param (_x000D__x000A_    [String]$ScriptName,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Icon")]_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "File")]_x000D__x000A_    [String]$Path,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Name,_x000D__x000A_    [int]$LineSize = 160_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $StringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A__x000D__x000A_  $ImageName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "").Replace("ico", "Icon")_x000D__x000A_  [Void]$StringBuilder.AppendLine("#region ******** `$$($ImageName) ********")_x000D__x000A_  [Void]$StringBuilder.AppendLine("`$$($ImageName) = @`"")_x000D__x000A_  $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "File")_x000D__x000A_  {_x000D__x000A_    Switch ([System.IO.Path]::GetExtension($Path))_x000D__x000A_    {_x000D__x000A_      ".ico"_x000D__x000A_      {_x000D__x000A_        $Image = [System.Drawing.Icon]::New($Path)_x000D__x000A_        $Image.Save($MemoryStream)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      ".gif"_x000D__x000A_      {_x000D__x000A_        $Image = [System.Drawing.Image]::FromFile($Path)_x000D__x000A_        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Gif)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      Default_x000D__x000A_      {_x000D__x000A_        $Image = [System.Drawing.Image]::FromFile($Path)_x000D__x000A_        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Jpeg)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $Image = $Icon_x000D__x000A_    $Image.Save($MemoryStream)_x000D__x000A_  }_x000D__x000A_  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?&lt;=\G.{$LineSize})(?=.)"))_x000D__x000A_  {_x000D__x000A_    [Void]$StringBuilder.AppendLine($Line)_x000D__x000A_  }_x000D__x000A_  $MemoryStream.Close()_x000D__x000A_  [Void]$StringBuilder.AppendLine("`"@")_x000D__x000A_  [Void]$StringBuilder.AppendLine("#endregion ******** `$$($ImageName) ********")_x000D__x000A_  if (([System.IO.Path]::GetExtension($path) -eq ".ico") -or ($PSCmdlet.ParameterSetName -eq "Icon"))_x000D__x000A_  {_x000D__x000A_    #[Void]$StringBuilder.AppendLine("#`$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")_x000D__x000A_    [Void]$StringBuilder.AppendLine("`$$($ScriptName)ImageList.Images.Add(`"$($ImageName)`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName)))))")_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$StringBuilder.AppendLine("#`$PictureBox.Image = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")_x000D__x000A_  }_x000D__x000A_  $StringBuilder.ToString()_x000D__x000A__x000D__x000A_  $Image = $Null_x000D__x000A_  $MemoryStream = $Null_x000D__x000A_  $StringBuilder = $Null_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Show-ProgressBarStatus</S>
            <Obj N="Value" RefId="175">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Show-ProgressBarStatus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-ProgressBarStatus_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-ProgressBarStatus_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-ProgressBarStatus Dialog Window_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      Script Block to Execure_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      HashTable of Paramerts to Pass to the ScriptBlock_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Show-ProgressBarStatus Dialog Window_x000D__x000A_    .PARAMETER AllowControl_x000D__x000A_      Enable Pause and Break out of Script Block_x000D__x000A_    .EXAMPLE_x000D__x000A_      $HashTable = @{"Values" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}_x000D__x000A_      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]$ProgressBar, [System.Windows.Forms.Label]$Label) Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label }_x000D__x000A_      $DialogResult = Show-ProgressBarStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)"_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [ScriptBlock]$ScriptBlock = { },_x000D__x000A_    [HashTable]$HashTable = @{ },_x000D__x000A_    [Int]$Width = 45,_x000D__x000A_    [Switch]$AllowControl_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-ProgressBarStatus"_x000D__x000A__x000D__x000A_  #region ******** Begin **** $ProgressBarStatus **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $ProgressBarStatus Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ProgressBarStatusForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ProgressBarStatusForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ProgressBarStatusForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ProgressBarStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ProgressBarStatusForm.Icon = $PILForm.Icon_x000D__x000A_  $ProgressBarStatusForm.KeyPreview = $AllowControl.IsPresent_x000D__x000A_  $ProgressBarStatusForm.MaximizeBox = $False_x000D__x000A_  $ProgressBarStatusForm.MinimizeBox = $False_x000D__x000A_  $ProgressBarStatusForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ProgressBarStatusForm.Name = "ProgressBarStatusForm"_x000D__x000A_  $ProgressBarStatusForm.Owner = $PILForm_x000D__x000A_  $ProgressBarStatusForm.ShowInTaskbar = $False_x000D__x000A_  $ProgressBarStatusForm.Size = $ProgressBarStatusForm.MinimumSize_x000D__x000A_  $ProgressBarStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ProgressBarStatusForm.Tag = @{ "Cancel" = $False; "Pause" = $False; "Finished" = $True }_x000D__x000A_  $ProgressBarStatusForm.Text = $Title_x000D__x000A_  #endregion $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ProgressBarStatusFormKeyDown ********_x000D__x000A_  Function Start-ProgressBarStatusFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the ProgressBarStatus Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the ProgressBarStatus Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ProgressBarStatusFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ProgressBarStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Cancel = $True_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }_x000D__x000A_        {_x000D__x000A_          if ($Sender.Tag.Finished)_x000D__x000A_          {_x000D__x000A_            $Sender.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_          }_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ProgressBarStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ProgressBarStatusFormKeyDown ********_x000D__x000A_  If ($AllowControl.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ProgressBarStatusForm.add_KeyDown({ Start-ProgressBarStatusFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-ProgressBarStatusFormShown ********_x000D__x000A_  Function Start-ProgressBarStatusFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $ProgressBarStatus Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $ProgressBarStatus Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ProgressBarStatusFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ProgressBarStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Disable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = $False_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    if ($PassHashTable)_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel, $HashTable_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    $Sender.Tag.Finished = $True_x000D__x000A_    _x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Re-enable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $ProgressBarStatusForm.DialogResult = $DialogResult_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ProgressBarStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ProgressBarStatusFormShown ********_x000D__x000A_  $ProgressBarStatusForm.add_Shown({ Start-ProgressBarStatusFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for $ProgressBarStatus Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $ProgressBarStatus Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ProgressBarStatusForm.Controls.Add($ProgressBarStatusPanel)_x000D__x000A_  $ProgressBarStatusPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ProgressBarStatusPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ProgressBarStatusPanel.Name = "ProgressBarStatusPanel"_x000D__x000A_  #endregion $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ProgressBarStatusPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ProgressBarStatusPanel.Controls.Add($ProgressBarStatusLabel)_x000D__x000A_  $ProgressBarStatusLabel.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ProgressBarStatusLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_  $ProgressBarStatusLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ProgressBarStatusLabel.Name = "ProgressBarStatusLabel"_x000D__x000A_  $ProgressBarStatusLabel.Size = [System.Drawing.Size]::New(($ProgressBarStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * 2))_x000D__x000A_  $ProgressBarStatusLabel.Text = $Null_x000D__x000A_  $ProgressBarStatusLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  #endregion $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  #region $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()_x000D__x000A_  $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()_x000D__x000A_  $ProgressBarStatusPanel.Controls.Add($ProgressBarStatusProgressBar)_x000D__x000A_  #$ProgressBarStatusProgressBar.AutoSize = $False_x000D__x000A_  $ProgressBarStatusProgressBar.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$ProgressBarStatusProgressBar.Enabled = $True_x000D__x000A_  $ProgressBarStatusProgressBar.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ProgressBarStatusProgressBar.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ProgressBarStatusProgressBar.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ProgressBarStatusLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ProgressBarStatusProgressBar.Name = "ProgressBarStatusProgressBar"_x000D__x000A_  $ProgressBarStatusProgressBar.TabStop = $False_x000D__x000A_  #$ProgressBarStatusProgressBar.Tag = [System.Object]::New()_x000D__x000A_  #$ProgressBarStatusProgressBar.Value = 0_x000D__x000A_  #$ProgressBarStatusProgressBar.Visible = $True_x000D__x000A_  $ProgressBarStatusProgressBar.Width = ($ProgressBarStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))_x000D__x000A_  #endregion $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()_x000D__x000A__x000D__x000A_  $ProgressBarStatusPanel.ClientSize = [System.Drawing.Size]::New($ProgressBarStatusPanel.ClientSize.Width, ($ProgressBarStatusProgressBar.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ProgressBarStatusPanel Controls ********_x000D__x000A__x000D__x000A_  $ProgressBarStatusForm.ClientSize = [System.Drawing.Size]::New($ProgressBarStatusForm.ClientSize.Width, $ProgressBarStatusPanel.ClientSize.Height)_x000D__x000A__x000D__x000A_  #endregion ******** Controls for $ProgressBarStatus Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** $Show-ProgressBarStatus **** End ********_x000D__x000A_  _x000D__x000A_  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")_x000D__x000A_  $DialogResult = $ProgressBarStatusForm.ShowDialog($PILForm)_x000D__x000A_  [ProgressBarStatus]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult)_x000D__x000A__x000D__x000A_  $ProgressBarStatusForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-ProgressBarStatus"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Send-MyEMail</S>
            <Obj N="Value" RefId="176">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Send-MyEMail</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Sends an E-mail message using SMTP._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function sends an E-mail message using the specified SMTP server and port. You can specify recipients, sender, subject, body, message file, HTML formatting, CC, BCC, attachments, and priority._x000D__x000A_    .PARAMETER SMTPServer_x000D__x000A_      The SMTP server to use for sending the E-mail. Default is [MyConfig]::SMTPServer._x000D__x000A_    .PARAMETER SMTPPort_x000D__x000A_      The port number to use for the SMTP server. Default is [MyConfig]::SMTPPort._x000D__x000A_    .PARAMETER To_x000D__x000A_      One or more recipient E-mail addresses. Mandatory._x000D__x000A_    .PARAMETER From_x000D__x000A_      The sender's E-mail address. Mandatory._x000D__x000A_    .PARAMETER Subject_x000D__x000A_      The subject of the E-mail message. Mandatory._x000D__x000A_    .PARAMETER Body_x000D__x000A_      The body text of the E-mail message. If a file path is provided, the contents of the file will be used as the body._x000D__x000A_    .PARAMETER IsHTML_x000D__x000A_      Indicates whether the body of the E-mail is formatted as HTML._x000D__x000A_    .PARAMETER CC_x000D__x000A_      One or more E-mail addresses to send a carbon copy (CC) of the message._x000D__x000A_    .PARAMETER BCC_x000D__x000A_      One or more E-mail addresses to send a blind carbon copy (BCC) of the message._x000D__x000A_    .PARAMETER Attachment_x000D__x000A_      One or more attachments to include with the E-mail message._x000D__x000A_    .PARAMETER Priority_x000D__x000A_      The priority of the E-mail message. Valid values are "Low", "Normal", or "High". Default is "Normal"._x000D__x000A_    .EXAMPLE_x000D__x000A_      Send-MyEMail -To "user@example.com" -From "me@example.com" -Subject "Test" -Body "Hello World" -SMTPServer "smtp.example.com" -SMTPPort 25_x000D__x000A_      Sends a simple E-mail message._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$SMTPServer = [MyConfig]::SMTPServer,_x000D__x000A_    [Int]$SMTPPort = [MyConfig]::SMTPPort,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, HelpMessage = "Enter To")]_x000D__x000A_    [System.Net.Mail.MailAddress[]]$To,_x000D__x000A_    [parameter(Mandatory = $True, HelpMessage = "Enter From")]_x000D__x000A_    [System.Net.Mail.MailAddress]$From,_x000D__x000A_    [parameter(Mandatory = $True, HelpMessage = "Enter Subject")]_x000D__x000A_    [String]$Subject,_x000D__x000A_    [parameter(Mandatory = $True, HelpMessage = "Enter Message Text")]_x000D__x000A_    [String]$Body,_x000D__x000A_    [Switch]$IsHTML,_x000D__x000A_    [System.Net.Mail.MailAddress[]]$CC,_x000D__x000A_    [System.Net.Mail.MailAddress[]]$BCC,_x000D__x000A_    [System.Net.Mail.Attachment[]]$Attachment,_x000D__x000A_    [ValidateSet("Low", "Normal", "High")]_x000D__x000A_    [System.Net.Mail.MailPriority]$Priority = "Normal"_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Send-MyEMail Begin"_x000D__x000A__x000D__x000A_    $MyMessage = [System.Net.Mail.MailMessage]::New()_x000D__x000A_    $MyMessage.From = $From_x000D__x000A_    $MyMessage.Subject = $Subject_x000D__x000A_    $MyMessage.IsBodyHtml = $IsHTML_x000D__x000A_    $MyMessage.Priority = $Priority_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("CC"))_x000D__x000A_    {_x000D__x000A_      foreach ($SendCC in $CC)_x000D__x000A_      {_x000D__x000A_        $MyMessage.CC.Add($SendCC)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("BCC"))_x000D__x000A_    {_x000D__x000A_      foreach ($SendBCC in $BCC)_x000D__x000A_      {_x000D__x000A_        $MyMessage.BCC.Add($SendBCC)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ([System.IO.File]::Exists($Body))_x000D__x000A_    {_x000D__x000A_      $MyMessage.Body = $([System.IO.File]::ReadAllText($Body))_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $MyMessage.Body = $Body_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("Attachment"))_x000D__x000A_    {_x000D__x000A_      foreach ($AttachedFile in $Attachment)_x000D__x000A_      {_x000D__x000A_        $MyMessage.Attachments.Add($AttachedFile)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Send-MyEMail Begin"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Send-MyEMail Process"_x000D__x000A__x000D__x000A_    $MyMessage.To.Clear()_x000D__x000A_    foreach ($SendTo in $To)_x000D__x000A_    {_x000D__x000A_      $MyMessage.To.Add($SendTo)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $SMTPClient = [System.Net.Mail.SmtpClient]::New($SMTPServer, $SMTPPort)_x000D__x000A_    $SMTPClient.Send($MyMessage)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Send-MyEMail Process"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Send-MyEMail End"_x000D__x000A_    Write-Verbose -Message "Exit Function Send-MyEMail End"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputFormShown</S>
            <Obj N="Value" RefId="177">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$MultiTextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$MultiTextBoxInputForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputTextBoxKeyUp</S>
            <Obj N="Value" RefId="178">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputTextBoxKeyUp</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyUp Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyUp Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the KeyUp Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox KeyUp Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyUp Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyUp Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-MyRSJob</S>
            <Obj N="Value" RefId="179">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-MyRSJob</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Get Jobs from RunspacePool that match specified criteria_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Get Jobs from RunspacePool that match specified criteria_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of Pool to Get Jobs From_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of Pool to Get Jobs From_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of Jobs to Get_x000D__x000A_    .PARAMETER JobID_x000D__x000A_      ID of Jobs to Get_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Get-MyRSJob_x000D__x000A__x000D__x000A_      Get RSJobs from the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Get-MyRSJob -RSPool $RSPool_x000D__x000A__x000D__x000A_      $MyRSJobs = Get-MyRSJob -PoolName $PoolName_x000D__x000A__x000D__x000A_      $MyRSJobs = Get-MyRSJob -PoolID $PoolID_x000D__x000A__x000D__x000A_      Get RSJobs from the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Set Job State RegEx Pattern_x000D__x000A_    if ($PSBoundParameters.ContainsKey("State"))_x000D__x000A_    {_x000D__x000A_      $StatePattern = $State -join "|"_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $StatePattern = ".*"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Switch -regex ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "Pool$" {_x000D__x000A_        # Set Pool_x000D__x000A_        $TempPools = $RSPool_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolName$" {_x000D__x000A_        # Set Pool Name and Return Matching Pools_x000D__x000A_        $TempPools = [MyRSPool[]](Get-MyRSPool -PoolName $PoolName)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolID$" {_x000D__x000A_        # Set PoolID Return Matching Pools_x000D__x000A_        $TempPools = [MyRSPool[]](Get-MyRSPool -PoolID $PoolID)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    Switch -regex ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "^JobName" {_x000D__x000A_        # Set Job Name RegEx Pattern and Return Matching Jobs_x000D__x000A_        $NamePattern = $JobName -join "|"_x000D__x000A_        [MyRSJob[]]($TempPools | ForEach-Object -Process { $PSItem.Jobs | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.Name -match $NamePattern } })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "^JobID" {_x000D__x000A_        # Set Job ID RegEx Pattern and Return Matching Jobs_x000D__x000A_        $IDPattern = $JobID -join "|"_x000D__x000A_        [MyRSJob[]]($TempPools | ForEach-Object -Process { $PSItem.Jobs | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.InstanceId -match $IDPattern } })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ProgressBarStatusFormKeyDown</S>
            <Obj N="Value" RefId="180">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ProgressBarStatusFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the ProgressBarStatus Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the ProgressBarStatus Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ProgressBarStatusFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ProgressBarStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Cancel = $True_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }_x000D__x000A_        {_x000D__x000A_          if ($Sender.Tag.Finished)_x000D__x000A_          {_x000D__x000A_            $Sender.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_          }_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ProgressBarStatusForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionFormKeyDown</S>
            <Obj N="Value" RefId="181">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$CheckedListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$CheckedListBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-TreeNode</S>
            <Obj N="Value" RefId="182">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-TreeNode</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new TreeNode to a TreeView or another TreeNode._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.TreeNode with the specified properties and adds it to the provided parent TreeNode or TreeView. _x000D__x000A_      It supports customization of text, name, tag, font, colors, images, tooltip, checked state, and expansion. _x000D__x000A_      The node can be inserted at the top or as a child node, and optionally returned via PassThru._x000D__x000A_    .PARAMETER TreeNode_x000D__x000A_      The parent TreeNode or TreeView to which the new node will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new TreeNode. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new TreeNode. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new TreeNode._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the TreeNode text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the TreeNode. Defaults to [MyConfig]::Colors.TextBack._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the TreeNode. Defaults to [MyConfig]::Colors.TextFore._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the TreeNode. Used when specifying images by index._x000D__x000A_    .PARAMETER SelectedImageIndex_x000D__x000A_      The index of the image to display when the TreeNode is selected. Used with ImageIndex parameter set._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the TreeNode. Used when specifying images by key._x000D__x000A_    .PARAMETER SelectedImageKey_x000D__x000A_      The key of the image to display when the TreeNode is selected. Used with ImageKey parameter set._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the TreeNode._x000D__x000A_    .PARAMETER AtTop_x000D__x000A_      If specified, inserts the new TreeNode at the top of the parent node's collection._x000D__x000A_    .PARAMETER Checked_x000D__x000A_      If specified, sets the TreeNode's Checked property to $true._x000D__x000A_    .PARAMETER Expand_x000D__x000A_      If specified, expands the new TreeNode after adding it._x000D__x000A_    .PARAMETER AddChild_x000D__x000A_      If specified, adds a dummy child node to the new TreeNode (useful for lazy loading)._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created TreeNode object._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-TreeNode -TreeNode $TreeNode -Text "Node1" -Tag "Data"_x000D__x000A_      Adds a new TreeNode with text "Node1" and tag "Data" to $TreeNode._x000D__x000A_    .EXAMPLE_x000D__x000A_      $node = New-TreeNode -TreeNode $TreeNode -Text "Node2" -Checked -Expand -PassThru_x000D__x000A_      Adds a checked and expanded node, and returns the created TreeNode object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Index")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$TreeNode,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Index")]_x000D__x000A_    [Int]$ImageIndex = -1,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Index")]_x000D__x000A_    [Int]$SelectedImageIndex = -1,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Key")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Key")]_x000D__x000A_    [String]$SelectedImageKey,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [switch]$AtTop,_x000D__x000A_    [switch]$Checked,_x000D__x000A_    [switch]$Expand,_x000D__x000A_    [switch]$AddChild,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempTreeNode = [System.Windows.Forms.TreeNode]_x000D__x000A_  if ($AddChild.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode = [System.Windows.Forms.TreeNode]::New($Text, [System.Windows.Forms.TreeNode]::New("*"))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempTreeNode = [System.Windows.Forms.TreeNode]::New($Text)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($AtTop.IsPresent)_x000D__x000A_  {_x000D__x000A_    [Void]$TreeNode.Nodes.Insert(0, $TempTreeNode)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$TreeNode.Nodes.Add($TempTreeNode)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($Checked.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Checked = $Checked.IsPresent_x000D__x000A_  }_x000D__x000A_  $TempTreeNode.Tag = $Tag_x000D__x000A_  $TempTreeNode.ToolTipText = $ToolTip_x000D__x000A__x000D__x000A_  $TempTreeNode.BackColor = $BackColor_x000D__x000A_  $TempTreeNode.ForeColor = $ForeColor_x000D__x000A_  $TempTreeNode.NodeFont = $Font_x000D__x000A__x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "Index"_x000D__x000A_    {_x000D__x000A_      $TempTreeNode.ImageIndex = $ImageIndex_x000D__x000A_      if ($PSBoundParameters.ContainsKey("SelectedImageIndex"))_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageIndex = $SelectedImageIndex_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageIndex = $ImageIndex_x000D__x000A_      }_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Key"_x000D__x000A_    {_x000D__x000A_      $TempTreeNode.ImageKey = $ImageKey_x000D__x000A_      if ($PSBoundParameters.ContainsKey("SelectedImageKey"))_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageKey = $SelectedImageKey_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageKey = $ImageKey_x000D__x000A_      }_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $TempTreeNode = [System.Windows.Forms.TreeNode]_x000D__x000A__x000D__x000A_  if ($Expand.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Expand()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempTreeNode = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputTextBoxGotFocus</S>
            <Obj N="Value" RefId="183">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputTextBoxGotFocus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      GotFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      GotFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the GotFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox GotFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter GotFocus Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ($Sender.Tag.HintEnabled)_x000D__x000A_    {_x000D__x000A_      $Sender.Text = ""_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit GotFocus Event for `$TextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ChangeLogFormKeyDown</S>
            <Obj N="Value" RefId="184">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ChangeLogFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the ChangeLog Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the ChangeLog Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ChangeLogFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ChangeLogForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $ChangeLogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ChangeLogForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCFunctionsContextMenuStripOpening</S>
            <Obj N="Value" RefId="185">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCFunctionsContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCFunctions ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCFunctions ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItelListToolStripItemClick</S>
            <Obj N="Value" RefId="186">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItelListToolStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the PILItelList ToolStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the PILItelList ToolStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItelList Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItelList Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItelListToolStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A_  _x000D__x000A_  If (($Sender.CheckState -eq "Unchecked") -and ($Sender.Name -in ("Process", "Pause")))_x000D__x000A_  {_x000D__x000A_    $Sender.Checked = $True_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Process"_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        _x000D__x000A_        # Set Processing ToolStrip Menu Items_x000D__x000A_        $PILItelListToolStrip.Items["Pause"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Processing Item List"_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Pause"_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        _x000D__x000A_        # Set Pauseing ToolStrip Menu Items_x000D__x000A_        $PILItelListToolStrip.Items["Process"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Pause Processing Item List"_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Stop"_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        _x000D__x000A_        # Set Stopping ToolStrip Menu Items_x000D__x000A_        $PILItelListToolStrip.Items["Process"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Pause"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.SendToBack()_x000D__x000A_        _x000D__x000A_        # Re-Enable Main Menu Items_x000D__x000A_        $PILTopMenuStrip.Items["AddItems"].Enabled = $True_x000D__x000A_        $PILTopMenuStrip.Items["Configure"].Enabled = $True_x000D__x000A_        $PILTopMenuStrip.Items["ProcessItems"].Enabled = $True_x000D__x000A_        $PILTopMenuStrip.Items["ListData"].Enabled = $True_x000D__x000A_        _x000D__x000A_        # Re-Enable Right Click Menu_x000D__x000A_        $PILItemListContextMenuStrip.Enabled = $True_x000D__x000A_        _x000D__x000A_        # Enable ListView Sort_x000D__x000A_        $PILItemListListView.ListViewItemSorter.Enable = $True_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Stop Processing Item List"_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputTextBoxKeyDown</S>
            <Obj N="Value" RefId="187">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputTextBoxKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the GetMultiValueMain TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the GetMultiValueMain TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The TextBox Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the TextBox KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputBtmLeftButton.PerformClick()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionContextMenuStripOpening</S>
            <Obj N="Value" RefId="188">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the CheckedListBoxOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the CheckedListBoxOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$CheckedListBoxOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$CheckedListBoxOptionContextMenuStrip"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-RadioButtonOptionFormKeyDown</S>
            <Obj N="Value" RefId="189">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-RadioButtonOptionFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the RadioButtonOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the RadioButtonOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$RadioButtonOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $RadioButtonOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$RadioButtonOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionTextBoxGotFocus</S>
            <Obj N="Value" RefId="190">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionTextBoxGotFocus</S>
                <S N="ScriptBlock">{_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          GotFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          GotFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the GotFocus Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox GotFocus Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter GotFocus Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_      If ($Sender.Tag.HintEnabled)_x000D__x000A_      {_x000D__x000A_        $Sender.Text = ""_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit GotFocus Event for `$ListViewOptionTextBox"_x000D__x000A_    }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionBtmMidButtonClick</S>
            <Obj N="Value" RefId="191">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ([String]::IsNullOrEmpty($Selected))_x000D__x000A_    {_x000D__x000A_      $ListViewOptionListView.SelectedItems.Clear()_x000D__x000A_      $ListViewOptionListView.Items | ForEach-Object -Process { $PSItem.Checked = $False }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      foreach ($Item in $ListViewOptionListView.Items)_x000D__x000A_      {_x000D__x000A_        $Item.Selected = ($Item.Tag -in $Selected)_x000D__x000A_        $Item.Checked = ($Multi.IsPresent -and $Item.Selected)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $ListViewOptionListView.Refresh()_x000D__x000A_    $ListViewOptionListView.Select()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Show-AlertMessage</S>
            <Obj N="Value" RefId="192">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Show-AlertMessage</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-AlertMessage_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-AlertMessage_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-AlertMessage Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Alert Message to Display_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Show-AlertMessage Dialog Window_x000D__x000A_    .PARAMETER MsgType_x000D__x000A_      Type of Alert Message to SHow_x000D__x000A_    .EXAMPLE_x000D__x000A_      Show-AlertMessage -Title "Example Alert" -Message "Show Success, Warning, Error, and Information Alert Messages"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Title,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [ValidateSet("Success", "Warning", "Error", "Info")]_x000D__x000A_    [String]$MsgType = "Info"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-AlertMessage"_x000D__x000A__x000D__x000A_  #region ******** Begin **** $AlertMessage **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $AlertMessage Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $AlertMessageForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $AlertMessageForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $AlertMessageForm.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $AlertMessageForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $AlertMessageForm.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $AlertMessageForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A__x000D__x000A_  switch ($MsgType)_x000D__x000A_  {_x000D__x000A_    "Success"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Shield_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Warning"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Warning_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Error"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Error_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Info"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Information_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $AlertMessageForm.KeyPreview = $True_x000D__x000A_  $AlertMessageForm.MaximizeBox = $False_x000D__x000A_  $AlertMessageForm.MinimizeBox = $False_x000D__x000A_  $AlertMessageForm.Name = "AlertMessageForm"_x000D__x000A_  $AlertMessageForm.Owner = $PILForm_x000D__x000A_  $AlertMessageForm.ShowInTaskbar = $False_x000D__x000A_  $AlertMessageForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))_x000D__x000A_  $AlertMessageForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $AlertMessageForm.Tag = @{ "Cancel" = $False; "Pause" = $False }_x000D__x000A_  $AlertMessageForm.Text = $Title_x000D__x000A_  #endregion $AlertMessageForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-AlertMessageFormKeyDown ********_x000D__x000A_  Function Start-AlertMessageFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the AlertMessage Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the AlertMessage Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-AlertMessageFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$AlertMessageForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$AlertMessageForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-AlertMessageFormKeyDown ********_x000D__x000A_  $AlertMessageForm.add_KeyDown({ Start-AlertMessageFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-AlertMessageFormShown ********_x000D__x000A_  Function Start-AlertMessageFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $AlertMessage Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $AlertMessage Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-AlertMessageFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$AlertMessageForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$AlertMessageForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-AlertMessageFormShown ********_x000D__x000A_  $AlertMessageForm.add_Shown({ Start-AlertMessageFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for $AlertMessage Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $AlertMessage Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $AlertMessagePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessagePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessageForm.Controls.Add($AlertMessagePanel)_x000D__x000A_  $AlertMessagePanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $AlertMessagePanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $AlertMessagePanel.Name = "AlertMessagePanel"_x000D__x000A_  $AlertMessagePanel.Size = [System.Drawing.Size]::New(($AlertMessageForm.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($AlertMessageForm.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  #endregion $AlertMessagePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $AlertMessagePanel Controls ********_x000D__x000A__x000D__x000A_  #region $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessagePanel.Controls.Add($AlertMessageTopLabel)_x000D__x000A_  $AlertMessageTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A__x000D__x000A_  Switch ($MsgType)_x000D__x000A_  {_x000D__x000A_    "Info"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextInfo_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Success"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextGood_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Warning"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextWarn_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Error"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextBad_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $AlertMessageTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $AlertMessageTopLabel.Font = [MyConfig]::Font.Title_x000D__x000A_  $AlertMessageTopLabel.ForeColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $AlertMessageTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $AlertMessageTopLabel.Name = "AlertMessageTopLabel"_x000D__x000A_  $AlertMessageTopLabel.Size = [System.Drawing.Size]::New(($AlertMessagePanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $AlertMessageTopLabel.PreferredHeight)_x000D__x000A_  $AlertMessageTopLabel.Text = $Title_x000D__x000A_  $AlertMessageTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  #endregion $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  #region $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessagePanel.Controls.Add($AlertMessageBtmLabel)_x000D__x000A_  $AlertMessageBtmLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $AlertMessageBtmLabel.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $AlertMessageBtmLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $AlertMessageBtmLabel.Font = [MyConfig]::Font.Bold_x000D__x000A_  $AlertMessageBtmLabel.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $AlertMessageBtmLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($AlertMessageTopLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  $AlertMessageBtmLabel.Name = "AlertMessageBtmLabel"_x000D__x000A_  $AlertMessageBtmLabel.Size = [System.Drawing.Size]::New($AlertMessageTopLabel.Width, ($AlertMessageTopLabel.Width - ($AlertMessageBtmLabel.Top * 3)))_x000D__x000A_  $AlertMessageBtmLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  $AlertMessageBtmLabel.Text = $Message_x000D__x000A_  #endregion $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  $AlertMessagePanel.ClientSize = [System.Drawing.Size]::New($AlertMessagePanel.ClientSize.Width, ($AlertMessageBtmLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $AlertMessagePanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  # ************************************************_x000D__x000A_  # $AlertMessageBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessageForm.Controls.Add($AlertMessageBtmPanel)_x000D__x000A_  $AlertMessageBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $AlertMessageBtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $AlertMessagePanel.Bottom)_x000D__x000A_  $AlertMessageBtmPanel.Name = "AlertMessageBtmPanel"_x000D__x000A_  #endregion $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $AlertMessageBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($AlertMessageBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $AlertMessageBtmPanel.Controls.Add($AlertMessageBtmMidButton)_x000D__x000A_  $AlertMessageBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $AlertMessageBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $AlertMessageBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $AlertMessageBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $AlertMessageBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $AlertMessageBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $AlertMessageBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_  $AlertMessageBtmMidButton.Name = "AlertMessageBtmMidButton"_x000D__x000A_  $AlertMessageBtmMidButton.TabStop = $True_x000D__x000A_  $AlertMessageBtmMidButton.Text = "OK"_x000D__x000A_  $AlertMessageBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $AlertMessageBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  $AlertMessageBtmPanel.ClientSize = [System.Drawing.Size]::New($AlertMessagePanel.ClientSize.Width, (($AlertMessageBtmPanel.Controls[$AlertMessageBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $AlertMessageBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $AlertMessageForm.ClientSize = [System.Drawing.Size]::New($AlertMessageForm.ClientSize.Width, $AlertMessageBtmPanel.Bottom)_x000D__x000A__x000D__x000A_  #endregion ******** Controls for $AlertMessage Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** $Show-AlertMessage **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $AlertMessageForm.ShowDialog($PILForm)_x000D__x000A_  $AlertMessageForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-AlertMessage"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-ListBoxOption</S>
            <Obj N="Value" RefId="193">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-ListBoxOption</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ListBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ListBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ListView_x000D__x000A_    .PARAMETER Sorted_x000D__x000A_      Sort ListView_x000D__x000A_    .PARAMETER Multi_x000D__x000A_      Allow Selecting Multiple Items_x000D__x000A_    .PARAMETER DisplayMember_x000D__x000A_      Name of the Property to Display in the ListBox_x000D__x000A_    .PARAMETER ValueMember_x000D__x000A_      Name of the Property for the Value_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected ListBox Items_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Get-ListBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Middle Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Items = Get-Service_x000D__x000A_      $DialogResult = Get-ListBoxOption -Title "Get ListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7] -Multi_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [Switch]$Sorted,_x000D__x000A_    [Switch]$Multi,_x000D__x000A_    [String]$DisplayMember = "Text",_x000D__x000A_    [String]$ValueMember = "Value",_x000D__x000A_    [Object[]]$Selected,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [Int]$Height = 20,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$Required_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ListBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ListBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ListBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ListBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ListBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $ListBoxOptionForm.KeyPreview = $True_x000D__x000A_  $ListBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $ListBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $ListBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ListBoxOptionForm.Name = "ListBoxOptionForm"_x000D__x000A_  $ListBoxOptionForm.Owner = $PILForm_x000D__x000A_  $ListBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $ListBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ListBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $ListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionFormKeyDown ********_x000D__x000A_  function Start-ListBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionFormKeyDown ********_x000D__x000A_  $ListBoxOptionForm.add_KeyDown({ Start-ListBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionFormShown ********_x000D__x000A_  function Start-ListBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionFormShown ********_x000D__x000A_  $ListBoxOptionForm.add_Shown({ Start-ListBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ListBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionForm.Controls.Add($ListBoxOptionPanel)_x000D__x000A_  $ListBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ListBoxOptionPanel.Name = "ListBoxOptionPanel"_x000D__x000A_  #endregion $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListBoxOptionPanel.Controls.Add($ListBoxOptionLabel)_x000D__x000A_    $ListBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $ListBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $ListBoxOptionLabel.Name = "ListBoxOptionLabel"_x000D__x000A_    $ListBoxOptionLabel.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $ListBoxOptionLabel.Text = $Message_x000D__x000A_    $ListBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ListBoxOptionLabel.Text, [MyConfig]::Font.Regular, $ListBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $ListBoxOptionLabel.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $ListBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ListBoxOptionPanel.Controls.Add($ListBoxOptionGroupBox)_x000D__x000A_  $ListBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ListBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $ListBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ListBoxOptionGroupBox.Name = "ListBoxOptionGroupBox"_x000D__x000A_  $ListBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), ($ListBoxOptionPanel.Height - ($ListBoxOptionGroupBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  #endregion $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $ListBoxOptionGroupBox.Controls.Add($ListBoxOptionListBox)_x000D__x000A_  $ListBoxOptionListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $ListBoxOptionListBox.AutoSize = $True_x000D__x000A_  $ListBoxOptionListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ListBoxOptionListBox.DisplayMember = $DisplayMember_x000D__x000A_  $ListBoxOptionListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ListBoxOptionListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ListBoxOptionListBox.Name = "ListBoxOptionListBox"_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One_x000D__x000A_  }_x000D__x000A_  $ListBoxOptionListBox.Sorted = $Sorted.IsPresent_x000D__x000A_  $ListBoxOptionListBox.TabIndex = 0_x000D__x000A_  $ListBoxOptionListBox.TabStop = $True_x000D__x000A_  $ListBoxOptionListBox.Tag = $Null_x000D__x000A_  $ListBoxOptionListBox.ValueMember = $ValueMember_x000D__x000A_  #endregion $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A__x000D__x000A_  $ListBoxOptionListBox.Items.AddRange($Items)_x000D__x000A_  if ($PSBoundParameters.ContainsKey("Selected"))_x000D__x000A_  {_x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag = @($Items | Where-Object -FilterScript { $PSItem -in $Selected} )_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag = @($Items | Select-Object -First 1 )_x000D__x000A_    }_x000D__x000A_    $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_    $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.Tag = @()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-ListBoxOptionListBoxMouseDown ********_x000D__x000A_  function Start-ListBoxOptionListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$ListBoxOptionListBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($ListBoxOptionListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $ListBoxOptionContextMenuStrip.Show($ListBoxOptionListBox, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$ListBoxOptionListBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionListBoxMouseDown ********_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.add_MouseDown({ Start-ListBoxOptionListBoxMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  $ListBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($ListBoxOptionGroupBox.ClientSize.Width, ($ListBoxOptionListBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$ListBoxOptionListView.Controls.Add($ListBoxOptionContextMenuStrip)_x000D__x000A_  $ListBoxOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$ListBoxOptionContextMenuStrip.Enabled = $True_x000D__x000A_  $ListBoxOptionContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ListBoxOptionContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $ListBoxOptionContextMenuStrip.Name = "ListBoxOptionContextMenuStrip"_x000D__x000A_  #endregion $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionContextMenuStripOpening ********_x000D__x000A_  function Start-ListBoxOptionContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the ListBoxOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the ListBoxOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$ListBoxOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$ListBoxOptionContextMenuStrip"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionContextMenuStripOpening ********_x000D__x000A_  $ListBoxOptionContextMenuStrip.add_Opening({Start-ListBoxOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionContextMenuStripItemClick ********_x000D__x000A_  function Start-ListBoxOptionContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "SelectAll"_x000D__x000A_      {_x000D__x000A_        @($ListBoxOptionListBox.Items) | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnSelectAll"_x000D__x000A_      {_x000D__x000A_        $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionContextMenuStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $ListBoxOptionContextMenuStrip -Text "Select All" -Name "SelectAll" -Tag "SelectAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-ListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $ListBoxOptionContextMenuStrip -Text "Unselect All" -Name "UnSelectAll" -Tag "UnSelectAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-ListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $ListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($ListBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($ListBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionForm.Controls.Add($ListBoxOptionBtmPanel)_x000D__x000A_  $ListBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ListBoxOptionBtmPanel.Name = "ListBoxOptionBtmPanel"_x000D__x000A_  #endregion $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ListBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmLeftButton)_x000D__x000A_  $ListBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ListBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ListBoxOptionBtmLeftButton.Name = "ListBoxOptionBtmLeftButton"_x000D__x000A_  $ListBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $ListBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $ListBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ListBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ListBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-ListBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($ListBoxOptionListBox.SelectedIndex -gt 0)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $ListBoxOptionBtmLeftButton.add_Click({ Start-ListBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmMidButton)_x000D__x000A_  $ListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ListBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ListBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListBoxOptionBtmMidButton.Name = "ListBoxOptionBtmMidButton"_x000D__x000A_  $ListBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $ListBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $ListBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ListBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ListBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionBtmMidButtonClick ********_x000D__x000A_  function Start-ListBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_    if ($ListBoxOptionListBox.Tag.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionBtmMidButtonClick ********_x000D__x000A_  $ListBoxOptionBtmMidButton.add_Click({ Start-ListBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmRightButton)_x000D__x000A_  $ListBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ListBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ListBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListBoxOptionBtmRightButton.Name = "ListBoxOptionBtmRightButton"_x000D__x000A_  $ListBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $ListBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $ListBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ListBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ListBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionBtmRightButtonClick ********_x000D__x000A_  function Start-ListBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionBtmRightButtonClick ********_x000D__x000A_  $ListBoxOptionBtmRightButton.add_Click({ Start-ListBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ListBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ListBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ListBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ListBoxOptionForm.ClientSize = [System.Drawing.Size]::New($ListBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $ListBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ListBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ListBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ListBoxOptionForm.ShowDialog()_x000D__x000A_  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    [ListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $ListBoxOptionListBox.SelectedItems)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [ListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @())_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ListBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ListBoxOption"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputTextBoxKeyUp</S>
            <Obj N="Value" RefId="194">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputTextBoxKeyUp</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyUp Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyUp Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the KeyUp Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox KeyUp Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyUp Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyUp Event for `$TextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxFilterFormKeyDown</S>
            <Obj N="Value" RefId="195">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxFilterFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ComboBoxFilter Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ComboBoxFilter Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxFilterForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxFilterForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Remove-MyRSJob</S>
            <Obj N="Value" RefId="196">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Remove-MyRSJob</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER Name_x000D__x000A_      Name of Job to search for_x000D__x000A_    .PARAMETER InstanceId_x000D__x000A_      InstanceId of Job to search for_x000D__x000A_    .PARAMETER RSJob_x000D__x000A_      RunspacePool Jobs to Process_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .PARAMETER Force_x000D__x000A_      Force the Job to stop_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyRSJob_x000D__x000A__x000D__x000A_      Remove all RSJobs in the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyRSJob -RSPool $RSPool_x000D__x000A__x000D__x000A_      Remove-MyRSJob -PoolName $PoolName_x000D__x000A__x000D__x000A_      Remove-MyRSJob -PoolID $PoolID_x000D__x000A__x000D__x000A_      Remove all RSJobs in the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017 at 06:53 AM_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019 at 06:53 AM_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State,_x000D__x000A_    [Switch]$Force_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Remove Invalid Get-MyRSJob Parameters_x000D__x000A_    if ($PSCmdlet.ParameterSetName -ne "RSJob")_x000D__x000A_    {_x000D__x000A_      if ($PSBoundParameters.ContainsKey("Force"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("Force")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for Remove Jobs_x000D__x000A_    $RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $TempJobs = $RSJob_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Remove all Jobs, Stop all Running if Forced_x000D__x000A_    ForEach ($TempJob in $TempJobs)_x000D__x000A_    {_x000D__x000A_      if ($Force -and $TempJob.State -notmatch "Stopped|Completed|Failed")_x000D__x000A_      {_x000D__x000A_        $TempJob.PowerShell.Stop()_x000D__x000A_      }_x000D__x000A_      if ($TempJob.State -match "Stopped|Completed|Failed")_x000D__x000A_      {_x000D__x000A_        # Add Job to Remove List_x000D__x000A_        [Void]$RemoveJobs.Add($TempJob)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-MyRSJob End Block"_x000D__x000A__x000D__x000A_    # Remove RSJobs_x000D__x000A_    foreach ($RemoveJob in $RemoveJobs)_x000D__x000A_    {_x000D__x000A_      $RemoveJob.PowerShell.Dispose()_x000D__x000A_      [Void]$Script:MyHiddenRSPool[$RemoveJob.PoolName].Jobs.Remove($RemoveJob)_x000D__x000A_    }_x000D__x000A_    $RemoveJobs.Clear()_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-MyListItem</S>
            <Obj N="Value" RefId="197">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-MyListItem</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new list item to a ComboBox or ListBox control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new list item as a PSCustomObject with Text, Value, and Tag properties,_x000D__x000A_      and adds it to the Items collection of the specified ComboBox or ListBox control._x000D__x000A_      Optionally, the new item can be returned via the PassThru switch._x000D__x000A_    .PARAMETER Control_x000D__x000A_      The ComboBox or ListBox control to which the new item will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new list item. This parameter is mandatory._x000D__x000A_    .PARAMETER Value_x000D__x000A_      The value associated with the new list item. This parameter is mandatory._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An optional object to associate additional data with the new list item._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, the function returns the newly created list item object instead of $null._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MyListItem -Control $comboBox -Text "Option 1" -Value "1" -Tag "First Option"_x000D__x000A_      Adds a new item with text "Option 1", value "1", and tag "First Option" to the $comboBox control._x000D__x000A_    .EXAMPLE_x000D__x000A_      $item = New-MyListItem -Control $listBox -Text "Item A" -Value "A" -PassThru_x000D__x000A_      Adds a new item to $listBox and returns the created item object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [Parameter(Mandatory = $true)]_x000D__x000A_    [Object]$Control,_x000D__x000A_    [Parameter(Mandatory = $true)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [Parameter(Mandatory = $true)]_x000D__x000A_    [String]$Value,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $item = [PSCustomObject]@{_x000D__x000A_    Text  = $Text_x000D__x000A_    Value = $Value_x000D__x000A_    Tag   = $Tag_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PassThru)_x000D__x000A_  {_x000D__x000A_    $Control.Items.Add($item)_x000D__x000A_    $item_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Control.Items.Add($item)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCVariablesContextMenuStripOpening</S>
            <Obj N="Value" RefId="198">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCVariablesContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCVariables ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCVariables ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionFormKeyDown</S>
            <Obj N="Value" RefId="199">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ListBoxOptionForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckBoxOptionBtmLeftButtonClick</S>
            <Obj N="Value" RefId="200">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckBoxOptionBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($Required.IsPresent)_x000D__x000A_    {_x000D__x000A_      If (@($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "CheckBox") -and $PSItem.Checked }).Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        [Void][System.Windows.Forms.MessageBox]::Show($CheckBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-MyNetAdapterConStatus</S>
            <Obj N="Value" RefId="201">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-MyNetAdapterConStatus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Gets the connection status of wired and wireless network adapters on a specified computer._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function checks the network adapters on the specified computer and determines if there are any active wired or wireless connections. _x000D__x000A_      It uses WMI queries to identify the physical medium type and connection status of each adapter._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer to query. Defaults to the local computer._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      The credentials to use when connecting to the remote computer. Defaults to an empty credential._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyNetAdapterConStatus -ComputerName "PC01"_x000D__x000A_      Returns the wired and wireless connection status for computer "PC01"._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyNetAdapterConStatus -ComputerName "PC01" -Credential (Get-Credential)_x000D__x000A_      Returns the connection status using the specified credentials._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-MyNetAdapterConStatus"_x000D__x000A__x000D__x000A_  $PhysicalMediumTypeList = @(Get-WmiObject -ComputerName $ComputerName -Credential $Credential -Namespace "Root\WMI" -Query "Select InstanceName, NdisPhysicalMediumType From MSNdis_PhysicalMediumType Where Active = 1" | Select-Object -Property InstanceName, NdisPhysicalMediumType)_x000D__x000A_  $NetworkAdapters = @(Get-WmiObject -ComputerName $ComputerName -Credential $Credential -Namespace "Root\CimV2" -Query "Select Name from Win32_NetworkAdapter Where NetConnectionStatus = 2" | Select-Object -ExpandProperty Name)_x000D__x000A_  [PSCustomObject][ordered]@{_x000D__x000A_    "Wired"    = (@($PhysicalMediumTypeList | Where-Object -FilterScript { ($PSItem.NdisPhysicalMediumType -eq 0) -and ($PSItem.InstanceName -in $NetworkAdapters) }).Count -gt 0)_x000D__x000A_    "Wireless" = (@($PhysicalMediumTypeList | Where-Object -FilterScript { ($PSItem.NdisPhysicalMediumType -eq 9) -and ($PSItem.InstanceName -in $NetworkAdapters) }).Count -gt 0)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-MyNetAdapterConStatus"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">ConvertTo-MyIconImage</S>
            <Obj N="Value" RefId="202">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">ConvertTo-MyIconImage</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Converts a Base64-encoded string to an Icon or Image object._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function takes a Base64-encoded string representing an image or icon and converts it back to a .NET Icon or Image object. _x000D__x000A_      Use the -Image switch to specify that the output should be an Image object; otherwise, an Icon object is returned._x000D__x000A_    .PARAMETER EncodedImage_x000D__x000A_      The Base64-encoded string representing the image or icon to convert. This parameter is mandatory._x000D__x000A_    .PARAMETER Image_x000D__x000A_      If specified, the function returns a System.Drawing.Image object. If not specified, a System.Drawing.Icon object is returned._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = ConvertTo-MyIconImage -EncodedImage $EncodedImage_x000D__x000A_      Converts the Base64 string to an Icon object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = ConvertTo-MyIconImage -EncodedImage $EncodedImage -Image_x000D__x000A_      Converts the Base64 string to an Image object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$EncodedImage,_x000D__x000A_    [Switch]$Image_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function ConvertTo-MyIconImage"_x000D__x000A__x000D__x000A_  if ($Image.IsPresent)_x000D__x000A_  {_x000D__x000A_    [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodedImage)))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodedImage)))_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function ConvertTo-MyIconImage"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Verb-Noun</S>
            <Obj N="Value" RefId="203">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Verb-Noun</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER Value_x000D__x000A_      Value Command Line Parameter_x000D__x000A_    .EXAMPLE_x000D__x000A_      Verb-Noun -Value "String"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By %YourName%_x000D__x000A_      _x000D__x000A_      %Date% - Initial Release_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "ByValue")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ByValue")]_x000D__x000A_    [String[]]$Value = "Default Value"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A_  _x000D__x000A_  # Loop and Proccess all Values_x000D__x000A_  ForEach ($Item In $Value)_x000D__x000A_  {_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Protect-MySensitiveData</S>
            <Obj N="Value" RefId="204">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Protect-MySensitiveData</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encrypts or decrypts text string data using AES encryption._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encrypts or decrypts a plain text string using a passphrase and optional salt, hash algorithm, cipher mode, and padding mode. _x000D__x000A_      It supports both encryption and decryption operations based on the -Decrypt switch._x000D__x000A_    .PARAMETER String_x000D__x000A_      The plain text string to encrypt, or the encrypted Base64 string to decrypt._x000D__x000A_    .PARAMETER PassPhrase_x000D__x000A_      The passphrase used to derive the encryption key._x000D__x000A_    .PARAMETER Salt_x000D__x000A_      The salt value used in key derivation. Must be at least 8 characters. Default is "Pepper"._x000D__x000A_    .PARAMETER HashAlgorithm_x000D__x000A_      The hash algorithm used for key derivation. Default is SHA256._x000D__x000A_    .PARAMETER CipherMode_x000D__x000A_      The cipher mode for AES encryption. Default is CBC._x000D__x000A_    .PARAMETER PaddingMode_x000D__x000A_      The padding mode for AES encryption. Default is PKCS7._x000D__x000A_    .PARAMETER Decrypt_x000D__x000A_      Switch to indicate that the function should decrypt the input string instead of encrypting._x000D__x000A_    .EXAMPLE_x000D__x000A_      $EncryptedData = Protect-MySensitiveData -String "SecretText" -PassPhrase "MyPass" -Salt "MySalt"_x000D__x000A_      Encrypts the string "SecretText" using the specified passphrase and salt._x000D__x000A_    .EXAMPLE_x000D__x000A_      $DecryptedData = Protect-MySensitiveData -String $EncryptedData -PassPhrase "MyPass" -Salt "MySalt" -Decrypt_x000D__x000A_      Decrypts the previously encrypted string using the same passphrase and salt._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$String,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$PassPhrase = "PassPhrase",_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [String]$Salt = "Pepper",_x000D__x000A_    [System.Security.Cryptography.HashAlgorithmName]$HashAlgorithm = [System.Security.Cryptography.HashAlgorithmName]::SHA256,_x000D__x000A_    [System.Security.Cryptography.CipherMode]$CipherMode = [System.Security.Cryptography.CipherMode]::CBC,_x000D__x000A_    [System.Security.Cryptography.PaddingMode]$PaddingMode = [System.Security.Cryptography.PaddingMode]::PKCS7,_x000D__x000A_    [Switch]$Decrypt_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  # Create Cryptography AES Object_x000D__x000A_  $Aes = [System.Security.Cryptography.Aes]::Create()_x000D__x000A_  $Aes.Mode = $CipherMode_x000D__x000A_  $Aes.Padding = $PaddingMode_x000D__x000A_  # Salt Needs to be at least 8 Characters_x000D__x000A_  $SaltBytes = [System.Text.Encoding]::UTF8.GetBytes($Salt.PadRight(8, "*"))_x000D__x000A_  $Aes.Key = [System.Security.Cryptography.Rfc2898DeriveBytes]::New($PassPhrase, $SaltBytes, 8, $HashAlgorithm).GetBytes($Aes.Key.Length)_x000D__x000A__x000D__x000A_  if ($Decrypt.IsPresent)_x000D__x000A_  {_x000D__x000A_    # Decrypt Encrypted Data_x000D__x000A_    $DecodeBytes = [System.Convert]::FromBase64String($String)_x000D__x000A_    $Aes.IV = $DecodeBytes[0..15]_x000D__x000A_    $Decryptor = $Aes.CreateDecryptor()_x000D__x000A_    [System.Text.Encoding]::UTF8.GetString(($Decryptor.TransformFinalBlock($DecodeBytes, 16, ($DecodeBytes.Length - 16))))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    # Encrypt String Data_x000D__x000A_    $EncodeBytes = [System.Text.Encoding]::UTF8.GetBytes($String)_x000D__x000A_    $Encryptor = $Aes.CreateEncryptor()_x000D__x000A_    $EncryptedBytes = [System.Collections.ArrayList]::New($Aes.IV)_x000D__x000A_    $EncryptedBytes.AddRange($Encryptor.TransformFinalBlock($EncodeBytes, 0, $EncodeBytes.Length))_x000D__x000A_    [System.Convert]::ToBase64String($EncryptedBytes)_x000D__x000A_    $EncryptedBytes.Clear()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $Aes.Dispose()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Verb-NounPiped</S>
            <Obj N="Value" RefId="205">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Verb-NounPiped</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER Value_x000D__x000A_      Value Command Line Parameter_x000D__x000A_    .EXAMPLE_x000D__x000A_      Verb-NounPiped -Value "String"_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Value | Verb-NounPiped_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By %YourName%_x000D__x000A_      _x000D__x000A_      %Date% - Initial Release_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "ByValue")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, ParameterSetName = "ByValue")]_x000D__x000A_    [String[]]$Value = "Default Value"_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand) Begin Block"_x000D__x000A_    # This Code is Executed Once when the Function Begins_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand) Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand) Process Block"_x000D__x000A_    _x000D__x000A_    # Loop and Proccess all Values_x000D__x000A_    ForEach ($Item In $Value)_x000D__x000A_    {_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand) Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand) End Block"_x000D__x000A_    # This Code is Executed Once whent he Function Ends_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand) End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCVariablesListBoxSelectedIndexChanged</S>
            <Obj N="Value" RefId="206">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCVariablesListBoxSelectedIndexChanged</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCVariables ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCVariables ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Receive-MyRSJob</S>
            <Obj N="Value" RefId="207">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Receive-MyRSJob</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Receive Output from Completed Jobs_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Receive Output from Completed Jobs_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of Pool to Get Jobs From_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of Pool to Get Jobs From_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of Jobs to Get_x000D__x000A_    .PARAMETER JobID_x000D__x000A_      ID of Jobs to Get_x000D__x000A_    .PARAMETER RSJob_x000D__x000A_      Jobs to Process_x000D__x000A_    .PARAMETER AutoRemove_x000D__x000A_      Remove Jobs after Receiving Output_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyResults = Receive-MyRSJob -AutoRemove_x000D__x000A__x000D__x000A_      Receive Results from RSJobs in the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyResults = Receive-MyRSJob -RSPool $RSPool -AutoRemove_x000D__x000A__x000D__x000A_      $MyResults = Receive-MyRSJob -PoolName $PoolName -AutoRemove_x000D__x000A__x000D__x000A_      $MyResults = Receive-MyRSJob -PoolID $PoolID -AutoRemove_x000D__x000A__x000D__x000A_      Receive Results from RSJobs in the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [Switch]$AutoRemove,_x000D__x000A_    [Switch]$Force_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Receive-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Remove Invalid Get-MyRSJob Parameters_x000D__x000A_    if ($PSCmdlet.ParameterSetName -ne "RSJob")_x000D__x000A_    {_x000D__x000A_      if ($PSBoundParameters.ContainsKey("AutoRemove"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("AutoRemove")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for Remove Jobs_x000D__x000A_    $RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Receive-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Receive-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $TempJobs = $RSJob_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void]$PSBoundParameters.Add("State", "Completed")_x000D__x000A_      $TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Receive all Complted Jobs, Remove Job if Required_x000D__x000A_    ForEach ($TempJob in $TempJobs)_x000D__x000A_    {_x000D__x000A_      if ($TempJob.IsCompleted)_x000D__x000A_      {_x000D__x000A_        Try_x000D__x000A_        {_x000D__x000A_          $TempJob.PowerShell.EndInvoke($TempJob.PowerShellAsyncResult)_x000D__x000A_          # Add Job to Remove List_x000D__x000A_          [Void]$RemoveJobs.Add($TempJob)_x000D__x000A_        }_x000D__x000A_        Catch_x000D__x000A_        {_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Receive-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Receive-MyRSJob End Block"_x000D__x000A__x000D__x000A_    if ($AutoRemove.IsPresent)_x000D__x000A_    {_x000D__x000A_      # Remove RSJobs_x000D__x000A_      foreach ($RemoveJob in $RemoveJobs)_x000D__x000A_      {_x000D__x000A_        $RemoveJob.PowerShell.Dispose()_x000D__x000A_        [Void]$Script:MyHiddenRSPool[$RemoveJob.PoolName].Jobs.Remove($RemoveJob)_x000D__x000A_      }_x000D__x000A_      $RemoveJobs.Clear()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Receive-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILFormResize</S>
            <Obj N="Value" RefId="208">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILFormResize</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Resize Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Resize Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Resize Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Resize Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormResize -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Resize Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Resize Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckBoxOptionBtmRightButtonClick</S>
            <Obj N="Value" RefId="209">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckBoxOptionBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxFilterBtmLeftButtonClick</S>
            <Obj N="Value" RefId="210">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxFilterBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ComboBoxFilterBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ValidateClick = 0_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidateClick = $ValidateClick + $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex_x000D__x000A_    }_x000D__x000A_    If ($ValidateClick -eq 0)_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxFilterForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionBtmLeftButtonClick</S>
            <Obj N="Value" RefId="211">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ((($ListViewOptionListView.CheckedItems.Count -gt 0) -and ((-not $Multi.IsPresent) -or $Multi.IsPresent)) -or (-not $Required.IsPresent))_x000D__x000A_    {_x000D__x000A_      $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ListViewOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCModulesContextMenuStripItemClick</S>
            <Obj N="Value" RefId="212">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCModulesContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the PILTCModules ContextMenuStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the PILTCModules ContextMenuStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $TmpCurMods = @($PILTCModulesListBox.Items | Select-Object -ExpandProperty Name)_x000D__x000A_        $TmpNewMods = @([MyRuntime]::Modules.Values | Where-Object { $PSItem.Name -notin $TmpCurMods } | Sort-Object -Property Location, Name)_x000D__x000A_        If ($TmpNewMods.Count -eq 0)_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-UserResponse -Title "No More Modules" -Message "No New Modules are Avaible for to Add to the PIL Thread Configuration." -ButtonMid OK -ButtonDefault OK -Icon ([System.Drawing.SystemIcons]::Information)_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-ListViewOption -Title "Select Modules" -Message "Select The Modules to Add to the PIL Thread Configuration." -Items $TmpNewMods -Property "Location", "Name", "Version" -Resize -Multi_x000D__x000A_          If ($DialogResult.Success)_x000D__x000A_          {_x000D__x000A_            $PILTCModulesListBox.Items.AddRange($DialogResult.item)_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Up"_x000D__x000A_      {_x000D__x000A_        $TmpItem = $PILTCModulesListBox.SelectedItem_x000D__x000A_        $TmpIndex = $PILTCModulesListBox.SelectedIndex_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        $PILTCModulesListBox.Items.Insert(($TmpIndex - 1), $TmpItem)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Down"_x000D__x000A_      {_x000D__x000A_        $TmpItem = $PILTCModulesListBox.SelectedItem_x000D__x000A_        $TmpIndex = $PILTCModulesListBox.SelectedIndex_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        $PILTCModulesListBox.Items.Insert(($TmpIndex + 1), $TmpItem)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-MenuSeparator</S>
            <Obj N="Value" RefId="213">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-MenuSeparator</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuSeparator (ToolStripSeparator) to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripSeparator and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of background and foreground colors._x000D__x000A_      The separator is useful for visually grouping related menu items._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuSeparator will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuSeparator. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (line) color of the MenuSeparator. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MenuSeparator -Menu $Menu_x000D__x000A_      Adds a new separator to the specified $Menu control._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MenuSeparator -Menu $contextMenu -BackColor ([System.Drawing.Color]::LightGray) -ForeColor ([System.Drawing.Color]::DarkGray)_x000D__x000A_      Adds a new separator to $contextMenu with custom colors._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempSeparator = [System.Windows.Forms.ToolStripSeparator]_x000D__x000A_  $TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()_x000D__x000A__x000D__x000A_  if ($Menu.GetType().Name -eq "ToolStripMenuItem")_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.DropDownItems.Add($TempSeparator)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.Items.Add($TempSeparator)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempSeparator.Name = "TempSeparator"_x000D__x000A__x000D__x000A_  $TempSeparator.BackColor = $BackColor_x000D__x000A_  $TempSeparator.ForeColor = $ForeColor_x000D__x000A_  #endregion $TempSeparator = [System.Windows.Forms.ToolStripSeparator]_x000D__x000A__x000D__x000A_  $TempSeparator = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Compress-MyData</S>
            <Obj N="Value" RefId="214">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Compress-MyData</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Compress / Decompress String Data_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Compress / Decompress String Data_x000D__x000A_    .PARAMETER Data_x000D__x000A_      Path to Text File to Compress_x000D__x000A_    .PARAMETER DataName_x000D__x000A_      Name to put in Data Region Comments_x000D__x000A_    .PARAMETER Path_x000D__x000A_      Data to Compress / Decompress_x000D__x000A_    .PARAMETER LineLength_x000D__x000A_      Max Line Length_x000D__x000A_    .PARAMETER Decompress_x000D__x000A_      Decompress the Data String_x000D__x000A_    .PARAMETER AsString_x000D__x000A_      Return as a String_x000D__x000A_    .EXAMPLE_x000D__x000A_      Compress-MyData -Data "String"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "CompressText")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Decompress")]_x000D__x000A_    [String]$Data,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [String]$DataName = "CompressedText",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompressFile")]_x000D__x000A_    [String]$Path,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressFile")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [Int]$LineLength = 160,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompressFile")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [Switch]$Encode,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Decompress")]_x000D__x000A_    [Switch]$Decompress,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Decompress")]_x000D__x000A_    [Switch]$AsString_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Compress-MyData"_x000D__x000A_  _x000D__x000A_  If ($PSCmdLet.ParameterSetName -eq "Decompress")_x000D__x000A_  {_x000D__x000A_    $CompressedData = [System.Convert]::FromBase64String($Data)_x000D__x000A_    $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A_    $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)_x000D__x000A_    [Void]$MemoryStream.Seek(0, 0)_x000D__x000A_    $GZipStream = [System.IO.Compression.GZipStream]::New($MemoryStream, [System.IO.Compression.CompressionMode]::Decompress)_x000D__x000A_    $StreamReader = [System.IO.StreamReader]::New($GZipStream, [System.Text.Encoding]::UTF8)_x000D__x000A_    If ($AsString.IsPresent)_x000D__x000A_    {_x000D__x000A_      $StreamReader.ReadToEnd()_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $ArrayList = [System.Collections.ArrayList]::New()_x000D__x000A_      $Buffer = [System.Char[]]::New(4096)_x000D__x000A_      While (-not $StreamReader.EndOfStream)_x000D__x000A_      {_x000D__x000A_        $Bytes = $StreamReader.Read($Buffer, 0, 4096)_x000D__x000A_        If ($Bytes -gt 0)_x000D__x000A_        {_x000D__x000A_          $ArrayList.AddRange($Buffer[0..($Bytes - 1)])_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $ArrayList_x000D__x000A_      $ArrayList.Clear()_x000D__x000A_    }_x000D__x000A_    # Close Reader_x000D__x000A_    $StreamReader.Close()_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    If ($PSCmdlet.ParameterSetName -eq "CompressFile")_x000D__x000A_    {_x000D__x000A_      $Data = Get-Content -Path $Path -Raw_x000D__x000A_      $DataName = ([System.IO.Path]::GetFileName($Path) -replace "[\.\-\s]", "")_x000D__x000A_    }_x000D__x000A_    $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A_    $GZipStream = [System.IO.Compression.GZipStream]::New($MemoryStream, [System.IO.Compression.CompressionMode]::Compress)_x000D__x000A_    $StreamWriter = [System.IO.StreamWriter]::New($GZipStream, [System.Text.Encoding]::UTF8)_x000D__x000A_    $StreamWriter.Write($Data)_x000D__x000A_    # Close Writer_x000D__x000A_    $StreamWriter.Close()_x000D__x000A_    $StringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A_    If ($Encode.IsPresent)_x000D__x000A_    {_x000D__x000A_      [Void]$StringBuilder.AppendLine("#region $($DataName) Data")_x000D__x000A_      [Void]$StringBuilder.AppendLine("`$$($DataName) = @`"")_x000D__x000A_    }_x000D__x000A_    ForEach ($Line In @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?&lt;=\G.{$LineLength})(?=.)"))_x000D__x000A_    {_x000D__x000A_      [Void]$StringBuilder.AppendLine($Line)_x000D__x000A_    }_x000D__x000A_    If ($Encode.IsPresent)_x000D__x000A_    {_x000D__x000A_      [Void]$StringBuilder.AppendLine("`"@")_x000D__x000A_      [Void]$StringBuilder.AppendLine("#endregion $($DataName) Data")_x000D__x000A_    }_x000D__x000A_    # Return Encryped Data_x000D__x000A_    $StringBuilder.ToString()_x000D__x000A_    [void]$StringBuilder.Clear()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  # Close Streams_x000D__x000A_  $GZipStream.Close()_x000D__x000A_  $MemoryStream.Close()_x000D__x000A_  _x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Compress-MyData"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-Function02</S>
            <Obj N="Value" RefId="215">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-Function02</S>
                <S N="ScriptBlock"> Get-Help </S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCVariablesContextMenuStripItemClick</S>
            <Obj N="Value" RefId="216">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCVariablesContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ItemClicked Event for the PILTCVariables ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ItemClicked Event for the PILTCVariables ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the ItemClicked Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables ItemClicked Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $OrderedItems = [Ordered]@{ "Variable Name"= ""; "Variable Value" = "" }_x000D__x000A_        $DialogResult = Get-MultiTextBoxInput -Title "Add Variable" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          [Void]$PILTCVariablesListBox.Items.Add([PILVariable]::New($DialogResult.OrderedItems["Variable Name"], $DialogResult.OrderedItems["Variable Value"]))_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Edit"_x000D__x000A_      {_x000D__x000A_        $OrderedItems = [Ordered]@{ "Variable Name" = $PILTCVariablesListBox.SelectedItem.Name; "Variable Value" = $PILTCVariablesListBox.SelectedItem.Value }_x000D__x000A_        $DialogResult = Get-MultiTextBoxInput -Title "Edit Variable" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          $PILTCVariablesListBox.Items.RemoveAt($PILTCVariablesListBox.SelectedIndex)_x000D__x000A_          [Void]$PILTCVariablesListBox.Items.Add([PILVariable]::New($DialogResult.OrderedItems["Variable Name"], $DialogResult.OrderedItems["Variable Value"]))_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items.RemoveAt($PILTCVariablesListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionBtmMidButtonClick</S>
            <Obj N="Value" RefId="217">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionBtmMidButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_    if ($ListBoxOptionListBox.Tag.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmMidButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCFunctionsListBoxMouseDown</S>
            <Obj N="Value" RefId="218">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCFunctionsListBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCFunctions ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCFunctions ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCFunctionsContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCFunctionsContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCFunctionsContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Show-ScriptInfo</S>
            <Obj N="Value" RefId="219">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Show-ScriptInfo</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-ScriptInfo_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-ScriptInfo_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Show-ScriptInfo Window Title_x000D__x000A_    .PARAMETER InfoTitle_x000D__x000A_      Title of Into Topics_x000D__x000A_    .PARAMETER Topics_x000D__x000A_      Orders List of Tpoic to Display_x000D__x000A_    .PARAMETER DefInfoTopic_x000D__x000A_      Default Infomration Topic_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Show-ScriptInfo Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Show-ScriptInfo Window_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Return = Show-ScriptInfo -Topics $Topics_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$InfoTitle = " &lt;&lt; FCG Info Topics &gt;&gt; ",_x000D__x000A_    [String]$DefInfoTopic = "InfoIntro",_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$Topics = $ScriptInfoTopics,_x000D__x000A_    [Int]$Width = 60,_x000D__x000A_    [Int]$Height = 24_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-ScriptInfo"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ScriptInfo **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfo Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ScriptInfoForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ScriptInfoForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ScriptInfoForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ScriptInfoForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable_x000D__x000A_  $ScriptInfoForm.Icon = $FCGForm.Icon_x000D__x000A_  $ScriptInfoForm.MaximizeBox = $False_x000D__x000A_  $ScriptInfoForm.MinimizeBox = $False_x000D__x000A_  $ScriptInfoForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ScriptInfoForm.Name = "ScriptInfoForm"_x000D__x000A_  $ScriptInfoForm.Owner = $FCGForm_x000D__x000A_  $ScriptInfoForm.ShowInTaskbar = $False_x000D__x000A_  $ScriptInfoForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ScriptInfoForm.Text = $Title_x000D__x000A_  #endregion $ScriptInfoForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoFormMove ********_x000D__x000A_  function Start-ScriptInfoFormMove_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Move Event for the ScriptInfo Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Move Event for the ScriptInfo Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Move Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Move Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ScriptInfoFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Move Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Move Event for `$ScriptInfoForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoFormMove ********_x000D__x000A_  $ScriptInfoForm.add_Move({ Start-ScriptInfoFormMove -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoFormResize ********_x000D__x000A_  function Start-ScriptInfoFormResize_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Resize Event for the ScriptInfo Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Resize Event for the ScriptInfo Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Resize Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Resize Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ScriptInfoFormResize -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Resize Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Resize Event for `$ScriptInfoForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoFormResize ********_x000D__x000A_  $ScriptInfoForm.add_Resize({ Start-ScriptInfoFormResize -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoFormShown ********_x000D__x000A_  function Start-ScriptInfoFormShown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shown Event for the ScriptInfo Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shown Event for the ScriptInfo Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the Shown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form Shown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ScriptInfoFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Start-ScriptInfoLeftToolStripItemClick -Sender ($ScriptInfoLeftMenuStrip.Items[$DefInfoTopic]) -EventArg $EventArg_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ScriptInfoForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoFormShown ********_x000D__x000A_  $ScriptInfoForm.add_Shown({ Start-ScriptInfoFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ScriptInfo Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfo Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoPanel)_x000D__x000A_  $ScriptInfoPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ScriptInfoPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ScriptInfoPanel.Name = "ScriptInfoPanel"_x000D__x000A_  #endregion $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ScriptInfoPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $ScriptInfoPanel.Controls.Add($ScriptInfoRichTextBox)_x000D__x000A_  $ScriptInfoRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")_x000D__x000A_  $ScriptInfoRichTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ScriptInfoRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $ScriptInfoRichTextBox.DetectUrls = $True_x000D__x000A_  $ScriptInfoRichTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoRichTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ScriptInfoRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ScriptInfoRichTextBox.MaxLength = [Int]::MaxValue_x000D__x000A_  $ScriptInfoRichTextBox.Multiline = $True_x000D__x000A_  $ScriptInfoRichTextBox.Name = "ScriptInfoRichTextBox"_x000D__x000A_  $ScriptInfoRichTextBox.ReadOnly = $True_x000D__x000A_  $ScriptInfoRichTextBox.Rtf = ""_x000D__x000A_  $ScriptInfoRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Vertical_x000D__x000A_  $ScriptInfoRichTextBox.Size = [System.Drawing.Size]::New(($ScriptInfoPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ScriptInfoPanel.ClientSize.Height - ($ScriptInfoRichTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $ScriptInfoRichTextBox.TabStop = $False_x000D__x000A_  $ScriptInfoRichTextBox.Text = ""_x000D__x000A_  $ScriptInfoRichTextBox.WordWrap = $True_x000D__x000A_  #endregion $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A__x000D__x000A_  #endregion ******** $ScriptInfoPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfoLeft MenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A_  $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoLeftMenuStrip)_x000D__x000A_  $ScriptInfoForm.MainMenuStrip = $ScriptInfoLeftMenuStrip_x000D__x000A_  $ScriptInfoLeftMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ScriptInfoLeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left_x000D__x000A_  $ScriptInfoLeftMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoLeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ScriptInfoLeftMenuStrip.ImageList = $FCGSmallImageList_x000D__x000A_  $ScriptInfoLeftMenuStrip.Name = "ScriptInfoLeftMenuStrip"_x000D__x000A_  $ScriptInfoLeftMenuStrip.ShowItemToolTips = $True_x000D__x000A_  $ScriptInfoLeftMenuStrip.Text = "ScriptInfoLeftMenuStrip"_x000D__x000A_  #endregion $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoLeftToolStripItemClick ********_x000D__x000A_  function Start-ScriptInfoLeftToolStripItemClick_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the ScriptInfoLeft ToolStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the ScriptInfoLeft ToolStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ToolStripItem Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ToolStripItem Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ScriptInfoLeftToolStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ScriptInfoLeftToolStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ScriptInfoBtmStatusStrip.Items["Status"].Text = "Showing: $($Sender.Text)"_x000D__x000A__x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Exit"_x000D__x000A_      {_x000D__x000A_        $ScriptInfoForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      Default_x000D__x000A_      {_x000D__x000A_        $ScriptInfoRichTextBox.Clear()_x000D__x000A_        $ScriptInfoRichTextBox.Beg_x000D__x000A_        Switch ($Sender.Tag.Type)_x000D__x000A_        {_x000D__x000A_          "None"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = $Sender.Tag.Data_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_          "Base64"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = Encode-MyData -Data ($Sender.Tag.Data) -AsString -Decode_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_          "Compress"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = Compress-MyData -Data ($Sender.Tag.Data) -Decompress -AsString_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        $ScriptInfoRichTextBox.SelectAll()_x000D__x000A_        $ScriptInfoRichTextBox.SelectionIndent = 10_x000D__x000A_        $ScriptInfoRichTextBox.SelectionLength = 0_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ScriptInfoLeftToolStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoLeftToolStripItemClick ********_x000D__x000A__x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A_  New-MenuLabel -Menu $ScriptInfoLeftMenuStrip -Text $InfoTitle -Name "Info Topics" -Tag "Info Topics" -Font ([MyConfig]::Font.Bold)_x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A__x000D__x000A_  forEach ($Key in $Topics.Keys)_x000D__x000A_  {_x000D__x000A_    (New-MenuItem -Menu $ScriptInfoLeftMenuStrip -Text ($Topics[$Key].Name) -Name $Key -Tag @{"Data" = $Topics[$Key].Data; "Type" = $Topics[$Key].Type} -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({ Start-ScriptInfoLeftToolStripItemClick -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A_  (New-MenuItem -Menu $ScriptInfoLeftMenuStrip -Text "E&amp;xit" -Name "Exit" -Tag "Exit" -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({ Start-ScriptInfoLeftToolStripItemClick -Sender $This -EventArg $PSItem })_x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A__x000D__x000A_  #region $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoTopPanel)_x000D__x000A_  $ScriptInfoTopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ScriptInfoTopPanel.Dock = [System.Windows.Forms.DockStyle]::Top_x000D__x000A_  $ScriptInfoTopPanel.Name = "ScriptInfoTopPanel"_x000D__x000A_  #endregion $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ScriptInfoTopPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ScriptInfoTopPanel.Controls.Add($ScriptInfoTopLabel)_x000D__x000A_  $ScriptInfoTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ScriptInfoTopLabel.BackColor = [MyConfig]::Colors.TitleBack_x000D__x000A_  $ScriptInfoTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $ScriptInfoTopLabel.Font = [MyConfig]::Font.Title_x000D__x000A_  $ScriptInfoTopLabel.ForeColor = [MyConfig]::Colors.TitleFore_x000D__x000A_  $ScriptInfoTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ScriptInfoTopLabel.Name = "ScriptInfoTopLabel"_x000D__x000A_  $ScriptInfoTopLabel.Text = $Title_x000D__x000A_  $ScriptInfoTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  $ScriptInfoTopLabel.Size = [System.Drawing.Size]::New(($ScriptInfoTopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $ScriptInfoTopLabel.PreferredHeight)_x000D__x000A_  #endregion $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  $ScriptInfoTopPanel.ClientSize = [System.Drawing.Size]::New($ScriptInfoTopPanel.ClientSize.Width, ($ScriptInfoTopLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ScriptInfoTopPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfoBtm StatusStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A_  $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoBtmStatusStrip)_x000D__x000A_  $ScriptInfoBtmStatusStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ScriptInfoBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ScriptInfoBtmStatusStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ScriptInfoBtmStatusStrip.ImageList = $FCGSmallImageList_x000D__x000A_  $ScriptInfoBtmStatusStrip.Name = "ScriptInfoBtmStatusStrip"_x000D__x000A_  $ScriptInfoBtmStatusStrip.ShowItemToolTips = $True_x000D__x000A_  $ScriptInfoBtmStatusStrip.Text = "ScriptInfoBtmStatusStrip"_x000D__x000A_  #endregion $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A__x000D__x000A_  New-MenuLabel -Menu $ScriptInfoBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ScriptInfo Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ScriptInfo **** End ********_x000D__x000A__x000D__x000A_  [Void]$ScriptInfoForm.ShowDialog($FCGForm)_x000D__x000A__x000D__x000A_  $ScriptInfoForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-ScriptInfo"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-ListViewOption</S>
            <Obj N="Value" RefId="220">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-ListViewOption</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ListViewOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ListViewOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ListViewOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ListVieww_x000D__x000A_    .PARAMETER Property_x000D__x000A_      Name of the Properties to Display_x000D__x000A_    .PARAMETER Tooltip_x000D__x000A_      ToolTip to Displays_x000D__x000A_    .PARAMETER SelectText_x000D__x000A_      Selected Text_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Selected ListView Items_x000D__x000A_    .PARAMETER Multi_x000D__x000A_      Allow Select Multiple Rows_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ListViewOption Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Get-ListViewOption Dialog Window_x000D__x000A_    .PARAMETER Filter_x000D__x000A_      Show Filter TextBox_x000D__x000A_    .PARAMETER Resize_x000D__x000A_      Make Get-ListViewOption Dialog Window ReSixeable_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Functions = @(Get-ChildItem -Path "Function:\")_x000D__x000A_      $DialogResult = Get-ListViewOption -Title "ListView Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Functions -Property "Name", "Version", "Source" -Selected ($Functions[2]) -Tooltip "Show this ToolTip" -Resize -Multi_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String[]]$Property,_x000D__x000A_    [String]$Tooltip,_x000D__x000A_    [Object[]]$Selected = "xX NONE Xx",_x000D__x000A_    [Switch]$Multi,_x000D__x000A_    [Int]$Width = 50,_x000D__x000A_    [Int]$Height = 12,_x000D__x000A_    [Switch]$Filter,_x000D__x000A_    [Switch]$Resize,_x000D__x000A_    [Switch]$Required,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ListViewOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ListViewOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListViewOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListViewOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ListViewOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListViewOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  if ($Resize.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListViewOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $ListViewOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  }_x000D__x000A_  $ListViewOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $ListViewOptionForm.KeyPreview = $True_x000D__x000A_  $ListViewOptionForm.MaximizeBox = $False_x000D__x000A_  $ListViewOptionForm.MinimizeBox = $False_x000D__x000A_  $ListViewOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $ListViewOptionForm.Name = "ListViewOptionForm"_x000D__x000A_  $ListViewOptionForm.Owner = $PILForm_x000D__x000A_  $ListViewOptionForm.ShowInTaskbar = $False_x000D__x000A_  $ListViewOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ListViewOptionForm.Text = $Title_x000D__x000A_  #endregion $ListViewOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionFormKeyDown ********_x000D__x000A_  function Start-ListViewOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ListViewOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ListViewOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ListViewOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionFormKeyDown ********_x000D__x000A_  $ListViewOptionForm.add_KeyDown({ Start-ListViewOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionFormShown ********_x000D__x000A_  function Start-ListViewOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ListViewOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ListViewOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ListViewOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ListViewOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionFormShown ********_x000D__x000A_  $ListViewOptionForm.add_Shown({ Start-ListViewOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ListViewOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionForm.Controls.Add($ListViewOptionPanel)_x000D__x000A_  $ListViewOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListViewOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ListViewOptionPanel.Name = "ListViewOptionPanel"_x000D__x000A_  $ListViewOptionPanel.Text = "ListViewOptionPanel"_x000D__x000A_  #endregion $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListViewOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $ListViewOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionPanel.Controls.Add($ListViewOptionLabel)_x000D__x000A_    $ListViewOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $ListViewOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $ListViewOptionLabel.Name = "ListViewOptionLabel"_x000D__x000A_    $ListViewOptionLabel.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $ListViewOptionLabel.Text = $Message_x000D__x000A_    $ListViewOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $ListViewOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ListViewOptionLabel.Text, [MyConfig]::Font.Regular, $ListViewOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $ListViewOptionLabel.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $ListViewOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region $ListViewOptionListView = [System.Windows.Forms.ListView]::New()_x000D__x000A_  $ListViewOptionListView = [System.Windows.Forms.ListView]::New()_x000D__x000A_  $ListViewOptionPanel.Controls.Add($ListViewOptionListView)_x000D__x000A_  $ListViewOptionListView.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ListViewOptionListView.CheckBoxes = $Multi.IsPresent_x000D__x000A_  $ListViewOptionListView.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionListView.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ListViewOptionListView.FullRowSelect = $True_x000D__x000A_  $ListViewOptionListView.GridLines = $True_x000D__x000A_  $ListViewOptionListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable_x000D__x000A_  $ListViewOptionListView.HideSelection = $False_x000D__x000A_  $ListViewOptionListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ListViewOptionListView.MultiSelect = $Multi.IsPresent_x000D__x000A_  $ListViewOptionListView.Name = "LAUListViewOptionListView"_x000D__x000A_  $ListViewOptionListView.OwnerDraw = $True_x000D__x000A_  $ListViewOptionListView.ShowGroups = $False_x000D__x000A_  $ListViewOptionListView.ShowItemToolTips = $PSBoundParameters.ContainsKey("ToolTip")_x000D__x000A_  $ListViewOptionListView.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ListViewOptionListView.Text = "LAUListViewOptionListView"_x000D__x000A_  $ListViewOptionListView.View = [System.Windows.Forms.View]::Details_x000D__x000A_  #endregion $ListViewOptionListView = [System.Windows.Forms.ListView]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewDrawColumnHeader ********_x000D__x000A_  function Start-ListViewOptionListViewDrawColumnHeader_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawColumnHeader Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawColumnHeader Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawColumnHeader Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawColumnHeader Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawColumnHeader Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)_x000D__x000A_    $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))_x000D__x000A_    $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawColumnHeader Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewDrawColumnHeader ********_x000D__x000A_  $ListViewOptionListView.add_DrawColumnHeader({Start-ListViewOptionListViewDrawColumnHeader -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewDrawItem ********_x000D__x000A_  function Start-ListViewOptionListViewDrawItem_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawItem Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawItem Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawItem Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawItem Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawItem -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawItem Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Return to Default Draw_x000D__x000A_    $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawItem Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewDrawItem ********_x000D__x000A_  $ListViewOptionListView.add_DrawItem({Start-ListViewOptionListViewDrawItem -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewDrawSubItem ********_x000D__x000A_  function Start-ListViewOptionListViewDrawSubItem_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawSubItem Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawSubItem Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawSubItem Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawSubItem Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawSubItem -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawSubItem Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Return to Default Draw_x000D__x000A_    $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawSubItem Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewDrawSubItem ********_x000D__x000A_  $ListViewOptionListView.add_DrawSubItem({Start-ListViewOptionListViewDrawSubItem -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewMouseDown ********_x000D__x000A_  function Start-ListViewOptionListViewMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($ListViewOptionListView.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $ListViewOptionContextMenuStrip.Show($ListViewOptionListView, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewMouseDown ********_x000D__x000A_  $ListViewOptionListView.add_MouseDown({ Start-ListViewOptionListViewMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A__x000D__x000A_  foreach ($PropName in $Property)_x000D__x000A_  {_x000D__x000A_    [Void]$ListViewOptionListView.Columns.Add($PropName, -2)_x000D__x000A_  }_x000D__x000A_  [Void]$ListViewOptionListView.Columns.Add(" ", ($ListViewOptionForm.Width * 2))_x000D__x000A__x000D__x000A_  ForEach ($Item in $Items)_x000D__x000A_  {_x000D__x000A_    ($ListViewOptionListView.Items.Add(($ListViewItem = [System.Windows.Forms.ListViewItem]::New("$($Item.($Property[0]))")))).SubItems.AddRange(@($Property[1..99] | ForEach-Object -Process { "$($Item.($PSItem))" }))_x000D__x000A_    $ListViewItem.Name = "$($Item.($Property[0]))"_x000D__x000A_    $ListViewItem.Tag = $Item_x000D__x000A_    $ListViewItem.Tooltiptext = "$($Item.($Tooltip))"_x000D__x000A_    $ListViewItem.Selected = ($Item -in $Selected)_x000D__x000A_    $ListViewItem.Checked = ($Multi.IsPresent -and $ListViewItem.Selected)_x000D__x000A_    $ListViewItem.Font = [MyConfig]::Font.Regular_x000D__x000A_  }_x000D__x000A_  $ListViewOptionListView.Tag = @($ListViewOptionListView.Items)_x000D__x000A__x000D__x000A_  If ($Filter.IsPresent)_x000D__x000A_  {_x000D__x000A_    #region $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionPanel.Controls.Add($ListViewOptionFilterLabel)_x000D__x000A_    $ListViewOptionFilterLabel.AutoSize = $True_x000D__x000A_    $ListViewOptionFilterLabel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $ListViewOptionFilterLabel.Font = [MyConfig]::Font.Regular_x000D__x000A_    $ListViewOptionFilterLabel.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_    $ListViewOptionFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ListViewOptionListView.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_    $ListViewOptionFilterLabel.Name = "ListViewOptionFilterLabel"_x000D__x000A_    $ListViewOptionFilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), $ListViewOptionFilterLabel.PreferredHeight)_x000D__x000A_    $ListViewOptionFilterLabel.Text = "Filter List:"_x000D__x000A_    $ListViewOptionFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight_x000D__x000A_    #endregion $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    #region $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $ListViewOptionPanel.Controls.Add($ListViewOptionTextBox)_x000D__x000A_    $ListViewOptionTextBox.AutoSize = $False_x000D__x000A_    $ListViewOptionTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_    $ListViewOptionTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_    $ListViewOptionTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $ListViewOptionTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    $ListViewOptionTextBox.Location = [System.Drawing.Point]::New(($ListViewOptionFilterLabel.Right + [MyConfig]::FormSpacer), $ListViewOptionFilterLabel.Top)_x000D__x000A_    $ListViewOptionTextBox.MaxLength = 100_x000D__x000A_    $ListViewOptionTextBox.Name = "ListViewOptionTextBox"_x000D__x000A_    $ListViewOptionTextBox.Size = [System.Drawing.Size]::New(($ListViewOptionListView.Right - $ListViewOptionTextBox.Left), $ListViewOptionFilterLabel.Height)_x000D__x000A_    #$ListViewOptionTextBox.TabIndex = 0_x000D__x000A_    $ListViewOptionTextBox.TabStop = $False_x000D__x000A_    $ListViewOptionTextBox.Tag = @{ "HintText" = "Enter Text and Press [Enter] to Filter List Items."; "HintEnabled" = $True }_x000D__x000A_    $ListViewOptionTextBox.Text = ""_x000D__x000A_    $ListViewOptionTextBox.WordWrap = $False_x000D__x000A_    #endregion $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_    #region ******** Function Start-ListViewOptionTextBoxGotFocus ********_x000D__x000A_    Function Start-ListViewOptionTextBoxGotFocus_x000D__x000A_    {_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          GotFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          GotFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the GotFocus Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox GotFocus Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter GotFocus Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_      If ($Sender.Tag.HintEnabled)_x000D__x000A_      {_x000D__x000A_        $Sender.Text = ""_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit GotFocus Event for `$ListViewOptionTextBox"_x000D__x000A_    }_x000D__x000A_    #endregion ******** Function Start-ListViewOptionTextBoxGotFocus ********_x000D__x000A_    $ListViewOptionTextBox.add_GotFocus({ Start-ListViewOptionTextBoxGotFocus -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_    #region ******** Function Start-ListViewOptionTextBoxKeyDown ********_x000D__x000A_    Function Start-ListViewOptionTextBoxKeyDown_x000D__x000A_    {_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          KeyDown Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          KeyDown Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the KeyDown Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox KeyDown Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)_x000D__x000A_      {_x000D__x000A_        # Suppress KeyPress_x000D__x000A_        $EventArg.SuppressKeyPress = $True_x000D__x000A__x000D__x000A_        If ([String]::IsNullOrEmpty($Sender.Text.Trim()))_x000D__x000A_        {_x000D__x000A_          $ListViewOptionListView.Items.Clear()_x000D__x000A_          $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $Sender.Text) -or ($PSItem.SubItems[1].Text -Match $Sender.Text) })_x000D__x000A_          $ListViewOptionListView.Items.Clear()_x000D__x000A_          $ListViewOptionListView.Items.AddRange($TmpNewList)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionTextBox"_x000D__x000A_    }_x000D__x000A_    #endregion ******** Function Start-ListViewOptionTextBoxKeyDown ********_x000D__x000A_    $ListViewOptionTextBox.add_KeyDown({ Start-ListViewOptionTextBoxKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_    #region ******** Function Start-ListViewOptionTextBoxLostFocus ********_x000D__x000A_    Function Start-ListViewOptionTextBoxLostFocus_x000D__x000A_    {_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          LostFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          LostFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the LostFocus Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox LostFocus Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter LostFocus Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_      If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_      {_x000D__x000A_        $Sender.Text = $Sender.Tag.HintText_x000D__x000A_        $Sender.Tag.HintEnabled = $True_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A__x000D__x000A_        $ListViewOptionListView.Items.Clear()_x000D__x000A_        $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $Sender.Tag.HintEnabled = $False_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A__x000D__x000A_        $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $ListViewOptionTextBox.Text) -or ($PSItem.SubItems[1].Text -Match $ListViewOptionTextBox.Text) })_x000D__x000A_        $ListViewOptionListView.Items.Clear()_x000D__x000A_        $ListViewOptionListView.Items.AddRange($TmpNewList)_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit LostFocus Event for `$ListViewOptionTextBox"_x000D__x000A_    }_x000D__x000A_    #endregion ******** Function Start-ListViewOptionTextBoxLostFocus ********_x000D__x000A_    $ListViewOptionTextBox.add_LostFocus({ Start-ListViewOptionTextBoxLostFocus -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_    Start-ListViewOptionTextBoxLostFocus -Sender $ListViewOptionTextBox -EventArg "Lost Focus"_x000D__x000A__x000D__x000A_    $TempClientSize = [System.Drawing.Size]::New(($ListViewOptionTextBox.Right + [MyConfig]::FormSpacer), ($ListViewOptionTextBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempClientSize = [System.Drawing.Size]::New(($ListViewOptionListView.Right + [MyConfig]::FormSpacer), ($ListViewOptionListView.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOption ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$ListViewOptionListView.Controls.Add($ListViewOptionContextMenuStrip)_x000D__x000A_  $ListViewOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$ListViewOptionContextMenuStrip.Enabled = $True_x000D__x000A_  $ListViewOptionContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListViewOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ListViewOptionContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $ListViewOptionContextMenuStrip.Name = "ListViewOptionContextMenuStrip"_x000D__x000A_  #endregion $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionContextMenuStripOpening ********_x000D__x000A_  function Start-ListViewOptionContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the ListViewOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the ListViewOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$ListViewOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$ListViewOptionContextMenuStrip"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionContextMenuStripOpening ********_x000D__x000A_  $ListViewOptionContextMenuStrip.add_Opening({Start-ListViewOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionContextMenuStripItemClick ********_x000D__x000A_  function Start-ListViewOptionContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "CheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { -not $PSItem.Checked })_x000D__x000A_        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $True }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnCheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { $PSItem.Checked })_x000D__x000A_        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $False }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionContextMenuStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $ListViewOptionContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-ListViewOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $ListViewOptionContextMenuStrip -Text "Uncheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-ListViewOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $ListViewOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionForm.Controls.Add($ListViewOptionBtmPanel)_x000D__x000A_  $ListViewOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListViewOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ListViewOptionBtmPanel.Name = "ListViewOptionBtmPanel"_x000D__x000A_  #endregion $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListViewOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ListViewOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmLeftButton)_x000D__x000A_  $ListViewOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ListViewOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListViewOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListViewOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListViewOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ListViewOptionBtmLeftButton.Name = "ListViewOptionBtmLeftButton"_x000D__x000A_  $ListViewOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $ListViewOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $ListViewOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ListViewOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ListViewOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-ListViewOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ((($ListViewOptionListView.CheckedItems.Count -gt 0) -and ((-not $Multi.IsPresent) -or $Multi.IsPresent)) -or (-not $Required.IsPresent))_x000D__x000A_    {_x000D__x000A_      $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ListViewOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionBtmLeftButtonClick ********_x000D__x000A_  $ListViewOptionBtmLeftButton.add_Click({ Start-ListViewOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmMidButton)_x000D__x000A_  $ListViewOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ListViewOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ListViewOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListViewOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListViewOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListViewOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ListViewOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListViewOptionBtmMidButton.Name = "ListViewOptionBtmMidButton"_x000D__x000A_  $ListViewOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $ListViewOptionBtmMidButton.TabStop = $True_x000D__x000A_  $ListViewOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ListViewOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ListViewOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionBtmMidButtonClick ********_x000D__x000A_  function Start-ListViewOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ([String]::IsNullOrEmpty($Selected))_x000D__x000A_    {_x000D__x000A_      $ListViewOptionListView.SelectedItems.Clear()_x000D__x000A_      $ListViewOptionListView.Items | ForEach-Object -Process { $PSItem.Checked = $False }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      foreach ($Item in $ListViewOptionListView.Items)_x000D__x000A_      {_x000D__x000A_        $Item.Selected = ($Item.Tag -in $Selected)_x000D__x000A_        $Item.Checked = ($Multi.IsPresent -and $Item.Selected)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $ListViewOptionListView.Refresh()_x000D__x000A_    $ListViewOptionListView.Select()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionBtmMidButtonClick ********_x000D__x000A_  $ListViewOptionBtmMidButton.add_Click({ Start-ListViewOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmRightButton)_x000D__x000A_  $ListViewOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ListViewOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListViewOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListViewOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListViewOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ListViewOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListViewOptionBtmRightButton.Name = "ListViewOptionBtmRightButton"_x000D__x000A_  $ListViewOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $ListViewOptionBtmRightButton.TabStop = $True_x000D__x000A_  $ListViewOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ListViewOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ListViewOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionBtmRightButtonClick ********_x000D__x000A_  function Start-ListViewOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionBtmRightButtonClick ********_x000D__x000A_  $ListViewOptionBtmRightButton.add_Click({ Start-ListViewOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ListViewOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ListViewOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ListViewOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ListViewOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ListViewOptionForm.ClientSize = [System.Drawing.Size]::New($ListViewOptionForm.ClientSize.Width, ($TempClientSize.Height + $ListViewOptionBtmPanel.Height))_x000D__x000A_  $ListViewOptionForm.MinimumSize = $ListViewOptionForm.Size_x000D__x000A_  $ListViewOptionListView.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")_x000D__x000A_  If ($Filter.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListViewOptionFilterLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom")_x000D__x000A_    $ListViewOptionTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom, Right")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ListViewOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ListViewOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ListViewOptionForm.ShowDialog($PILForm)_x000D__x000A_  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      [ListViewOption]::New($True, $DialogResult, ($ListViewOptionListView.CheckedItems | Select-Object -ExpandProperty "Tag"))_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [ListViewOption]::New($True, $DialogResult, ($ListViewOptionListView.SelectedItems | Select-Object -ExpandProperty "Tag"))_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [ListViewOption]::New($False, $DialogResult, "")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ListViewOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ListViewOption"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionContextMenuStripItemClick</S>
            <Obj N="Value" RefId="221">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "CheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { -not $PSItem.Checked })_x000D__x000A_        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $True }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnCheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { $PSItem.Checked })_x000D__x000A_        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $False }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionContextMenuStripItem"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Write-RichTextBox</S>
            <Obj N="Value" RefId="222">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Write-RichTextBox</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Write to RichTextBox_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Write to RichTextBox_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER TextFore_x000D__x000A_    .PARAMETER Font_x000D__x000A_    .PARAMETER Alignment_x000D__x000A_    .PARAMETER Text_x000D__x000A_    .PARAMETER BulletFore_x000D__x000A_    .PARAMETER NoNewLine_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox -Text $Text_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "NewLine")]_x000D__x000A_  param (_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox,_x000D__x000A_    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Windows.Forms.HorizontalAlignment]$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,_x000D__x000A_    [String]$Text,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "NewLine")]_x000D__x000A_    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "NoNewLine")]_x000D__x000A_    [Switch]$NoNewLine_x000D__x000A_  )_x000D__x000A_  $RichTextBox.SelectionLength = 0_x000D__x000A_  $RichTextBox.SelectionStart = $RichTextBox.TextLength_x000D__x000A_  $RichTextBox.SelectionAlignment = $Alignment_x000D__x000A_  $RichTextBox.SelectionFont = $Font_x000D__x000A_  $RichTextBox.SelectionColor = $TextFore_x000D__x000A_  $RichTextBox.AppendText($Text)_x000D__x000A_  if (-not $NoNewLine.IsPresent)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionColor = $BulletFore_x000D__x000A_    $RichTextBox.AppendText("`r`n")_x000D__x000A_  }_x000D__x000A_  $RichTextBox.ScrollToCaret()_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  $RichTextBox.Parent.Parent.Activate()_x000D__x000A_  [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCScriptContextMenuStripItemClick</S>
            <Obj N="Value" RefId="223">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCScriptContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the PILTCScript ContextMenuStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the PILTCScript ContextMenuStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $PILOpenFileDialog.FileName = ""_x000D__x000A_        $PILOpenFileDialog.Filter = "PowerShell Scripts|*.PS1|All Files (*.*)|*.*"_x000D__x000A_        $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_        $PILOpenFileDialog.Multiselect = $False_x000D__x000A_        $PILOpenFileDialog.Title = "Load PIL Thread Script"_x000D__x000A_        $PILOpenFileDialog.Tag = $Null_x000D__x000A_        $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_        If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_        {_x000D__x000A_          $PILTCScriptTextBox.Text = Get-Content -Path $PILOpenFileDialog.FileName -Raw_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCScriptTextBox.Text = $Null_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-UserResponseFormShown</S>
            <Obj N="Value" RefId="224">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-UserResponseFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $UserResponse Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $UserResponse Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-UserResponseFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$UserResponseForm"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $Sender.Refresh()_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$UserResponseForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListViewOptionBtmRightButtonClick</S>
            <Obj N="Value" RefId="225">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListViewOptionBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCModulesListBoxMouseDown</S>
            <Obj N="Value" RefId="226">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCModulesListBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCModules ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCModules ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Up"].Enabled = ($TempIndex -gt 0)_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Down"].Enabled = ($TempIndex -lt ($Sender.Items.Count - 1))_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Up"].Enabled = $False_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Down"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCModulesContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCModulesContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ComboBoxFilterBtmRightButtonClick</S>
            <Obj N="Value" RefId="227">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ComboBoxFilterBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">New-ColumnHeader</S>
            <Obj N="Value" RefId="228">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">New-ColumnHeader</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new ColumnHeader to a ListView control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ColumnHeader with the specified properties and adds it to the provided ListView control._x000D__x000A_      It supports customization of the header text, name, tag, and width. The new ColumnHeader can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER ListView_x000D__x000A_      The ListView control to which the new ColumnHeader will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new ColumnHeader. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new ColumnHeader. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new ColumnHeader._x000D__x000A_    .PARAMETER Width_x000D__x000A_      The width of the new ColumnHeader in pixels. Defaults to -2 (auto size)._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created ColumnHeader object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-ColumnHeader -ListView $listView -Text "Name" -Tag "UserName"_x000D__x000A_      Adds a new ColumnHeader with text "Name" and tag "UserName" to $listView._x000D__x000A_    .EXAMPLE_x000D__x000A_      $col = New-ColumnHeader -ListView $listView -Text "Date" -Width 120 -PassThru_x000D__x000A_      Adds a new ColumnHeader with text "Date" and width 120 pixels, and returns the created ColumnHeader object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$ListView,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Int]$Width = -2,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempColumnHeader = [System.Windows.Forms.ColumnHeader]_x000D__x000A_  $TempColumnHeader = [System.Windows.Forms.ColumnHeader]::New()_x000D__x000A_  [Void]$ListView.Columns.Add($TempColumnHeader)_x000D__x000A_  $TempColumnHeader.Tag = $Tag_x000D__x000A_  $TempColumnHeader.Text = $Text_x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempColumnHeader.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempColumnHeader.Name = $Text_x000D__x000A_  }_x000D__x000A_  $TempColumnHeader.Width = $Width_x000D__x000A_  #endregion $TempColumnHeader = [System.Windows.Forms.ColumnHeader]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempColumnHeader_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempColumnHeader = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ChangeLogFormShown</S>
            <Obj N="Value" RefId="229">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ChangeLogFormShown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_     .SYNOPSIS_x000D__x000A_       Shown Event for the ChangeLog Form Control_x000D__x000A_     .DESCRIPTION_x000D__x000A_       Shown Event for the ChangeLog Form Control_x000D__x000A_     .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_     .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ChangeLogFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ChangeLogForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    $ChangeLogTextBox.AppendText($ChangeText)_x000D__x000A__x000D__x000A_    $ChangeLogTextBox.SelectionLength = 0_x000D__x000A_    $ChangeLogTextBox.SelectionStart = 0_x000D__x000A_    $ChangeLogTextBox.ScrollToCaret()_x000D__x000A_    $Sender.Refresh()_x000D__x000A_    $Sender.Activate()_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ChangeLogForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListListViewDrawItem</S>
            <Obj N="Value" RefId="230">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListListViewDrawItem</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      DrawItem Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      DrawItem Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the DrawItem Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList DrawItem Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewDrawItem -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter DrawItem Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  # Return to Default Draw_x000D__x000A_  $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit DrawItem Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCScriptTextBoxMouseDown</S>
            <Obj N="Value" RefId="231">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCScriptTextBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCScript TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCScript TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptTextBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $PILTCScriptContextMenuStrip.Items["Clear"].Enabled = ($PILTCScriptTextBox.Text.Length -gt 0)_x000D__x000A_    $PILTCScriptContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCFunctionsContextMenuStripItemClick</S>
            <Obj N="Value" RefId="232">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCFunctionsContextMenuStripItemClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ItemClicked Event for the PILTCFunctions ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ItemClicked Event for the PILTCFunctions ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the ItemClicked Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions ItemClicked Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $PILOpenFileDialog.FileName = ""_x000D__x000A_        $PILOpenFileDialog.Filter = "PowerShell Scripts|*.PS1|All Files (*.*)|*.*"_x000D__x000A_        $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_        $PILOpenFileDialog.Multiselect = $False_x000D__x000A_        $PILOpenFileDialog.Title = "Load PIL Thread Script"_x000D__x000A_        $PILOpenFileDialog.Tag = $Null_x000D__x000A_        $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_        If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_        {_x000D__x000A_          $TmpFunctions = Get-Content -Path $PILOpenFileDialog.FileName -Raw_x000D__x000A_          $AST = [System.Management.Automation.Language.Parser]::ParseInput($TmpFunctions, [ref]$Null, [ref]$Null)_x000D__x000A_          $Functions = @($AST.FindAll({ Param ($Node) ($Node -is [System.Management.Automation.Language.FunctionDefinitionAst] -and (-not ($node.Parent -is [System.Management.Automation.Language.FunctionMemberAst]))) }, $True))_x000D__x000A_          If ($Functions.Count -gt 0)_x000D__x000A_          {_x000D__x000A_            ForEach ($Function In $Functions)_x000D__x000A_            {_x000D__x000A_              [Void]$PILTCFunctionsListBox.Items.Add([PILFunction]::New($Function.Name, $Function.Body.Extent.Text))_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items.RemoveAt($PILTCFunctionsListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionBtmLeftButtonClick</S>
            <Obj N="Value" RefId="233">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($ListBoxOptionListBox.SelectedIndex -gt 0)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-CheckBoxOption</S>
            <Obj N="Value" RefId="234">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-CheckBoxOption</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-CheckBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-CheckBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-CheckBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Selected Items_x000D__x000A_    .PARAMETER OrderedItems_x000D__x000A_      Ordered List (HashTable) if Names and Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      With of Get-CheckBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4" }_x000D__x000A_      $DialogResult = Get-CheckBoxOption -Title "Get CheckBox Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected @("1", "4") -Required_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [Object[]]$Selected = @(),_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$Required_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-CheckBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** CheckBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $CheckBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $CheckBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $CheckBoxOptionForm.KeyPreview = $True_x000D__x000A_  $CheckBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $CheckBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $CheckBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $CheckBoxOptionForm.Name = "CheckBoxOptionForm"_x000D__x000A_  $CheckBoxOptionForm.Owner = $PILForm_x000D__x000A_  $CheckBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $CheckBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $CheckBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionFormKeyDown ********_x000D__x000A_  Function Start-CheckBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the CheckBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the CheckBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$CheckBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $CheckBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$CheckBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionFormKeyDown ********_x000D__x000A_  $CheckBoxOptionForm.add_KeyDown({ Start-CheckBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionFormShown ********_x000D__x000A_  Function Start-CheckBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the CheckBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the CheckBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$CheckBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$CheckBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionFormShown ********_x000D__x000A_  $CheckBoxOptionForm.add_Shown({ Start-CheckBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for CheckBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionForm.Controls.Add($CheckBoxOptionPanel)_x000D__x000A_  $CheckBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $CheckBoxOptionPanel.Name = "CheckBoxOptionPanel"_x000D__x000A_  #$CheckBoxOptionPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)_x000D__x000A_  #endregion $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckBoxOptionPanel.Controls.Add($CheckBoxOptionLabel)_x000D__x000A_    $CheckBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $CheckBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $CheckBoxOptionLabel.Name = "CheckBoxOptionLabel"_x000D__x000A_    $CheckBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $CheckBoxOptionLabel.Text = $Message_x000D__x000A_    $CheckBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($CheckBoxOptionLabel.Text, [MyConfig]::Font.Regular, $CheckBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $CheckBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $CheckBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempBottom = [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $CheckBoxOptionPanel.Controls.Add($CheckBoxOptionGroupBox)_x000D__x000A_  $CheckBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $CheckBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $CheckBoxOptionGroupBox.Name = "CheckBoxOptionGroupBox"_x000D__x000A_  $CheckBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_  $CheckBoxOptionGroupBox.Text = $Null_x000D__x000A_  #endregion $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $CheckBoxOptionNumber = 0_x000D__x000A_  $GroupBottom = [MyConfig]::Font.Height_x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    #region $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()_x000D__x000A_    $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()_x000D__x000A_    $CheckBoxOptionGroupBox.Controls.Add($CheckBoxOptionCheckBox)_x000D__x000A_    #$CheckBoxOptionCheckBox.AutoCheck = $True_x000D__x000A_    $CheckBoxOptionCheckBox.AutoSize = $True_x000D__x000A_    $CheckBoxOptionCheckBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $CheckBoxOptionCheckBox.Checked = ($OrderedItems[$Key] -in $Selected)_x000D__x000A_    $CheckBoxOptionCheckBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $CheckBoxOptionCheckBox.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $CheckBoxOptionCheckBox.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)_x000D__x000A_    $CheckBoxOptionCheckBox.Name = "CheckBox$($CheckBoxOptionNumber)"_x000D__x000A_    $CheckBoxOptionCheckBox.Tag = $OrderedItems[$Key]_x000D__x000A_    $CheckBoxOptionCheckBox.Text = $Key_x000D__x000A_    #endregion $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()_x000D__x000A__x000D__x000A_    $GroupBottom = ($CheckBoxOptionCheckBox.Bottom + [MyConfig]::FormSpacer)_x000D__x000A_    $CheckBoxOptionNumber += 1_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $CheckBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($CheckBoxOptionGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** $CheckBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionForm.Controls.Add($CheckBoxOptionBtmPanel)_x000D__x000A_  $CheckBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $CheckBoxOptionBtmPanel.Name = "CheckBoxOptionBtmPanel"_x000D__x000A_  #endregion $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($CheckBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmLeftButton)_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $CheckBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Name = "CheckBoxOptionBtmLeftButton"_x000D__x000A_  $CheckBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $CheckBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionBtmLeftButtonClick ********_x000D__x000A_  Function Start-CheckBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($Required.IsPresent)_x000D__x000A_    {_x000D__x000A_      If (@($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "CheckBox") -and $PSItem.Checked }).Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        [Void][System.Windows.Forms.MessageBox]::Show($CheckBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $CheckBoxOptionBtmLeftButton.add_Click({ Start-CheckBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmMidButton)_x000D__x000A_  $CheckBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $CheckBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($CheckBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckBoxOptionBtmMidButton.Name = "CheckBoxOptionBtmMidButton"_x000D__x000A_  $CheckBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $CheckBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $CheckBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $CheckBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $CheckBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionBtmMidButtonClick ********_x000D__x000A_  Function Start-CheckBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($CheckBox In @($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))_x000D__x000A_    {_x000D__x000A_      $CheckBox.Checked = ($CheckBox.Tag -in $Selected)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionBtmMidButtonClick ********_x000D__x000A_  $CheckBoxOptionBtmMidButton.add_Click({ Start-CheckBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmRightButton)_x000D__x000A_  $CheckBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $CheckBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($CheckBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckBoxOptionBtmRightButton.Name = "CheckBoxOptionBtmRightButton"_x000D__x000A_  $CheckBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $CheckBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $CheckBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $CheckBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionBtmRightButtonClick ********_x000D__x000A_  Function Start-CheckBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionBtmRightButtonClick ********_x000D__x000A_  $CheckBoxOptionBtmRightButton.add_Click({ Start-CheckBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $CheckBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($CheckBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($CheckBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $CheckBoxOptionForm.ClientSize = [System.Drawing.Size]::New($CheckBoxOptionForm.ClientSize.Width, ($CheckBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer + $CheckBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for CheckBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** CheckBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $CheckBoxOptionForm.ShowDialog($PILForm)_x000D__x000A_  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    $TempItems = @{}_x000D__x000A_    $CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "CheckBox*" -and $PSItem.Checked } | ForEach-Object -Process { $TempItems.Add($PSItem.Text, $PSItem.Tag) }_x000D__x000A_    [CheckBoxOption]::New($True, $DialogResult, $TempItems)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [CheckBoxOption]::New($False, $DialogResult)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $CheckBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-CheckBoxOption"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCModulesContextMenuStripOpening</S>
            <Obj N="Value" RefId="235">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCModulesContextMenuStripOpening</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCModules ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCModules ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILFormLoad</S>
            <Obj N="Value" RefId="236">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILFormLoad</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Load Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Load Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Load Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Load Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormLoad -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Load Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $Screen = ([System.Windows.Forms.Screen]::FromControl($Sender)).WorkingArea_x000D__x000A_  $Sender.Left = [Math]::Floor(($Screen.Width - $Sender.Width) / 2)_x000D__x000A_  $Sender.Top = [Math]::Floor(($Screen.Height - $Sender.Height) / 2)_x000D__x000A__x000D__x000A_  if ([MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    # Disable Control Close Menu / [X]_x000D__x000A_    #[ControlBox.Menu]::DisableFormClose($PILForm.Handle)_x000D__x000A__x000D__x000A_    [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_    [Void][Console.Window]::Hide()_x000D__x000A_    $PILForm.Tag = $False_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void][Console.Window]::Show()_x000D__x000A_    [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_    $PILForm.Tag = $True_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Load Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-CheckedListBoxOptionBtmLeftButtonClick</S>
            <Obj N="Value" RefId="237">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-CheckedListBoxOptionBtmLeftButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($CheckedListBoxOptionCheckedListBox.CheckedItems.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($CheckedListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmLeftButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-MyWorkstationInfo</S>
            <Obj N="Value" RefId="238">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-MyWorkstationInfo</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Verify Remote Workstation is the Correct One_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Verify Remote Workstation is the Correct One_x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Name of the Computer to Verify_x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Credentials to use when connecting to the Remote Computer_x000D__x000A_    .PARAMETER Serial_x000D__x000A_      Return Serial Number_x000D__x000A_    .PARAMETER Mobile_x000D__x000A_      Check if System is Desktop / Laptop_x000D__x000A_    .INPUTS_x000D__x000A_    .OUTPUTS_x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyWorkstationInfo -ComputerName "MyWorkstation"_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [PSCredential]$Credential,_x000D__x000A_    [Switch]$Serial,_x000D__x000A_    [Switch]$Mobile_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo"_x000D__x000A__x000D__x000A_    # Default Common Get-WmiObject Options_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      $Params = @{_x000D__x000A_        "ComputerName" = $Null_x000D__x000A_        "Credential"   = $Credential_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $Params = @{_x000D__x000A_        "ComputerName" = $Null_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo - Process"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      # Start Setting Return Values as they are Found_x000D__x000A_      $VerifyObject = [MyWorkstationInfo]::New($Computer)_x000D__x000A__x000D__x000A_      # Validate ComputerName_x000D__x000A_      if ($Computer -match "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$")_x000D__x000A_      {_x000D__x000A_        try_x000D__x000A_        {_x000D__x000A_          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not_x000D__x000A_          $IPAddresses = @([System.Net.Dns]::GetHostAddresses($Computer) | Where-Object -FilterScript { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)_x000D__x000A_          :FoundMyWork foreach ($IPAddress in $IPAddresses)_x000D__x000A_          {_x000D__x000A_            if ([System.Net.NetworkInformation.Ping]::New().Send($IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)_x000D__x000A_            {_x000D__x000A_              # Set Default Parms_x000D__x000A_              $Params.ComputerName = $IPAddress_x000D__x000A__x000D__x000A_              # Get ComputerSystem_x000D__x000A_              [Void]($MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)_x000D__x000A_              $VerifyObject.AddComputerSystem($Computer, $IPAddress, ($MyCompData.Name), ($MyCompData.PartOfDomain), ($MyCompData.Domain), ($MyCompData.Manufacturer), ($MyCompData.Model), ($MyCompData.UserName), ($MyCompData.TotalPhysicalMemory))_x000D__x000A_              $MyCompData.Dispose()_x000D__x000A__x000D__x000A_              # Verify Remote Computer is the Connect Computer, No need to get any more information_x000D__x000A_              if ($VerifyObject.Found)_x000D__x000A_              {_x000D__x000A_                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                [Void]($MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)_x000D__x000A_                $VerifyObject.AddOperatingSystem(($MyOSData.ProductType), ($MyOSData.Caption), ($MyOSData.CSDVersion), ($MyOSData.BuildNumber), ($MyOSData.Version), ($MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LastBootUpTime)))_x000D__x000A_                $MyOSData.Dispose()_x000D__x000A__x000D__x000A_                # Optional SerialNumber Job_x000D__x000A_                if ($Serial.IsPresent)_x000D__x000A_                {_x000D__x000A_                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                  [Void]($MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)_x000D__x000A_                  $VerifyObject.AddSerialNumber($MyBIOSData.SerialNumber)_x000D__x000A_                  $MyBIOSData.Dispose()_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # Optional Mobile / ChassisType Job_x000D__x000A_                if ($Mobile.IsPresent)_x000D__x000A_                {_x000D__x000A_                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                  [Void]($MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)_x000D__x000A_                  $VerifyObject.AddIsMobile($MyChassisData.ChassisTypes)_x000D__x000A_                  $MyChassisData.Dispose()_x000D__x000A_                }_x000D__x000A_              }_x000D__x000A_              else_x000D__x000A_              {_x000D__x000A_                $VerifyObject.UpdateStatus("Wrong Workstation Name")_x000D__x000A_              }_x000D__x000A_              # Beak out of Loop, Verify was a Success no need to try other IP Address if any_x000D__x000A_              break FoundMyWork_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        catch_x000D__x000A_        {_x000D__x000A_          # Workstation Not in DNS_x000D__x000A_          $VerifyObject.UpdateStatus("Workstation Not in DNS")_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $VerifyObject.UpdateStatus("Invalid Computer Name")_x000D__x000A_      }_x000D__x000A__x000D__x000A_      # Set End Time and Return Results_x000D__x000A_      $VerifyObject.SetEndTime()_x000D__x000A_    }_x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo - Process"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo"_x000D__x000A_  }_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Protect-WithCert</S>
            <Obj N="Value" RefId="239">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Protect-WithCert</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encrypts or decrypts text data using certificate information as key material._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encrypts or decrypts a text string using properties from a specified certificate as the passphrase and salt for AES encryption. _x000D__x000A_      You can optionally use a salt derived from the certificate's validity period, and choose to use universal (UTC) or local time for salt generation. _x000D__x000A_      Decryption uses the same parameters as encryption._x000D__x000A_    .PARAMETER CertKey_x000D__x000A_      The thumbprint or subject name of the certificate in the LocalMachine\Root store to use for encryption/decryption._x000D__x000A_    .PARAMETER TextString_x000D__x000A_      The text string to encrypt or decrypt._x000D__x000A_    .PARAMETER Salt_x000D__x000A_      An integer (0-3) specifying which salt format to use, based on the certificate's NotBefore/NotAfter properties. Only used if specified._x000D__x000A_    .PARAMETER Local_x000D__x000A_      Switch to use Local time for salt generation instead of UTC time. Only relevant if -Salt is specified._x000D__x000A_    .PARAMETER Decrypt_x000D__x000A_      Switch to indicate that the function should decrypt the input string instead of encrypting._x000D__x000A_    .EXAMPLE_x000D__x000A_      # Encrypt with local salt_x000D__x000A_      $EncryptedText = Protect-WithCert -CertKey $CertKey -Salt 0 -TextString $TextString_x000D__x000A_    .EXAMPLE_x000D__x000A_      # Encrypt with universal salt_x000D__x000A_      $EncryptedText = Protect-WithCert -CertKey $CertKey -Salt 1 -Universal -TextString $TextString_x000D__x000A_    .EXAMPLE_x000D__x000A_      # Encrypt with no salt (uses certificate subject as salt)_x000D__x000A_      $EncryptedText = Protect-WithCert -CertKey $CertKey -TextString $TextString_x000D__x000A_    .EXAMPLE_x000D__x000A_      # Decrypt previously encrypted text_x000D__x000A_      $DecryptedText = Protect-WithCert -CertKey $CertKey -Salt 0 -TextString $EncryptedText -Decrypt_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "NoSalt")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$CertKey,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$TextString,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "WithSalt")]_x000D__x000A_    [ValidateRange(0, 3)]_x000D__x000A_    [Int]$Salt,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "WithSalt")]_x000D__x000A_    [Switch]$Local,_x000D__x000A_    [Switch]$Decrypt_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $Cert = Get-ChildItem -Path "Cert:\LocalMachine\Root\$($CertKey)"_x000D__x000A_  If ($PSCmdlet.ParameterSetName -eq "WithSalt")_x000D__x000A_  {_x000D__x000A_    If ($Universal.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TmpNotBefore = $Cert.NotBefore.ToUniversalTime()_x000D__x000A_      $TmpNotAfter = $Cert.NotAfter.ToUniversalTime()_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $TmpNotBefore = $Cert.NotBefore_x000D__x000A_      $TmpNotAfter = $Cert.NotAfter_x000D__x000A_    }_x000D__x000A_    $SaltInit = @($TmpNotBefore.ToString("yyyyMMddhhmmss"), $TmpNotBefore.ToString("hhmmssyyyyMMdd"), $TmpNotAfter.ToString("yyyyMMddhhmmss"), $TmpNotAfter.ToString("hhmmssyyyyMMdd"))[$Salt]_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $SaltInit = $Cert.Subject_x000D__x000A_  }_x000D__x000A_  Protect-MySensitiveData -PassPhrase ($Cert.SerialNumber) -Salt $SaltInit -String $TextString -Decrypt:($Decrypt.IsPresent)_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCVariablesListBoxMouseDown</S>
            <Obj N="Value" RefId="240">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCVariablesListBoxMouseDown</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCVariables ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCVariables ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Edit"].Enabled = $True_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Edit"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCVariablesContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCVariablesContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputTextBoxKeyPress</S>
            <Obj N="Value" RefId="241">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputTextBoxKeyPress</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyPress Event for the MultiTextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyPress Event for the MultiTextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TextBox Control that fired the KeyPress Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TextBox KeyPress Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-MultiTextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyPress Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X_x000D__x000A_    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyPress Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Show-MyWebReport</S>
            <Obj N="Value" RefId="242">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Show-MyWebReport</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Opens a web report in the default browser (Edge or Chrome) as an app window._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function launches the specified report URL in Microsoft Edge or Google Chrome as an app window. _x000D__x000A_      It checks for the configured browser path in [MyConfig] and uses Edge if available, otherwise Chrome. _x000D__x000A_      If neither is configured, the function does nothing._x000D__x000A_    .PARAMETER ReportURL_x000D__x000A_      The URL of the web report to open. This parameter is mandatory._x000D__x000A_    .EXAMPLE_x000D__x000A_      Show-MyWebReport -ReportURL "https://myreportserver/report1"_x000D__x000A_      Opens the specified report in the configured browser as an app window._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$ReportURL_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-MyWebReport"_x000D__x000A__x000D__x000A_  if ([String]::IsNullOrEmpty(([MyConfig]::EdgePath)))_x000D__x000A_  {_x000D__x000A_    if (-not [String]::IsNullOrEmpty(([MyConfig]::ChromePath)))_x000D__x000A_    {_x000D__x000A_      Start-Process -FilePath ([MyConfig]::ChromePath) -ArgumentList "--app=`"$($ReportURL)`""_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    Start-Process -FilePath ([MyConfig]::EdgePath) -ArgumentList "--app=`"$($ReportURL)`""_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-MyWebReport"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputTextBoxLostFocus</S>
            <Obj N="Value" RefId="243">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputTextBoxLostFocus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      LostFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      LostFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the LostFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox LostFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter LostFocus Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_    {_x000D__x000A_      $Sender.Text = $Sender.Tag.HintText_x000D__x000A_      $Sender.Tag.HintEnabled = $True_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $Sender.Tag.HintEnabled = $False_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit LostFocus Event for `$TextBoxInputTextBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILTCFunctionsListBoxSelectedIndexChanged</S>
            <Obj N="Value" RefId="244">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILTCFunctionsListBoxSelectedIndexChanged</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCFunctions ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCFunctions ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Show-RichTextStatus</S>
            <Obj N="Value" RefId="245">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Show-RichTextStatus</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-RichTextStatus_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-RichTextStatus_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-RichTextStatus Dialog Window_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      Script Block to Execure_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      HashTable of Paramerts to Pass to the ScriptBlock_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Show-RichTextStatus Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Show-RichTextStatus Dialog Window_x000D__x000A_    .PARAMETER ButtonDefault_x000D__x000A_      The Default Selected Button_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      The DialogResult of the Left Button_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      The DialogResult of the Middle Button_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      The DialogResult of the Right Button_x000D__x000A_    .PARAMETER AllowControl_x000D__x000A_      Enable Pause and Break out of Script Block_x000D__x000A_    .PARAMETER AutoClose_x000D__x000A_      Auto Close the Status Message Dialog Window_x000D__x000A_    .PARAMETER AutoCloseWait_x000D__x000A_      Number of MilliSeconds to wait Before Auto Closing the Dialog Window_x000D__x000A_    .EXAMPLE_x000D__x000A_      $HashTable = @{"ShowHeader" = $True}_x000D__x000A_      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_      $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Zero")]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [ScriptBlock]$ScriptBlock = { },_x000D__x000A_    [HashTable]$HashTable = @{ },_x000D__x000A_    [Int]$Width = 45,_x000D__x000A_    [Int]$Height = 30,_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonLeft,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "One")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonMid,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonRight,_x000D__x000A_    [Switch]$AllowControl,_x000D__x000A_    [Switch]$AutoClose,_x000D__x000A_    [ValidateRange(0, 60000)]_x000D__x000A_    [int]$AutoCloseWait = 10_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-RichTextStatus"_x000D__x000A__x000D__x000A_  #region ******** Begin **** $Show-RichTextStatus **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $RichTextStatus Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RichTextStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RichTextStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RichTextStatusForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $RichTextStatusForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RichTextStatusForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $RichTextStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $RichTextStatusForm.Icon = $PILForm.Icon_x000D__x000A_  $RichTextStatusForm.KeyPreview = $AllowControl.IsPresent_x000D__x000A_  $RichTextStatusForm.MaximizeBox = $False_x000D__x000A_  $RichTextStatusForm.MinimizeBox = $False_x000D__x000A_  $RichTextStatusForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $RichTextStatusForm.Name = "RichTextStatusForm"_x000D__x000A_  $RichTextStatusForm.Owner = $PILForm_x000D__x000A_  $RichTextStatusForm.ShowInTaskbar = $False_x000D__x000A_  $RichTextStatusForm.Size = $RichTextStatusForm.MinimumSize_x000D__x000A_  $RichTextStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $RichTextStatusForm.Tag = @{ "Cancel" = $False; "Pause" = $False; "Finished" = $False }_x000D__x000A_  $RichTextStatusForm.Text = $Title_x000D__x000A_  #endregion $RichTextStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RichTextStatusFormKeyDown ********_x000D__x000A_  Function Start-RichTextStatusFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the RichTextStatus Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the RichTextStatus Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-RichTextStatusFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$RichTextStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Cancel = $True_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }_x000D__x000A_        {_x000D__x000A_          if ($Sender.Tag.Finished)_x000D__x000A_          {_x000D__x000A_            $Sender.DialogResult = $ButtonDefault_x000D__x000A_          }_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$RichTextStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RichTextStatusFormKeyDown ********_x000D__x000A_  If ($AllowControl.IsPresent)_x000D__x000A_  {_x000D__x000A_    $RichTextStatusForm.add_KeyDown({ Start-RichTextStatusFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-RichTextStatusFormShown ********_x000D__x000A_  function Start-RichTextStatusFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $RichTextStatus Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $RichTextStatus Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-RichTextStatusFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$RichTextStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Disable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = $False_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PassHashTable)_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox, $HashTable_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox_x000D__x000A_    }_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Re-enable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($RichTextStatusButtons)_x000D__x000A_    {_x000D__x000A_      1_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmMidButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmMidButton.DialogResult = $DialogResult_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      2_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmRightButton.Enabled = $True_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      3_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmMidButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmRightButton.Enabled = $True_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Sender.Tag.Finished = $True_x000D__x000A__x000D__x000A_    if ((($DialogResult -eq $ButtonDefault) -and $AutoClose.IsPresent) -or ($RichTextStatusButtons -eq 0))_x000D__x000A_    {_x000D__x000A_      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_      while ($StopWatch.Elapsed.TotalMilliseconds -le $AutoCloseWait)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(10)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A__x000D__x000A_      $Sender.DialogResult = $DialogResult_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$RichTextStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RichTextStatusFormShown ********_x000D__x000A_  $RichTextStatusForm.add_Shown({ Start-RichTextStatusFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for $RichTextStatus Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $RichTextStatus Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RichTextStatusForm.Controls.Add($RichTextStatusPanel)_x000D__x000A_  $RichTextStatusPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RichTextStatusPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $RichTextStatusPanel.Name = "RichTextStatusPanel"_x000D__x000A_  #endregion $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $RichTextStatusPanel Controls ********_x000D__x000A__x000D__x000A_  #region $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $RichTextStatusPanel.Controls.Add($RichTextStatusRichTextBox)_x000D__x000A_  $RichTextStatusRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $RichTextStatusRichTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $RichTextStatusRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RichTextStatusRichTextBox.DetectUrls = $True_x000D__x000A_  $RichTextStatusRichTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RichTextStatusRichTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $RichTextStatusRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $RichTextStatusRichTextBox.MaxLength = [Int]::MaxValue_x000D__x000A_  $RichTextStatusRichTextBox.Multiline = $True_x000D__x000A_  $RichTextStatusRichTextBox.Name = "RichTextStatusRichTextBox"_x000D__x000A_  $RichTextStatusRichTextBox.ReadOnly = $True_x000D__x000A_  $RichTextStatusRichTextBox.Rtf = ""_x000D__x000A_  $RichTextStatusRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both_x000D__x000A_  $RichTextStatusRichTextBox.Size = [System.Drawing.Size]::New(($RichTextStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($RichTextStatusPanel.ClientSize.Height - ($RichTextStatusRichTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $RichTextStatusRichTextBox.TabStop = $False_x000D__x000A_  $RichTextStatusRichTextBox.WordWrap = $False_x000D__x000A_  #endregion $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RichTextStatusRichTextBoxMouseDown ********_x000D__x000A_  Function Start-RichTextStatusRichTextBoxMouseDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      MouseDown Event for the RichTextStatus RichTextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      MouseDown Event for the RichTextStatus RichTextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The RichTextBox Control that fired the MouseDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the RichTextBox MouseDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-RichTextStatusRichTextBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.RichTextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$RichTextStatusRichTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $RichTextStatusRichTextBox.SelectionLength = 0_x000D__x000A_    $RichTextStatusRichTextBox.SelectionStart = $RichTextStatusRichTextBox.TextLength_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$RichTextStatusRichTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RichTextStatusRichTextBoxMouseDown ********_x000D__x000A_  $RichTextStatusRichTextBox.add_MouseDown({ Start-RichTextStatusRichTextBoxMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #endregion ******** $RichTextStatusPanel Controls ********_x000D__x000A__x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "Zero"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 0_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "One"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 1_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Two"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 2_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Three"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 3_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  if ($RichTextStatusButtons -gt 0)_x000D__x000A_  {_x000D__x000A_    # ************************************************_x000D__x000A_    # $RichTextStatusBtm Panel_x000D__x000A_    # ************************************************_x000D__x000A_    #region $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_    $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_    $RichTextStatusForm.Controls.Add($RichTextStatusBtmPanel)_x000D__x000A_    $RichTextStatusBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_    $RichTextStatusBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_    $RichTextStatusBtmPanel.Name = "RichTextStatusBtmPanel"_x000D__x000A_    #endregion $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_    #region ******** $RichTextStatusBtmPanel Controls ********_x000D__x000A__x000D__x000A_    $NumButtons = 3_x000D__x000A_    $TempSpace = [Math]::Floor($RichTextStatusBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_    $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_    $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_    #region $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    If (($RichTextStatusButtons -eq 2) -or ($RichTextStatusButtons -eq 3))_x000D__x000A_    {_x000D__x000A_      $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmLeftButton)_x000D__x000A_      $RichTextStatusBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_      $RichTextStatusBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_      $RichTextStatusBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_      $RichTextStatusBtmLeftButton.DialogResult = $ButtonLeft_x000D__x000A_      $RichTextStatusBtmLeftButton.Enabled = $False_x000D__x000A_      $RichTextStatusBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_      $RichTextStatusBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_      $RichTextStatusBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_      $RichTextStatusBtmLeftButton.Name = "RichTextStatusBtmLeftButton"_x000D__x000A_      $RichTextStatusBtmLeftButton.TabIndex = 0_x000D__x000A_      $RichTextStatusBtmLeftButton.TabStop = $True_x000D__x000A_      $RichTextStatusBtmLeftButton.Text = "&amp;$($ButtonLeft.ToString())"_x000D__x000A_      $RichTextStatusBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $RichTextStatusBtmLeftButton.PreferredSize.Height)_x000D__x000A_      if ($ButtonLeft -eq $ButtonDefault)_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Select()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #endregion $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_    #region $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    If (($RichTextStatusButtons -eq 1) -or ($RichTextStatusButtons -eq 3))_x000D__x000A_    {_x000D__x000A_      $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmMidButton)_x000D__x000A_      $RichTextStatusBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_      $RichTextStatusBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_      $RichTextStatusBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_      $RichTextStatusBtmMidButton.DialogResult = $ButtonMid_x000D__x000A_      $RichTextStatusBtmMidButton.Enabled = $False_x000D__x000A_      $RichTextStatusBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_      $RichTextStatusBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_      $RichTextStatusBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_      $RichTextStatusBtmMidButton.Name = "RichTextStatusBtmMidButton"_x000D__x000A_      $RichTextStatusBtmMidButton.TabStop = $True_x000D__x000A_      $RichTextStatusBtmMidButton.Text = "&amp;$($ButtonMid.ToString())"_x000D__x000A_      $RichTextStatusBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $RichTextStatusBtmMidButton.PreferredSize.Height)_x000D__x000A_      if ($ButtonMid -eq $ButtonDefault)_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmMidButton.Select()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #endregion $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_    #region $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    If (($RichTextStatusButtons -eq 2) -or ($RichTextStatusButtons -eq 3))_x000D__x000A_    {_x000D__x000A_      $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmRightButton)_x000D__x000A_      $RichTextStatusBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_      $RichTextStatusBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_      $RichTextStatusBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_      $RichTextStatusBtmRightButton.DialogResult = $ButtonRight_x000D__x000A_      $RichTextStatusBtmRightButton.Enabled = $False_x000D__x000A_      $RichTextStatusBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_      $RichTextStatusBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_      $RichTextStatusBtmRightButton.Location = [System.Drawing.Point]::New(($RichTextStatusBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_      $RichTextStatusBtmRightButton.Name = "RichTextStatusBtmRightButton"_x000D__x000A_      $RichTextStatusBtmRightButton.TabIndex = 1_x000D__x000A_      $RichTextStatusBtmRightButton.TabStop = $True_x000D__x000A_      $RichTextStatusBtmRightButton.Text = "&amp;$($ButtonRight.ToString())"_x000D__x000A_      $RichTextStatusBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $RichTextStatusBtmRightButton.PreferredSize.Height)_x000D__x000A_      if ($ButtonRight -eq $ButtonDefault)_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmRightButton.Select()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #endregion $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_    $RichTextStatusBtmPanel.ClientSize = [System.Drawing.Size]::New(($RichTextStatusTextBox.Right + [MyConfig]::FormSpacer), (($RichTextStatusBtmPanel.Controls[$RichTextStatusBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_    #endregion ******** $RichTextStatusBtmPanel Controls ********_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #endregion ******** Controls for $RichTextStatus Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** $Show-RichTextStatus **** End ********_x000D__x000A__x000D__x000A_  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")_x000D__x000A_  $DialogResult = $RichTextStatusForm.ShowDialog($PILForm)_x000D__x000A_  [RichTextStatus]::New(($DialogResult -eq $ButtonDefault), $DialogResult)_x000D__x000A__x000D__x000A_  $RichTextStatusForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-RichTextStatus"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Get-ModuleList</S>
            <Obj N="Value" RefId="246">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Get-ModuleList</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Get List of Instaled Modules_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Get List of Instaled Modules_x000D__x000A_    .PARAMETER Location_x000D__x000A_      Location of the Modules_x000D__x000A_    .PARAMETER Path_x000D__x000A_      Location to Search for Modules_x000D__x000A_    .PARAMETER Modules_x000D__x000A_      List to Add Modules to_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Modules = [System.Collections.Generic.List[Modules]]::New()_x000D__x000A_      Get-ModuleList -Modules ([Ref]$Modules) -Location "All Users" -Path "$($ENV:ProgramFiles)\WindowsPowerShell\Modules"_x000D__x000A_      Get-ModuleList -Modules ([Ref]$Modules) -Location "Current User" -Path "$([Environment]::GetFolderPath([System.Environment+SpecialFolder]::MyDocuments))\WindowsPowerShell\Modules"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [ValidateSet("All Users", "Current User")]_x000D__x000A_    [String]$Location = "All Users",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Path_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A_  _x000D__x000A_  # Get Installed Modules_x000D__x000A_  $TmpModList = Get-ChildItem -Path $Path_x000D__x000A_  ForEach ($TmpModItem In $TmpModList)_x000D__x000A_  {_x000D__x000A_    # get Module Versions_x000D__x000A_    $TmpVersions = @(Get-ChildItem -Path $TmpModItem.FullName | Where-Object -FilterScript { $PSItem.Name -match "\d+\.\d+\.\d+" } | Sort-Object -Property Name -Descending | Select-Object -First 1)_x000D__x000A_    If ($TmpVersions.Count -eq 0)_x000D__x000A_    {_x000D__x000A_      If (-not [MyRuntime]::Modules.ContainsKey($TmpModItem.Name))_x000D__x000A_      {_x000D__x000A_        # Custom Module_x000D__x000A_        [MyRuntime]::Modules.Add($TmpModItem.Name, [PILModule]::New($Location, $TmpModItem.Name, "0.0.0"))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      If (-not [MyRuntime]::Modules.ContainsKey($TmpModItem.Name))_x000D__x000A_      {_x000D__x000A_        # Installed Module_x000D__x000A_        ForEach ($TmpVersion In $TmpVersions)_x000D__x000A_        {_x000D__x000A_          [MyRuntime]::Modules.Add($TmpModItem.Name, [PILModule]::New($Location, $TmpModItem.Name, $TmpVersion.Name))_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-ListBoxOptionBtmRightButtonClick</S>
            <Obj N="Value" RefId="247">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-ListBoxOptionBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-MultiTextBoxInputBtmRightButtonClick</S>
            <Obj N="Value" RefId="248">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-MultiTextBoxInputBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILFormKeyDown</S>
            <Obj N="Value" RefId="249">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter KeyDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_  {_x000D__x000A_    Switch ($EventArg.KeyCode)_x000D__x000A_    {_x000D__x000A_      "F10"_x000D__x000A_      {_x000D__x000A_        If ($PILForm.Tag)_x000D__x000A_        {_x000D__x000A_          # Hide Console Window_x000D__x000A_          $Script:VerbosePreference = "SilentlyContinue"_x000D__x000A_          $Script:DebugPreference = "SilentlyContinue"_x000D__x000A_          [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_          [Void][Console.Window]::Hide()_x000D__x000A_          $PILForm.Tag = $False_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          # Show Console Window_x000D__x000A_          $Script:VerbosePreference = "Continue"_x000D__x000A_          $Script:DebugPreference = "Continue"_x000D__x000A_          [Void][Console.Window]::Show()_x000D__x000A_          [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_          $PILForm.Tag = $True_x000D__x000A_        }_x000D__x000A_        $PILForm.Activate()_x000D__x000A_        $PILForm.Select()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    Switch ($EventArg.KeyCode)_x000D__x000A_    {_x000D__x000A_      "F2"_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Show Change Log for $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_        $ScriptContents = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()_x000D__x000A_        $CLogStart = ($ScriptContents.IndexOf("&lt;#") + 2)_x000D__x000A_        $CLogEnd = $ScriptContents.IndexOf("#&gt;")_x000D__x000A_        Show-ChangeLog -ChangeText ($ScriptContents.SubString($CLogStart, ($CLogEnd - $CLogStart)))_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit KeyDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListListViewColumnClick</S>
            <Obj N="Value" RefId="250">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListListViewColumnClick</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      ColumnClick Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      ColumnClick Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the ColumnClick Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList ColumnClick Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewColumnClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter ColumnClick Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $Sender.ListViewItemSorter.Column = $EventArg.Column_x000D__x000A_  $Sender.ListViewItemSorter.Ascending = (-not $Sender.ListViewItemSorter.Ascending)_x000D__x000A_  $Sender.Sort()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit ColumnClick Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-PILItemListListViewDrawSubItem</S>
            <Obj N="Value" RefId="251">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-PILItemListListViewDrawSubItem</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      DrawSubItem Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      DrawSubItem Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the DrawSubItem Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList DrawSubItem Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewDrawSubItem -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter DrawSubItem Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  # Return to Default Draw_x000D__x000A_  $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit DrawSubItem Event for $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-TextBoxInputBtmRightButtonClick</S>
            <Obj N="Value" RefId="252">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-TextBoxInputBtmRightButtonClick</S>
                <S N="ScriptBlock">{_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A_    _x000D__x000A_    $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmRightButton"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-GetComboFilterComboBoxSelectedIndexChanged</S>
            <Obj N="Value" RefId="253">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-GetComboFilterComboBoxSelectedIndexChanged</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ComboBox Control that fired the SelectedIndexChanged Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ComboBox SelectedIndexChanged Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ComboBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ValidItems = @($Items)_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidItems = @($ValidItems | Where-Object -FilterScript { $PSItem.($FilterOptionName) -like $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidItemNames = @($ValidItems | Select-Object -ExpandProperty $FilterOptionName -Unique)_x000D__x000A_      If ($FilterOptionName -ne $Sender.Name)_x000D__x000A_      {_x000D__x000A_        $RemoveList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { ($PSItem.Text -notin $ValidItemNames) -and ($PSItem.Value -ne "*") })_x000D__x000A_        ForEach ($RemoveItem In $RemoveList)_x000D__x000A_        {_x000D__x000A_          $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.Remove($RemoveItem)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $HaveItemNames = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)_x000D__x000A_      $AddList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.Items | Where-Object -FilterScript { ($PSItem.Text -in $ValidItemNames) -and ($PSItem.Text -notin $HaveItemNames) })_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.AddRange($AddList)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Scale-MyForm</S>
            <Obj N="Value" RefId="254">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Scale-MyForm</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Scales a Windows Forms control and its child controls by a specified factor._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function recursively scales the size and font of a Windows Forms control (such as a Form, Panel, GroupBox, etc.) and all its child controls by the specified scale factor. _x000D__x000A_      It is useful for DPI scaling or dynamically resizing UI elements to accommodate different display settings or user preferences._x000D__x000A_      The function handles controls with child controls in the Controls collection, as well as controls with an Items collection (such as ListBox, ComboBox, etc.)._x000D__x000A_    .PARAMETER Control_x000D__x000A_      The Windows Forms control to scale. This can be a Form or any control derived from System.Windows.Forms.Control. _x000D__x000A_      If not specified, defaults to the global variable $FCGForm._x000D__x000A_    .PARAMETER Scale_x000D__x000A_      The scaling factor to apply to the control and its children. _x000D__x000A_      For example, a value of 1.25 increases size by 25%, while 0.8 reduces size by 20%. _x000D__x000A_      The default value is 1 (no scaling)._x000D__x000A_    .EXAMPLE_x000D__x000A_      Scale-MyForm -Control $Form -Scale 1.5_x000D__x000A_      Scales the specified form and all its child controls by 150%._x000D__x000A_    .EXAMPLE_x000D__x000A_      Scale-MyForm -Scale 0.9_x000D__x000A_      Scales the default form ($FCGForm) and all its child controls by 90%._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_      Recursively scales all controls, including those with an Items collection._x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [Object]$Control = $FCGForm,_x000D__x000A_    [Single]$Scale = 1_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  if ($Control -is [System.Windows.Forms.Form])_x000D__x000A_  {_x000D__x000A_    $Control.Scale($Scale)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $Control.Font = [System.Drawing.Font]::New($Control.Font.FontFamily, ($Control.Font.Size * $Scale), $Control.Font.Style)_x000D__x000A__x000D__x000A_  if ([String]::IsNullOrEmpty($Control.PSObject.Properties.Match("Items")))_x000D__x000A_  {_x000D__x000A_    if ($Control.Controls.Count)_x000D__x000A_    {_x000D__x000A_      foreach ($ChildControl in $Control.Controls)_x000D__x000A_      {_x000D__x000A_        Scale-MyForm -Control $ChildControl -Scale $Scale_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    foreach ($Item in $Control.Items)_x000D__x000A_    {_x000D__x000A_      Scale-MyForm -Control $Item -Scale $Scale_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Start-UserResponseFormKeyDown</S>
            <Obj N="Value" RefId="255">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Start-UserResponseFormKeyDown</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the UserResponse Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the UserResponse Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-UserResponseFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$UserResponseForm"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $UserResponseForm.Close()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$UserResponseForm"_x000D__x000A_  }</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Reset-MyRegKeyOwner</S>
            <Obj N="Value" RefId="256">
              <TNRef RefId="5" />
              <MS>
                <S N="Name">Reset-MyRegKeyOwner</S>
                <S N="ScriptBlock">{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Take Ownership of a Registry Key and Reset Access Rules._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function takes ownership of a specified registry key and optionally resets its access rules. It can operate recursively and supports changing ownership to either the Administrators or Users group._x000D__x000A_    .PARAMETER Hive_x000D__x000A_      Specifies the registry hive to operate on. Defaults to LocalMachine._x000D__x000A_    .PARAMETER Key_x000D__x000A_      The path of the registry key to take ownership of. This parameter is mandatory._x000D__x000A_    .PARAMETER User_x000D__x000A_      If specified, sets the owner to the Users group (S-1-5-32-545). Otherwise, sets to Administrators group (S-1-5-32-544)._x000D__x000A_    .PARAMETER ResetAccess_x000D__x000A_      If specified, resets the access rules for the registry key to grant full control to the new owner._x000D__x000A_    .PARAMETER Recurse_x000D__x000A_      If specified, applies ownership and access rule changes recursively to all subkeys._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp"_x000D__x000A_      Takes ownership of the "SOFTWARE\MyApp" registry key as Administrators._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp" -User_x000D__x000A_      Takes ownership of the "SOFTWARE\MyApp" registry key as Users._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp" -ResetAccess_x000D__x000A_      Takes ownership and resets access rules for the "SOFTWARE\MyApp" registry key._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp" -Recurse_x000D__x000A_      Takes ownership recursively for "SOFTWARE\MyApp" and all its subkeys._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [Microsoft.Win32.RegistryKey]$Hive = [Microsoft.Win32.Registry]::LocalMachine,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Key,_x000D__x000A_    [Switch]$User,_x000D__x000A_    [Switch]$ResetAccess,_x000D__x000A_    [Switch]$Recurse_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Reset-MyRegKeyOwner"_x000D__x000A__x000D__x000A_  if ($User.IsPresent)_x000D__x000A_  {_x000D__x000A_    $NewOwner = [System.Security.Principal.SecurityIdentifier]::New("S-1-5-32-545")_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $NewOwner = [System.Security.Principal.SecurityIdentifier]::New("S-1-5-32-544")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Key: $($Key)"_x000D__x000A_  $TempKey = $Hive.OpenSubKey($Key, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::TakeOwnership)_x000D__x000A_  $ACL = [System.Security.AccessControl.RegistrySecurity]::New()_x000D__x000A_  $ACL.SetOwner($NewOwner)_x000D__x000A_  $TempKey.SetAccessControl($ACL)_x000D__x000A_  $ACL.SetAccessRuleProtection($False, $False)_x000D__x000A_  $TempKey.SetAccessControl($ACL)_x000D__x000A__x000D__x000A_  if ($ResetAccess.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempKey = $TempKey.OpenSubKey("", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)_x000D__x000A_    $Rule = [System.Security.AccessControl.RegistryAccessRule]::New($NewOwner, [System.Security.AccessControl.RegistryRights]::FullControl, [System.Security.AccessControl.InheritanceFlags]::ContainerInherit, [System.Security.AccessControl.PropagationFlags]::None, [System.Security.AccessControl.AccessControlType]::Allow)_x000D__x000A_    $ACL.ResetAccessRule($Rule)_x000D__x000A_    $TempKey.SetAccessControl($ACL)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($Recurse.IsPresent)_x000D__x000A_  {_x000D__x000A_    [Void]$PSBoundParameters.Remove("Key")_x000D__x000A_    [Void]$PSBoundParameters.Remove("ResetAccess")_x000D__x000A_    $TempKey = $TempKey.OpenSubKey("")_x000D__x000A_    foreach ($SubKey in @($TempKey.GetSubKeyNames()))_x000D__x000A_    {_x000D__x000A_      Reset-MyRegKeyOwner @PSBoundParameters -Key "$($Key)\$($SubKey)"_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Reset-MyRegKeyOwner"_x000D__x000A_}</S>
              </MS>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="Variables" RefId="257">
        <TNRef RefId="4" />
        <DCT>
          <En>
            <S N="Key">Varable02</S>
            <Obj N="Value" RefId="258">
              <TN RefId="6">
                <T>Selected.PILVariable</T>
                <T>System.Management.Automation.PSCustomObject</T>
                <T>System.Object</T>
              </TN>
              <MS>
                <S N="Name">Varable02</S>
                <S N="Value">Value02</S>
              </MS>
            </Obj>
          </En>
          <En>
            <S N="Key">Varable01</S>
            <Obj N="Value" RefId="259">
              <TNRef RefId="6" />
              <MS>
                <S N="Name">Varable01</S>
                <S N="Value">Value01</S>
              </MS>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <U16 N="ThreadCount">2</U16>
      <S N="ThreadScript"># ----------------------------------------------------------------------------------------------------------------------_x000D__x000A_#  Script: PIL_x000D__x000A_# ----------------------------------------------------------------------------------------------------------------------_x000D__x000A_&lt;#_x000D__x000A_Change Log for PIL_x000D__x000A_------------------------------------------------------------------------------------------------_x000D__x000A_1.0.0.0 - Initial Version_x000D__x000A_------------------------------------------------------------------------------------------------_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_#requires -version 5.0_x000D__x000A__x000D__x000A_Using namespace System.Windows.Forms_x000D__x000A_Using namespace System.Drawing_x000D__x000A_Using namespace System.Collections_x000D__x000A_Using namespace System.Collections.Generic_x000D__x000A_Using namespace System.Collections.Specialized_x000D__x000A__x000D__x000A_&lt;#_x000D__x000A_  .SYNOPSIS_x000D__x000A_  .DESCRIPTION_x000D__x000A_  .PARAMETER &lt;Parameter-Name&gt;_x000D__x000A_  .EXAMPLE_x000D__x000A_  .NOTES_x000D__x000A_    My Script PIL Version 1.0 by kensw on 08/27/2025_x000D__x000A_    Created with "Form Code Generator" Version 7.0.0.2_x000D__x000A_#&gt;_x000D__x000A_[CmdletBinding()]_x000D__x000A_Param (_x000D__x000A_  [ValidateRange(2, 24)]_x000D__x000A_  [uint16]$MaxColumns = 16,_x000D__x000A_  [String]$ConfigFile = ""_x000D__x000A_)_x000D__x000A_Import-Module PowerShellGet_x000D__x000A__x000D__x000A__x000D__x000A_$ErrorActionPreference = "Stop"_x000D__x000A__x000D__x000A_# Set $VerbosePreference to 'SilentlyContinue' for Production Deployment_x000D__x000A_$VerbosePreference = "SilentlyContinue"_x000D__x000A_#$VerbosePreference = "Continue"_x000D__x000A__x000D__x000A_# Set $DebugPreference for Production Deployment_x000D__x000A_$DebugPreference = "SilentlyContinue"_x000D__x000A__x000D__x000A_# Hide Console Window Progress Bar_x000D__x000A_$ProgressPreference = "SilentlyContinue"_x000D__x000A__x000D__x000A_# Clear Previous Error Messages_x000D__x000A_$Error.Clear()_x000D__x000A__x000D__x000A_# Pre-Load Required Assemblies_x000D__x000A_[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")_x000D__x000A_[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")_x000D__x000A__x000D__x000A_# Enable Visual Styles_x000D__x000A_[System.Windows.Forms.Application]::EnableVisualStyles()_x000D__x000A__x000D__x000A_#region ******** PIL Configuration ********_x000D__x000A__x000D__x000A_#region ******** PIL Default Colors ********_x000D__x000A__x000D__x000A_Class Colors_x000D__x000A_{_x000D__x000A_  [Object]$Back_x000D__x000A_  [Object]$Fore_x000D__x000A_  [Object]$LabelFore_x000D__x000A_  [Object]$ErrorFore_x000D__x000A_  [Object]$TitleBack_x000D__x000A_  [Object]$TitleFore_x000D__x000A_  [Object]$GroupFore_x000D__x000A_  [Object]$TextBack_x000D__x000A_  [Object]$TextROBack_x000D__x000A_  [Object]$TextFore_x000D__x000A_  [Object]$TextTitle_x000D__x000A_  [Object]$TextHint_x000D__x000A_  [Object]$TextBad_x000D__x000A_  [Object]$TextWarn_x000D__x000A_  [Object]$TextGood_x000D__x000A_  [Object]$TextInfo_x000D__x000A_  [Object]$ButtonBack_x000D__x000A_  [Object]$ButtonFore_x000D__x000A_  _x000D__x000A_  Colors ([Object]$Back, [Object]$Fore, [Object]$LabelFore, [Object]$ErrorFore, [Object]$TitleBack, [Object]$TitleFore, [Object]$GroupFore, [Object]$TextBack, [Object]$TextROBack, [Object]$TextFore, [Object]$TextTitle, [Object]$TextHint, [Object]$TextBad, [Object]$TextWarn, [Object]$TextGood, [Object]$TextInfo, [Object]$ButtonBack, [Object]$ButtonFore)_x000D__x000A_  {_x000D__x000A_    $This.Back = $Back_x000D__x000A_    $This.Fore = $Fore_x000D__x000A_    $This.LabelFore = $LabelFore_x000D__x000A_    $This.ErrorFore = $ErrorFore_x000D__x000A_    $This.TitleBack = $TitleBack_x000D__x000A_    $This.TitleFore = $TitleFore_x000D__x000A_    $This.GroupFore = $GroupFore_x000D__x000A_    $This.TextBack = $TextBack_x000D__x000A_    $This.TextROBack = $TextROBack_x000D__x000A_    $This.TextFore = $TextFore_x000D__x000A_    $This.TextTitle = $TextTitle_x000D__x000A_    $This.TextHint = $TextHint_x000D__x000A_    $This.TextBad = $TextBad_x000D__x000A_    $This.TextWarn = $TextWarn_x000D__x000A_    $This.TextGood = $TextGood_x000D__x000A_    $This.TextInfo = $TextInfo_x000D__x000A_    $This.ButtonBack = $ButtonBack_x000D__x000A_    $This.ButtonFore = $ButtonFore_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_#endregion ******** PIL Default Colors ********_x000D__x000A__x000D__x000A_#region ******** PIL Default Font ********_x000D__x000A__x000D__x000A_Class Font_x000D__x000A_{_x000D__x000A_  [Object]$Regular_x000D__x000A_  [Object]$Hint_x000D__x000A_  [Object]$Bold_x000D__x000A_  [Object]$Title_x000D__x000A_  [Single]$Ratio_x000D__x000A_  [Single]$Width_x000D__x000A_  [Single]$Height_x000D__x000A_  _x000D__x000A_  Font ([Object]$Regular, [Object]$Hint, [Object]$Bold, [Object]$Title, [Single]$Ratio, [Single]$Width, [Single]$Height)_x000D__x000A_  {_x000D__x000A_    $This.Regular = $Regular_x000D__x000A_    $This.Hint = $Hint_x000D__x000A_    $This.Bold = $Bold_x000D__x000A_    $This.Title = $Title_x000D__x000A_    $This.Ratio = $Ratio_x000D__x000A_    $This.Width = $Width_x000D__x000A_    $This.Height = $Height_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_#endregion ******** PIL Default Font ********_x000D__x000A__x000D__x000A_#region ******** PIL MyConfig ********_x000D__x000A__x000D__x000A_Class MyConfig_x000D__x000A_{_x000D__x000A_  # Default Form Run Mode_x000D__x000A_  static [bool]$Production = $False_x000D__x000A__x000D__x000A_  static [String]$ScriptName = "Process-ItemList"_x000D__x000A_  static [Version]$ScriptVersion = [Version]::New("1.0.0.0")_x000D__x000A_  static [String]$ScriptAuthor = "Ken Sweet"_x000D__x000A__x000D__x000A_  # Script Configuration_x000D__x000A_  static [String]$ScriptRoot = ""_x000D__x000A_  static [String]$ConfigFile = ""_x000D__x000A_  static [PSCustomObject]$ConfigData = [PSCustomObject]@{ }_x000D__x000A__x000D__x000A_  # Script Runtime Values_x000D__x000A_  static [Bool]$Is64Bit = ([IntPtr]::Size -eq 8)_x000D__x000A__x000D__x000A_  # Default Form Settings_x000D__x000A_  static [Int]$FormSpacer = 4_x000D__x000A_  static [int]$FormMinWidth = 80_x000D__x000A_  static [int]$FormMinHeight = 35_x000D__x000A__x000D__x000A_  # Default Font_x000D__x000A_  static [String]$FontFamily = "Verdana"_x000D__x000A_  static [Single]$FontSize = 10_x000D__x000A_  static [Single]$FontTitle = 1.5_x000D__x000A__x000D__x000A_  Static [OrderedDictionary]$RequiredModules = [Ordered]@{_x000D__x000A_    "Az.Accounts" = "4.0.2"_x000D__x000A_    "Az.KeyVault" = "6.3.1"_x000D__x000A_    "Az.Automation" = "1.11.1"_x000D__x000A_    "Microsoft.Graph.Authentication" = "2.28.0"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Azure Logon Information_x000D__x000A_  static [String]$TenantID = ""_x000D__x000A_  static [String]$SubscriptionID = ""_x000D__x000A_  static [Object]$AADLogonInfo = $Null_x000D__x000A_  static [Object]$AccessToken = $Null_x000D__x000A_  static [HashTable]$AuthToken = @{ }_x000D__x000A__x000D__x000A_  # Default Form Color Mode_x000D__x000A_  static [Bool]$DarkMode = ((Get-Itemproperty -Path "Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -ErrorAction "SilentlyContinue").AppsUseLightTheme -eq "0")_x000D__x000A__x000D__x000A_  # Form Auto Exit_x000D__x000A_  static [Int]$AutoExit = 0_x000D__x000A_  static [Int]$AutoExitMax = 60_x000D__x000A_  static [Int]$AutoExitTic = 60000_x000D__x000A__x000D__x000A_  # Administrative Rights_x000D__x000A_  static [Bool]$IsLocalAdmin = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)_x000D__x000A_  static [Bool]$IsPowerUser = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::PowerUser)_x000D__x000A__x000D__x000A_  # KPI Event Logging_x000D__x000A_  static [Bool]$KPILogExists = $False_x000D__x000A_  static [String]$KPILogName = "KPI Event Log"_x000D__x000A__x000D__x000A_  # Network / Internet_x000D__x000A_  static [__ComObject]$IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}"))_x000D__x000A__x000D__x000A_  # Default Script Credentials_x000D__x000A_  static [String]$Domain = "Domain"_x000D__x000A_  static [String]$UserID = "UserID"_x000D__x000A_  static [String]$Password = "P@ssw0rd"_x000D__x000A__x000D__x000A_  # Default SMTP Configuration_x000D__x000A_  static [String]$SMTPServer = "smtp.mydomain.local"_x000D__x000A_  static [int]$SMTPPort = 25_x000D__x000A__x000D__x000A_  # Default MEMCM Configuration_x000D__x000A_  static [String]$MEMCMServer = "MyMEMCM.MyDomain.Local"_x000D__x000A_  static [String]$MEMCMSite = "XYZ"_x000D__x000A_  static [String]$MEMCMNamespace = "Root\SMS\Site_x005F_XYZ"_x000D__x000A__x000D__x000A_  # Help / Issues Uri's_x000D__x000A_  static [String]$HelpURL = "https://www.microsoft.com/"_x000D__x000A_  static [String]$BugURL = "https://www.amazon.com/"_x000D__x000A__x000D__x000A_  # CertKet for Cert Encryption_x000D__x000A_  static [String]$CertKey = ""_x000D__x000A__x000D__x000A_  # Web Browser File Path's_x000D__x000A_  static [String]$EdgePath = (Get-Itemproperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe" -ErrorAction "SilentlyContinue")."(default)"_x000D__x000A_  static [String]$ChromePath = (Get-Itemproperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe" -ErrorAction "SilentlyContinue")."(default)"_x000D__x000A__x000D__x000A_  # Current DateTime Offset_x000D__x000A_  static [DateTimeOffset]$DateTimeOffset = [System.DateTimeOffset]::Now_x000D__x000A__x000D__x000A_  static [Colors]$Colors_x000D__x000A__x000D__x000A_  static [Font]$Font_x000D__x000A_}_x000D__x000A__x000D__x000A_#endregion ******** PIL MyConfig ********_x000D__x000A__x000D__x000A_# Get Script Path_x000D__x000A_if ([String]::IsNullOrEmpty($HostInvocation))_x000D__x000A_{_x000D__x000A_  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName($Script:MyInvocation.MyCommand.Path)_x000D__x000A_}_x000D__x000A_else_x000D__x000A_{_x000D__x000A_  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName($HostInvocation.MyCommand.Path)_x000D__x000A_}_x000D__x000A__x000D__x000A_#region ******** PIL Default Colors ********_x000D__x000A__x000D__x000A_If ([MyConfig]::DarkMode)_x000D__x000A_{_x000D__x000A_  [MyConfig]::Colors = [Colors]::New(_x000D__x000A_    [System.Drawing.Color]::FromArgb(48, 48, 48), # Back_x000D__x000A_    [System.Drawing.Color]::DodgerBlue, # Fore [System.Drawing.Color]::LightCoral_x000D__x000A_    [System.Drawing.Color]::WhiteSmoke, # LabelForr_x000D__x000A_    [System.Drawing.Color]::Red, # ErrorFoer_x000D__x000A_    [System.Drawing.Color]::DarkGray, # TitleFore_x000D__x000A_    [System.Drawing.Color]::Black, # TitleBack_x000D__x000A_    [System.Drawing.Color]::WhiteSmoke, # GroupFore_x000D__x000A_    [System.Drawing.Color]::Gainsboro, # TextBack_x000D__x000A_    [System.Drawing.Color]::DarkGray, # TextROBack_x000D__x000A_    [System.Drawing.Color]::Black, #TextFore_x000D__x000A_    [System.Drawing.Color]::Navy, # TextTitle_x000D__x000A_    [System.Drawing.Color]::Gray, # TextHint_x000D__x000A_    [System.Drawing.Color]::FireBrick, # TextBad_x000D__x000A_    [System.Drawing.Color]::Sienna, # TextWarn_x000D__x000A_    [System.Drawing.Color]::ForestGreen, # TextGood_x000D__x000A_    [System.Drawing.Color]::CornflowerBlue, # TextInfo_x000D__x000A_    [System.Drawing.Color]::DarkGray, # ButtonBack_x000D__x000A_    [System.Drawing.Color]::Black # ButtonFore_x000D__x000A_  )_x000D__x000A_}_x000D__x000A_Else_x000D__x000A_{_x000D__x000A_  [MyConfig]::Colors = [Colors]::New(_x000D__x000A_    [System.Drawing.Color]::WhiteSmoke, # Back_x000D__x000A_    [System.Drawing.Color]::Navy, # Fore_x000D__x000A_    [System.Drawing.Color]::Black, # LabelFor_x000D__x000A_    [System.Drawing.Color]::Red, # ErrorFoer_x000D__x000A_    [System.Drawing.Color]::LightBlue, # TitleFore_x000D__x000A_    [System.Drawing.Color]::Navy, # TitleBack_x000D__x000A_    [System.Drawing.Color]::Navy, # GroupFore_x000D__x000A_    [System.Drawing.Color]::White, # TextBack_x000D__x000A_    [System.Drawing.Color]::Gainsboro, # TextROBack_x000D__x000A_    [System.Drawing.Color]::Black, # TextFore_x000D__x000A_    [System.Drawing.Color]::Navy, # TextTitle_x000D__x000A_    [System.Drawing.Color]::Gray, # TextHint_x000D__x000A_    [System.Drawing.Color]::FireBrick, #TextBad_x000D__x000A_    [System.Drawing.Color]::Sienna, # TextWarn_x000D__x000A_    [System.Drawing.Color]::ForestGreen, # TextGood_x000D__x000A_    [System.Drawing.Color]::CornflowerBlue, # TextInfo_x000D__x000A_    [System.Drawing.Color]::Gainsboro, # ButtonBack_x000D__x000A_    [System.Drawing.Color]::Navy) # ButtonFore_x000D__x000A_}_x000D__x000A__x000D__x000A_#region Default Colors_x000D__x000A_&lt;#_x000D__x000A_[MyConfig]::Colors = [Colors]::New(_x000D__x000A_  [System.Drawing.SystemColors]::Control, # Back_x000D__x000A_  [System.Drawing.SystemColors]::ControlText, # Fore_x000D__x000A_  [System.Drawing.SystemColors]::ControlText, # LabelFore_x000D__x000A_  [System.Drawing.SystemColors]::ControlText, # ErrorFore_x000D__x000A_  [System.Drawing.SystemColors]::ControlText, # TitleFore_x000D__x000A_  [System.Drawing.SystemColors]::Control, # TitleBack_x000D__x000A_  [System.Drawing.SystemColors]::ControlText, # GroupFore_x000D__x000A_  [System.Drawing.SystemColors]::Window, # #TextBack_x000D__x000A_  [System.Drawing.SystemColors]::Window, # TextROBack_x000D__x000A_  [System.Drawing.SystemColors]::WindowText, # TextFore_x000D__x000A_  [System.Drawing.SystemColors]::WindowText, # TextTitle_x000D__x000A_  [System.Drawing.SystemColors]::GrayText, # TextHint_x000D__x000A_  [System.Drawing.SystemColors]::WindowText, # TextBad_x000D__x000A_  [System.Drawing.SystemColors]::WindowText, # TextWarn_x000D__x000A_  [System.Drawing.SystemColors]::WindowText, # TextGood_x000D__x000A_  [System.Drawing.SystemColors]::WindowText, # TextInfo_x000D__x000A_  [System.Drawing.SystemColors]::Control, # ButtonBack_x000D__x000A_  [System.Drawing.SystemColors]::ControlText # ButtonFore_x000D__x000A_)_x000D__x000A_#&gt;_x000D__x000A_#endregion Default Colors_x000D__x000A__x000D__x000A_#endregion ******** PIL Default Colors ********_x000D__x000A__x000D__x000A_#region ******** PIL Default Font ********_x000D__x000A__x000D__x000A_$MonitorSize = [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize_x000D__x000A_:FontCheck Do_x000D__x000A_{_x000D__x000A_  $Bold = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)_x000D__x000A_  $Graphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)_x000D__x000A_  $MeasureString = $Graphics.MeasureString("X", $Bold)_x000D__x000A_  If (($MonitorSize.Width -le ([MyConfig]::FormMinWidth * [Math]::Floor($MeasureString.Width))) -or ($MonitorSize.Height -le ([MyConfig]::FormMinHeight * [Math]::Floor($MeasureString.Height))))_x000D__x000A_  {_x000D__x000A_    [MyConfig]::FontSize = [MyConfig]::FontSize - .1_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    break FontCheck_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_While ($True)_x000D__x000A_$Regular = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)_x000D__x000A_$Hint = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Italic)_x000D__x000A_$Title = [System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Bold)_x000D__x000A_[MyConfig]::Font = [Font]::New($Regular, $Hint, $Bold, $Title, ($Graphics.DpiX / 96), ([Math]::Floor($MeasureString.Width)), ([Math]::Ceiling($MeasureString.Height)))_x000D__x000A_$MonitorSize = $Null_x000D__x000A_$Regular = $Null_x000D__x000A_$Hint = $Null_x000D__x000A_$Bold = $Null_x000D__x000A_$Title = $Null_x000D__x000A_$MeasureString = $Null_x000D__x000A_$Graphics.Dispose()_x000D__x000A_$Graphics = $Null_x000D__x000A__x000D__x000A_#endregion ******** PIL Default Font ********_x000D__x000A__x000D__x000A_#endregion ******** PIL Configuration  ********_x000D__x000A__x000D__x000A_#region ******** PIL Custom Config Classes ********_x000D__x000A__x000D__x000A_#region Class PILModule_x000D__x000A_Class PILModule_x000D__x000A_{_x000D__x000A_  [String]$Location_x000D__x000A_  [String]$Name_x000D__x000A_  [Version]$Version_x000D__x000A_  _x000D__x000A_  PILModule ([String]$Location, [String]$Name, [String]$Version)_x000D__x000A_  {_x000D__x000A_    $This.Location = $Location_x000D__x000A_    $This.Name = $Name_x000D__x000A_    $This.Version = [System.Version]::New($Version)_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion Class PILModule_x000D__x000A__x000D__x000A_#region Class PILFunction_x000D__x000A_Class PILFunction_x000D__x000A_{_x000D__x000A_  [String]$Name_x000D__x000A_  [String]$ScriptBlock_x000D__x000A_  _x000D__x000A_  PILFunction ([String]$Name, [String]$ScriptBlock)_x000D__x000A_  {_x000D__x000A_    $This.Name = $Name_x000D__x000A_    $This.ScriptBlock = $ScriptBlock_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion Class PILFunction_x000D__x000A__x000D__x000A_#region Class PILVariable_x000D__x000A_Class PILVariable_x000D__x000A_{_x000D__x000A_  [String]$Name_x000D__x000A_  [String]$Value_x000D__x000A_  PILVariable ([String]$Name, [String]$Value)_x000D__x000A_  {_x000D__x000A_    $This.Name = $Name_x000D__x000A_    $This.Value = $Value_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion Class PILVariable_x000D__x000A__x000D__x000A_#region Class PILThreadConfig_x000D__x000A_Class PILThreadConfig_x000D__x000A_{_x000D__x000A_  [String[]]$ColumnNames_x000D__x000A_  [OrderedDictionary]$Modules = [OrderedDictionary]::New()_x000D__x000A_  [HashTable]$Functions = [HashTable]::New()_x000D__x000A_  [HashTable]$Variables = [HashTable]::New()_x000D__x000A_  [uint16]$ThreadCount = 8_x000D__x000A_  [String]$ThreadScript = $Null_x000D__x000A_  _x000D__x000A_  PILThreadConfig ([uint16]$MaxColumns)_x000D__x000A_  {_x000D__x000A_    $This.ColumnNames = [String[]]::New($MaxColumns)_x000D__x000A_    For ($I = 0; $I -lt $MaxColumns; $I++)_x000D__x000A_    {_x000D__x000A_      $This.ColumnNames[$I] = ("Column Name {0:00}" -f $I)_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] SetColumnNames ([String[]]$ColumnNames)_x000D__x000A_  {_x000D__x000A_    $Max = $ColumnNames.Count_x000D__x000A_    For ($I = 0; $I -lt $Max; $I++)_x000D__x000A_    {_x000D__x000A_      $This.ColumnNames[$I] = $ColumnNames[$I]_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [OrderedDictionary] GetColumnNames ()_x000D__x000A_  {_x000D__x000A_    $TmpValue = [Ordered]@{ }_x000D__x000A_    _x000D__x000A_    $Max = $This.ColumnNames.GetUpperBound(0)_x000D__x000A_    For ($I = 0; $I -le $Max; $I++)_x000D__x000A_    {_x000D__x000A_      $TmpValue.Add(("Column Name {0:00}" -f $I), $This.ColumnNames[$I])_x000D__x000A_    }_x000D__x000A_    Return $TmpValue_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  [Void] UpdateThreadInfo ([uint16]$ThreadCount, [String]$ThreadScript)_x000D__x000A_  {_x000D__x000A_    $This.ThreadCount = $ThreadCount_x000D__x000A_    $This.ThreadScript = $ThreadScript_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion Class PILThreadConfig_x000D__x000A__x000D__x000A_#endregion ******** PIL Custom Config Classes ********_x000D__x000A__x000D__x000A_#region ******** PIL Runtime Values ********_x000D__x000A__x000D__x000A_Class MyRuntime_x000D__x000A_{_x000D__x000A_  # Max Number of Columns_x000D__x000A_  Static [Uint16]$MaxColumns = $MaxColumns_x000D__x000A_  _x000D__x000A_  # Thread Configuration_x000D__x000A_  Static [PILThreadConfig]$ThreadConfig = [PILThreadConfig]::New($MaxColumns)_x000D__x000A_  _x000D__x000A_  # Path to Module Install Locatiosn_x000D__x000A_  Static [String]$AUModules = "$($ENV:ProgramFiles)\WindowsPowerShell\Modules"_x000D__x000A_  Static [String]$CUModules = "$([Environment]::GetFolderPath([System.Environment+SpecialFolder]::MyDocuments))\WindowsPowerShell\Modules"_x000D__x000A_  _x000D__x000A_  # List of Installed Modules_x000D__x000A_  Static [HashTable]$Modules = [HashTable]::New()_x000D__x000A_  _x000D__x000A_  # Loaded Functions_x000D__x000A_  Static [HashTable]$Functions = [HashTable]::New()_x000D__x000A_  _x000D__x000A_  Static [Void] UpdateTotalColumn ([Uint16]$MaxColumns)_x000D__x000A_  {_x000D__x000A_    [MyRuntime]::MaxColumns = $MaxColumns_x000D__x000A_    [MyRuntime]::ThreadConfig = [PILThreadConfig]::New($MaxColumns)_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_#endregion ******** PIL Runtime  Values ********_x000D__x000A__x000D__x000A_#region ******** My Default Enumerations ********_x000D__x000A__x000D__x000A_#region ******** enum MyAnswer ********_x000D__x000A_[Flags()]_x000D__x000A_enum MyAnswer_x000D__x000A_{_x000D__x000A_  Unknown = 0_x000D__x000A_  No      = 1_x000D__x000A_  Yes     = 2_x000D__x000A_  Maybe   = 3_x000D__x000A_}_x000D__x000A_#endregion ******** enum MyAnswer ********_x000D__x000A__x000D__x000A_#region ******** enum MyDigit ********_x000D__x000A_enum MyDigit_x000D__x000A_{_x000D__x000A_  Zero_x000D__x000A_  One_x000D__x000A_  Two_x000D__x000A_  Three_x000D__x000A_  Four_x000D__x000A_  Five_x000D__x000A_  Six_x000D__x000A_  Seven_x000D__x000A_  Eight_x000D__x000A_  Nine_x000D__x000A_}_x000D__x000A_#endregion ******** enum MyDigit ********_x000D__x000A__x000D__x000A_#region ******** enum MyBits ********_x000D__x000A_[Flags()]_x000D__x000A_enum MyBits_x000D__x000A_{_x000D__x000A_  Bit01 = 0x00000001_x000D__x000A_  Bit02 = 0x00000002_x000D__x000A_  Bit03 = 0x00000004_x000D__x000A_  Bit04 = 0x00000008_x000D__x000A_  Bit05 = 0x00000010_x000D__x000A_  Bit06 = 0x00000020_x000D__x000A_  Bit07 = 0x00000040_x000D__x000A_  Bit08 = 0x00000080_x000D__x000A_  Bit09 = 0x00000100_x000D__x000A_  Bit10 = 0x00000200_x000D__x000A_  Bit11 = 0x00000400_x000D__x000A_  Bit12 = 0x00000800_x000D__x000A_  Bit13 = 0x00001000_x000D__x000A_  Bit14 = 0x00002000_x000D__x000A_  Bit15 = 0x00004000_x000D__x000A_  Bit16 = 0x00008000_x000D__x000A_}_x000D__x000A_#endregion ******** enum MyBits ********_x000D__x000A__x000D__x000A_#region ******** enum PILColumns ********_x000D__x000A_Enum PILColumns_x000D__x000A_{_x000D__x000A_  Column00 = 0_x000D__x000A_  Column01 = 1_x000D__x000A_  Column02 = 2_x000D__x000A_  Column03 = 3_x000D__x000A_  Column04 = 4_x000D__x000A_  Column05 = 5_x000D__x000A_  Column06 = 6_x000D__x000A_  Column07 = 7_x000D__x000A_  Column08 = 8_x000D__x000A_  Column09 = 9_x000D__x000A_  Column10 = 10_x000D__x000A_  Column11 = 11_x000D__x000A_  Column12 = 12_x000D__x000A_  Column13 = 13_x000D__x000A_  Column14 = 14_x000D__x000A_  Column15 = 15_x000D__x000A_  Column16 = 16_x000D__x000A_  Column17 = 17_x000D__x000A_  Column18 = 18_x000D__x000A_  Column19 = 19_x000D__x000A_  Column20 = 20_x000D__x000A_  Column21 = 21_x000D__x000A_  Column22 = 22_x000D__x000A_  Column23 = 23_x000D__x000A_}_x000D__x000A_#endregion ******** enum PILColumns ********_x000D__x000A__x000D__x000A_#endregion ******** My Default Enumerations ********_x000D__x000A__x000D__x000A_#region ******** My Custom Class ********_x000D__x000A__x000D__x000A_#region ******** MyListItem Class ********_x000D__x000A_Class MyListItem_x000D__x000A_{_x000D__x000A_  [String]$Text_x000D__x000A_  [Object]$Value_x000D__x000A_  [Object]$Tag_x000D__x000A_  [MyBits]$Flags_x000D__x000A__x000D__x000A_  MyListItem ([String]$Text, [Object]$Value)_x000D__x000A_  {_x000D__x000A_    $This.Text = $Text_x000D__x000A_    $This.Value = $Value_x000D__x000A_  }_x000D__x000A__x000D__x000A_  MyListItem ([String]$Text, [Object]$Value, [MyBits]$Flags)_x000D__x000A_  {_x000D__x000A_    $This.Text = $Text_x000D__x000A_    $This.Value = $Value_x000D__x000A_    $This.Flags = $Flags_x000D__x000A_  }_x000D__x000A__x000D__x000A_  MyListItem ([String]$Text, [Object]$Value, [Object]$Tag)_x000D__x000A_  {_x000D__x000A_    $This.Text = $Text_x000D__x000A_    $This.Value = $Value_x000D__x000A_    $This.Tag = $Tag_x000D__x000A_  }_x000D__x000A__x000D__x000A_  MyListItem ([String]$Text, [Object]$Value, [Object]$Tag, [MyBits]$Flags)_x000D__x000A_  {_x000D__x000A_    $This.Text = $Text_x000D__x000A_    $This.Value = $Value_x000D__x000A_    $This.Tag = $Tag_x000D__x000A_    $This.Flags = $Flags_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ******** MyListItem Class ********_x000D__x000A__x000D__x000A_#endregion ******** My Custom Class ********_x000D__x000A__x000D__x000A_#region ******** Windows APIs ********_x000D__x000A__x000D__x000A_#region ******** [Console.Window] ********_x000D__x000A__x000D__x000A_#[Void][Console.Window]::Hide()_x000D__x000A_#[Void][Console.Window]::Show()_x000D__x000A__x000D__x000A_$MyCode = @"_x000D__x000A_using System;_x000D__x000A_using System.Runtime.InteropServices;_x000D__x000A__x000D__x000A_namespace Console_x000D__x000A_{_x000D__x000A_  public class Window_x000D__x000A_  {_x000D__x000A_    [DllImport("Kernel32.dll")]_x000D__x000A_    private static extern IntPtr GetConsoleWindow();_x000D__x000A__x000D__x000A_    [DllImport("user32.dll")]_x000D__x000A_    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);_x000D__x000A__x000D__x000A_    public static bool Hide()_x000D__x000A_    {_x000D__x000A_      return ShowWindowAsync(GetConsoleWindow(), 0);_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public static bool Show()_x000D__x000A_    {_x000D__x000A_      return ShowWindowAsync(GetConsoleWindow(), 5);_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_"@_x000D__x000A_Add-Type -TypeDefinition $MyCode -Debug:$False_x000D__x000A_#endregion ******** [Console.Window] ********_x000D__x000A__x000D__x000A_[System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_if ([MyConfig]::Production)_x000D__x000A_{_x000D__x000A_  [Void][Console.Window]::Hide()_x000D__x000A_}_x000D__x000A__x000D__x000A_#endregion ******** Windows APIs ********_x000D__x000A__x000D__x000A_#region ******** Functions Library ********_x000D__x000A__x000D__x000A_#region Function Prompt_x000D__x000A_Function Prompt_x000D__x000A_{_x000D__x000A_  [Console]::Title = $PWD_x000D__x000A_  "PS$($PSVersionTable.PSVersion.Major)$("&gt;" * ($NestedPromptLevel + 1)) "_x000D__x000A_}_x000D__x000A_#endregion Function Prompt_x000D__x000A__x000D__x000A_#region ******** Sample Functions ********_x000D__x000A__x000D__x000A_#region function Verb-Noun_x000D__x000A_Function Verb-Noun ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER Value_x000D__x000A_      Value Command Line Parameter_x000D__x000A_    .EXAMPLE_x000D__x000A_      Verb-Noun -Value "String"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By %YourName%_x000D__x000A_      _x000D__x000A_      %Date% - Initial Release_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "ByValue")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ByValue")]_x000D__x000A_    [String[]]$Value = "Default Value"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A_  _x000D__x000A_  # Loop and Proccess all Values_x000D__x000A_  ForEach ($Item In $Value)_x000D__x000A_  {_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Verb-Noun_x000D__x000A__x000D__x000A_#region function Verb-NounPiped_x000D__x000A_Function Verb-NounPiped()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER Value_x000D__x000A_      Value Command Line Parameter_x000D__x000A_    .EXAMPLE_x000D__x000A_      Verb-NounPiped -Value "String"_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Value | Verb-NounPiped_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By %YourName%_x000D__x000A_      _x000D__x000A_      %Date% - Initial Release_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "ByValue")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, ParameterSetName = "ByValue")]_x000D__x000A_    [String[]]$Value = "Default Value"_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand) Begin Block"_x000D__x000A_    # This Code is Executed Once when the Function Begins_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand) Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand) Process Block"_x000D__x000A_    _x000D__x000A_    # Loop and Proccess all Values_x000D__x000A_    ForEach ($Item In $Value)_x000D__x000A_    {_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand) Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand) End Block"_x000D__x000A_    # This Code is Executed Once whent he Function Ends_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand) End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Verb-NounPiped_x000D__x000A__x000D__x000A_#endregion ******** Sample Functions ********_x000D__x000A__x000D__x000A_#region ******* Microsoft Forms Functions ********_x000D__x000A__x000D__x000A_#region function New-MyListItem_x000D__x000A_function New-MyListItem_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new list item to a ComboBox or ListBox control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new list item as a PSCustomObject with Text, Value, and Tag properties,_x000D__x000A_      and adds it to the Items collection of the specified ComboBox or ListBox control._x000D__x000A_      Optionally, the new item can be returned via the PassThru switch._x000D__x000A_    .PARAMETER Control_x000D__x000A_      The ComboBox or ListBox control to which the new item will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new list item. This parameter is mandatory._x000D__x000A_    .PARAMETER Value_x000D__x000A_      The value associated with the new list item. This parameter is mandatory._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An optional object to associate additional data with the new list item._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, the function returns the newly created list item object instead of $null._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MyListItem -Control $comboBox -Text "Option 1" -Value "1" -Tag "First Option"_x000D__x000A_      Adds a new item with text "Option 1", value "1", and tag "First Option" to the $comboBox control._x000D__x000A_    .EXAMPLE_x000D__x000A_      $item = New-MyListItem -Control $listBox -Text "Item A" -Value "A" -PassThru_x000D__x000A_      Adds a new item to $listBox and returns the created item object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [Parameter(Mandatory = $true)]_x000D__x000A_    [Object]$Control,_x000D__x000A_    [Parameter(Mandatory = $true)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [Parameter(Mandatory = $true)]_x000D__x000A_    [String]$Value,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $item = [PSCustomObject]@{_x000D__x000A_    Text  = $Text_x000D__x000A_    Value = $Value_x000D__x000A_    Tag   = $Tag_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PassThru)_x000D__x000A_  {_x000D__x000A_    $Control.Items.Add($item)_x000D__x000A_    $item_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Control.Items.Add($item)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-MyListItem_x000D__x000A__x000D__x000A_#region function New-TreeNode_x000D__x000A_function New-TreeNode_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new TreeNode to a TreeView or another TreeNode._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.TreeNode with the specified properties and adds it to the provided parent TreeNode or TreeView. _x000D__x000A_      It supports customization of text, name, tag, font, colors, images, tooltip, checked state, and expansion. _x000D__x000A_      The node can be inserted at the top or as a child node, and optionally returned via PassThru._x000D__x000A_    .PARAMETER TreeNode_x000D__x000A_      The parent TreeNode or TreeView to which the new node will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new TreeNode. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new TreeNode. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new TreeNode._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the TreeNode text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the TreeNode. Defaults to [MyConfig]::Colors.TextBack._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the TreeNode. Defaults to [MyConfig]::Colors.TextFore._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the TreeNode. Used when specifying images by index._x000D__x000A_    .PARAMETER SelectedImageIndex_x000D__x000A_      The index of the image to display when the TreeNode is selected. Used with ImageIndex parameter set._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the TreeNode. Used when specifying images by key._x000D__x000A_    .PARAMETER SelectedImageKey_x000D__x000A_      The key of the image to display when the TreeNode is selected. Used with ImageKey parameter set._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the TreeNode._x000D__x000A_    .PARAMETER AtTop_x000D__x000A_      If specified, inserts the new TreeNode at the top of the parent node's collection._x000D__x000A_    .PARAMETER Checked_x000D__x000A_      If specified, sets the TreeNode's Checked property to $true._x000D__x000A_    .PARAMETER Expand_x000D__x000A_      If specified, expands the new TreeNode after adding it._x000D__x000A_    .PARAMETER AddChild_x000D__x000A_      If specified, adds a dummy child node to the new TreeNode (useful for lazy loading)._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created TreeNode object._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-TreeNode -TreeNode $TreeNode -Text "Node1" -Tag "Data"_x000D__x000A_      Adds a new TreeNode with text "Node1" and tag "Data" to $TreeNode._x000D__x000A_    .EXAMPLE_x000D__x000A_      $node = New-TreeNode -TreeNode $TreeNode -Text "Node2" -Checked -Expand -PassThru_x000D__x000A_      Adds a checked and expanded node, and returns the created TreeNode object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Index")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$TreeNode,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Index")]_x000D__x000A_    [Int]$ImageIndex = -1,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Index")]_x000D__x000A_    [Int]$SelectedImageIndex = -1,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Key")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Key")]_x000D__x000A_    [String]$SelectedImageKey,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [switch]$AtTop,_x000D__x000A_    [switch]$Checked,_x000D__x000A_    [switch]$Expand,_x000D__x000A_    [switch]$AddChild,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempTreeNode = [System.Windows.Forms.TreeNode]_x000D__x000A_  if ($AddChild.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode = [System.Windows.Forms.TreeNode]::New($Text, [System.Windows.Forms.TreeNode]::New("*"))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempTreeNode = [System.Windows.Forms.TreeNode]::New($Text)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($AtTop.IsPresent)_x000D__x000A_  {_x000D__x000A_    [Void]$TreeNode.Nodes.Insert(0, $TempTreeNode)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$TreeNode.Nodes.Add($TempTreeNode)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($Checked.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Checked = $Checked.IsPresent_x000D__x000A_  }_x000D__x000A_  $TempTreeNode.Tag = $Tag_x000D__x000A_  $TempTreeNode.ToolTipText = $ToolTip_x000D__x000A__x000D__x000A_  $TempTreeNode.BackColor = $BackColor_x000D__x000A_  $TempTreeNode.ForeColor = $ForeColor_x000D__x000A_  $TempTreeNode.NodeFont = $Font_x000D__x000A__x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "Index"_x000D__x000A_    {_x000D__x000A_      $TempTreeNode.ImageIndex = $ImageIndex_x000D__x000A_      if ($PSBoundParameters.ContainsKey("SelectedImageIndex"))_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageIndex = $SelectedImageIndex_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageIndex = $ImageIndex_x000D__x000A_      }_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Key"_x000D__x000A_    {_x000D__x000A_      $TempTreeNode.ImageKey = $ImageKey_x000D__x000A_      if ($PSBoundParameters.ContainsKey("SelectedImageKey"))_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageKey = $SelectedImageKey_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TempTreeNode.SelectedImageKey = $ImageKey_x000D__x000A_      }_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $TempTreeNode = [System.Windows.Forms.TreeNode]_x000D__x000A__x000D__x000A_  if ($Expand.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode.Expand()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTreeNode_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempTreeNode = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-TreeNode_x000D__x000A__x000D__x000A_#region function New-MenuItem_x000D__x000A_function New-MenuItem()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuItem to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripMenuItem with the specified properties and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of text, name, tooltip, icon, image index/key, text-image relation, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors._x000D__x000A_      The new MenuItem can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuItem will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new MenuItem. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new MenuItem. If not specified, the Text value is used._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the MenuItem._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      The icon to display for the MenuItem. Used when specifying images by icon. Mandatory for the 'Icon' parameter set._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the MenuItem. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the MenuItem. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set._x000D__x000A_    .PARAMETER TextImageRelation_x000D__x000A_      Specifies the position of the text and image relative to each other. Defaults to 'ImageBeforeText'._x000D__x000A_    .PARAMETER DisplayStyle_x000D__x000A_      Specifies how the MenuItem displays its image and text. Defaults to 'Text'._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      Specifies the alignment of the MenuItem's text and image. Defaults to 'MiddleCenter'._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new MenuItem._x000D__x000A_    .PARAMETER Disable_x000D__x000A_      If specified, disables the MenuItem (sets Enabled to $false)._x000D__x000A_    .PARAMETER Check_x000D__x000A_      If specified, sets the MenuItem's Checked property to $true._x000D__x000A_    .PARAMETER ClickOnCheck_x000D__x000A_      If specified, enables the CheckOnClick property for the MenuItem._x000D__x000A_    .PARAMETER ShortcutKeys_x000D__x000A_      Specifies the shortcut keys for the MenuItem. Defaults to 'None'._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the MenuItem text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuItem. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the MenuItem. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created MenuItem object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-MenuItem -Menu $menuStrip -Text "Open" -Tag "OpenFile"_x000D__x000A_      Adds a new MenuItem with text "Open" and tag "OpenFile" to $menuStrip._x000D__x000A_    .EXAMPLE_x000D__x000A_      $item = New-MenuItem -Menu $contextMenu -Text "Save" -ImageIndex 2 -PassThru_x000D__x000A_      Adds a new MenuItem with an image at index 2 and returns the created MenuItem object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Icon")]_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]_x000D__x000A_    [Int]$ImageIndex,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [System.Windows.Forms.TextImageRelation]$TextImageRelation = "ImageBeforeText",_x000D__x000A_    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",_x000D__x000A_    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Switch]$Disable,_x000D__x000A_    [Switch]$Check,_x000D__x000A_    [Switch]$ClickOnCheck,_x000D__x000A_    [System.Windows.Forms.Keys]$ShortcutKeys = "None",_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]_x000D__x000A_  $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New($Text)_x000D__x000A__x000D__x000A_  if ($Menu.GetType().Name -eq "ToolStripMenuItem")_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.DropDownItems.Add($TempMenuItem)_x000D__x000A_    if ($Menu.DropDown.Items.Count -eq 1)_x000D__x000A_    {_x000D__x000A_      $Menu.DropDown.BackColor = $Menu.BackColor_x000D__x000A_      $Menu.DropDown.ForeColor = $Menu.ForeColor_x000D__x000A_      $Menu.DropDown.ImageList = $Menu.Owner.ImageList_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.Items.Add($TempMenuItem)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempMenuItem.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempMenuItem.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuItem.ShortcutKeys = $ShortcutKeys_x000D__x000A_  $TempMenuItem.Tag = $Tag_x000D__x000A_  $TempMenuItem.ToolTipText = $ToolTip_x000D__x000A_  $TempMenuItem.TextAlign = $Alignment_x000D__x000A_  $TempMenuItem.Checked = $Check.IsPresent_x000D__x000A_  $TempMenuItem.CheckOnClick = $ClickOnCheck.IsPresent_x000D__x000A_  $TempMenuItem.DisplayStyle = $DisplayStyle_x000D__x000A_  $TempMenuItem.Enabled = (-not $Disable.IsPresent)_x000D__x000A__x000D__x000A_  $TempMenuItem.BackColor = $BackColor_x000D__x000A_  $TempMenuItem.ForeColor = $ForeColor_x000D__x000A_  $TempMenuItem.Font = $Font_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "Default")_x000D__x000A_  {_x000D__x000A_    $TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "Icon"_x000D__x000A_      {_x000D__x000A_        $TempMenuItem.Image = $Icon_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageIndex"_x000D__x000A_      {_x000D__x000A_        $TempMenuItem.ImageIndex = $ImageIndex_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageKey"_x000D__x000A_      {_x000D__x000A_        $TempMenuItem.ImageKey = $ImageKey_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $TempMenuItem.ImageAlign = $Alignment_x000D__x000A_    $TempMenuItem.TextImageRelation = $TextImageRelation_x000D__x000A_  }_x000D__x000A_  #endregion $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempMenuItem_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuItem = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-MenuItem_x000D__x000A__x000D__x000A_#region function New-MenuButton_x000D__x000A_function New-MenuButton()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuButton (ToolStripButton) to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripButton with the specified properties and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of text, name, tooltip, icon, image index/key, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors._x000D__x000A_      The new MenuButton can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuButton will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new MenuButton. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new MenuButton. If not specified, the Text value is used._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the MenuButton._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      The icon to display for the MenuButton. Used when specifying images by icon. Mandatory for the 'Icon' parameter set._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the MenuButton. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the MenuButton. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set._x000D__x000A_    .PARAMETER DisplayStyle_x000D__x000A_      Specifies how the MenuButton displays its image and text. Defaults to 'Text'._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      Specifies the alignment of the MenuButton's text and image. Defaults to 'MiddleCenter'._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new MenuButton._x000D__x000A_    .PARAMETER Disable_x000D__x000A_      If specified, disables the MenuButton (sets Enabled to $false)._x000D__x000A_    .PARAMETER Check_x000D__x000A_      If specified, sets the MenuButton's Checked property to $true._x000D__x000A_    .PARAMETER ClickOnCheck_x000D__x000A_      If specified, enables the CheckOnClick property for the MenuButton._x000D__x000A_    .PARAMETER ShortcutKeys_x000D__x000A_      Specifies the shortcut keys for the MenuButton. Defaults to 'None'._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the MenuButton text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuButton. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the MenuButton. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created MenuButton object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-MenuButton -Menu $toolStrip -Text "Run" -Tag "RunAction"_x000D__x000A_      Adds a new MenuButton with text "Run" and tag "RunAction" to $toolStrip._x000D__x000A_    .EXAMPLE_x000D__x000A_      $button = New-MenuButton -Menu $toolStrip -Text "Save" -ImageIndex 1 -PassThru_x000D__x000A_      Adds a new MenuButton with an image at index 1 and returns the created MenuButton object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [String]$Text,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Name,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Icon")]_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]_x000D__x000A_    [Int]$ImageIndex,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [System.Windows.Forms.TextImageRelation]$TextImageRelation = "ImageBeforeText",_x000D__x000A_    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",_x000D__x000A_    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Switch]$Disable,_x000D__x000A_    [Switch]$Check,_x000D__x000A_    [Switch]$ClickOnCheck,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempMenuButton = [System.Windows.Forms.ToolStripButton]_x000D__x000A_  $TempMenuButton = [System.Windows.Forms.ToolStripButton]::New($Text)_x000D__x000A__x000D__x000A_  [Void]$Menu.Items.Add($TempMenuButton)_x000D__x000A_  _x000D__x000A_  $TempMenuButton.AutoSize = $False_x000D__x000A_  $TempMenuButton.Name = $Name_x000D__x000A_  $TempMenuButton.Tag = $Tag_x000D__x000A_  $TempMenuButton.ToolTipText = $ToolTip_x000D__x000A_  $TempMenuButton.TextAlign = $Alignment_x000D__x000A_  $TempMenuButton.Checked = $Check.IsPresent_x000D__x000A_  $TempMenuButton.CheckOnClick = $ClickOnCheck.IsPresent_x000D__x000A_  $TempMenuButton.DisplayStyle = $DisplayStyle_x000D__x000A_  $TempMenuButton.TextImageRelation = $TextImageRelation_x000D__x000A_  $TempMenuButton.Size = $Menu.ImageScalingSize_x000D__x000A_  $TempMenuButton.Enabled = (-not $Disable.IsPresent)_x000D__x000A__x000D__x000A_  $TempMenuButton.BackColor = $BackColor_x000D__x000A_  $TempMenuButton.ForeColor = $ForeColor_x000D__x000A_  $TempMenuButton.Font = $Font_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -ne "Default")_x000D__x000A_  {_x000D__x000A_    switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "Icon"_x000D__x000A_      {_x000D__x000A_        $TempMenuButton.Image = $Icon_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageIndex"_x000D__x000A_      {_x000D__x000A_        $TempMenuButton.ImageIndex = $ImageIndex_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_      "ImageKey"_x000D__x000A_      {_x000D__x000A_        $TempMenuButton.ImageKey = $ImageKey_x000D__x000A_        break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $TempMenuButton.ImageAlign = $Alignment_x000D__x000A_  }_x000D__x000A_  #endregion $TempMenuButton = [System.Windows.Forms.ToolStripButton]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempMenuButton_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuButton = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-MenuButton_x000D__x000A__x000D__x000A_#region function New-MenuLabel_x000D__x000A_function New-MenuLabel()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuLabel (ToolStripLabel) to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripLabel with the specified properties and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of text, name, tooltip, icon, display style, alignment, tag, enabled/disabled state, font, and colors._x000D__x000A_      The new MenuLabel can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuLabel will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new MenuLabel. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new MenuLabel. If not specified, the Text value is used.  _x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the MenuLabel._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      The icon to display for the MenuLabel. If specified, the label will show the icon._x000D__x000A_    .PARAMETER DisplayStyle_x000D__x000A_      Specifies how the MenuLabel displays its image and text. Defaults to 'Text'._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      Specifies the alignment of the MenuLabel's text and image. Defaults to 'MiddleLeft'._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new MenuLabel._x000D__x000A_    .PARAMETER Disable_x000D__x000A_      If specified, disables the MenuLabel (sets Enabled to $false)._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the MenuLabel text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuLabel. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the MenuLabel. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created MenuLabel object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-MenuLabel -Menu $menuStrip -Text "Info" -Tag "Information"_x000D__x000A_      Adds a new MenuLabel with text "Info" and tag "Information" to $menuStrip._x000D__x000A_    .EXAMPLE_x000D__x000A_      $label = New-MenuLabel -Menu $contextMenu -Text "Help" -Icon $icon -PassThru_x000D__x000A_      Adds a new MenuLabel with an icon and returns the created MenuLabel object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",_x000D__x000A_    [System.Drawing.ContentAlignment]$Alignment = "MiddleLeft",_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Switch]$Disable,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]_x000D__x000A_  $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New($Text)_x000D__x000A__x000D__x000A_  if ($Menu.GetType().Name -eq "ToolStripMenuItem")_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.DropDownItems.Add($TempMenuLabel)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.Items.Add($TempMenuLabel)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuLabel.TextAlign = $Alignment_x000D__x000A_  $TempMenuLabel.Tag = $Tag_x000D__x000A_  $TempMenuLabel.ToolTipText = $ToolTip_x000D__x000A_  $TempMenuLabel.DisplayStyle = $DisplayStyle_x000D__x000A_  $TempMenuLabel.Enabled = (-not $Disable.IsPresent)_x000D__x000A__x000D__x000A_  $TempMenuLabel.BackColor = $BackColor_x000D__x000A_  $TempMenuLabel.ForeColor = $ForeColor_x000D__x000A_  $TempMenuLabel.Font = $Font_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Icon"))_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.Image = $Icon_x000D__x000A_    $TempMenuLabel.ImageAlign = $Alignment_x000D__x000A_    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage_x000D__x000A_  }_x000D__x000A_  #endregion $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]_x000D__x000A__x000D__x000A_  if ($PassThru)_x000D__x000A_  {_x000D__x000A_    $TempMenuLabel_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempMenuLabel = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-MenuLabel_x000D__x000A__x000D__x000A_#region function New-MenuSeparator_x000D__x000A_function New-MenuSeparator()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new MenuSeparator (ToolStripSeparator) to a Menu or ToolStrip control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ToolStripSeparator and adds it to the provided Menu or ToolStrip control._x000D__x000A_      It supports customization of background and foreground colors._x000D__x000A_      The separator is useful for visually grouping related menu items._x000D__x000A_    .PARAMETER Menu_x000D__x000A_      The Menu or ToolStrip control to which the new MenuSeparator will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the MenuSeparator. Defaults to [MyConfig]::Colors.Back._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (line) color of the MenuSeparator. Defaults to [MyConfig]::Colors.Fore._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MenuSeparator -Menu $Menu_x000D__x000A_      Adds a new separator to the specified $Menu control._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MenuSeparator -Menu $contextMenu -BackColor ([System.Drawing.Color]::LightGray) -ForeColor ([System.Drawing.Color]::DarkGray)_x000D__x000A_      Adds a new separator to $contextMenu with custom colors._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$Menu,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempSeparator = [System.Windows.Forms.ToolStripSeparator]_x000D__x000A_  $TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()_x000D__x000A__x000D__x000A_  if ($Menu.GetType().Name -eq "ToolStripMenuItem")_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.DropDownItems.Add($TempSeparator)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$Menu.Items.Add($TempSeparator)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempSeparator.Name = "TempSeparator"_x000D__x000A__x000D__x000A_  $TempSeparator.BackColor = $BackColor_x000D__x000A_  $TempSeparator.ForeColor = $ForeColor_x000D__x000A_  #endregion $TempSeparator = [System.Windows.Forms.ToolStripSeparator]_x000D__x000A__x000D__x000A_  $TempSeparator = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-MenuSeparator_x000D__x000A__x000D__x000A_#region function New-ListViewItem_x000D__x000A_function New-ListViewItem()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new ListViewItem to a ListView control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ListViewItem with the specified properties and adds it to the provided ListView control._x000D__x000A_      It supports customization of text, name, subitems, tag, indentation, group, tooltip, checked state, font, colors, and image (by index or key)._x000D__x000A_      The new ListViewItem can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER ListView_x000D__x000A_      The ListView control to which the new ListViewItem will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the ListViewItem. Defaults to [MyConfig]::Colors.TextBack._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the ListViewItem. Defaults to [MyConfig]::Colors.TextFore._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the ListViewItem text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new ListViewItem. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new ListViewItem. This parameter is mandatory._x000D__x000A_    .PARAMETER SubItems_x000D__x000A_      An array of strings to add as subitems to the ListViewItem._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new ListViewItem._x000D__x000A_    .PARAMETER IndentCount_x000D__x000A_      The number of indentation levels to apply to the ListViewItem. Only used with ImageIndex or ImageKey parameter sets._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the ListViewItem. Used when specifying images by index._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the ListViewItem. Used when specifying images by key._x000D__x000A_    .PARAMETER Group_x000D__x000A_      The ListViewGroup to which the new ListViewItem will be added._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the ListViewItem._x000D__x000A_    .PARAMETER Checked_x000D__x000A_      If specified, sets the ListViewItem's Checked property to $true._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created ListViewItem object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-ListViewItem -ListView $listView -Text "Text" -Tag "Tag"_x000D__x000A_      Adds a new ListViewItem with text "Text" and tag "Tag" to $listView._x000D__x000A_    .EXAMPLE_x000D__x000A_      $item = New-ListViewItem -ListView $listView -Text "Item1" -ImageIndex 2 -SubItems @("Sub1","Sub2") -PassThru_x000D__x000A_      Adds a new ListViewItem with an image at index 2 and subitems, and returns the created ListViewItem object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$ListView,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [String]$Name,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String[]]$SubItems,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Index")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Key")]_x000D__x000A_    [Int]$IndentCount = 0,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Index")]_x000D__x000A_    [Int]$ImageIndex = -1,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Key")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [System.Windows.Forms.ListViewGroup]$Group,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [Switch]$Checked,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempListViewItem = [System.Windows.Forms.ListViewItem]_x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "Default")_x000D__x000A_  {_x000D__x000A_    $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $Group)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "Index")_x000D__x000A_    {_x000D__x000A_      $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $ImageIndex, $Group)_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $ImageKey, $Group)_x000D__x000A_    }_x000D__x000A_    $TempListViewItem.IndentCount = $IndentCount_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempListViewItem.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempListViewItem.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempListViewItem.Tag = $Tag_x000D__x000A_  $TempListViewItem.ToolTipText = $ToolTip_x000D__x000A_  $TempListViewItem.Checked = $Checked.IsPresent_x000D__x000A__x000D__x000A_  $TempListViewItem.BackColor = $BackColor_x000D__x000A_  $TempListViewItem.ForeColor = $ForeColor_x000D__x000A_  $TempListViewItem.Font = $Font_x000D__x000A_  if ($PSBoundParameters.ContainsKey("SubItems"))_x000D__x000A_  {_x000D__x000A_    $TempListViewItem.SubItems.AddRange($SubItems)_x000D__x000A_  }_x000D__x000A_  #endregion $TempListViewItem = [System.Windows.Forms.ListViewItem]_x000D__x000A__x000D__x000A_  [Void]$ListView.Items.Add($TempListViewItem)_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempListViewItem_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempListViewItem = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-ListViewItem_x000D__x000A__x000D__x000A_#region function New-ColumnHeader_x000D__x000A_function New-ColumnHeader()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new ColumnHeader to a ListView control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ColumnHeader with the specified properties and adds it to the provided ListView control._x000D__x000A_      It supports customization of the header text, name, tag, and width. The new ColumnHeader can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER ListView_x000D__x000A_      The ListView control to which the new ColumnHeader will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new ColumnHeader. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new ColumnHeader. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new ColumnHeader._x000D__x000A_    .PARAMETER Width_x000D__x000A_      The width of the new ColumnHeader in pixels. Defaults to -2 (auto size)._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created ColumnHeader object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-ColumnHeader -ListView $listView -Text "Name" -Tag "UserName"_x000D__x000A_      Adds a new ColumnHeader with text "Name" and tag "UserName" to $listView._x000D__x000A_    .EXAMPLE_x000D__x000A_      $col = New-ColumnHeader -ListView $listView -Text "Date" -Width 120 -PassThru_x000D__x000A_      Adds a new ColumnHeader with text "Date" and width 120 pixels, and returns the created ColumnHeader object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$ListView,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [Int]$Width = -2,_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempColumnHeader = [System.Windows.Forms.ColumnHeader]_x000D__x000A_  $TempColumnHeader = [System.Windows.Forms.ColumnHeader]::New()_x000D__x000A_  [Void]$ListView.Columns.Add($TempColumnHeader)_x000D__x000A_  $TempColumnHeader.Tag = $Tag_x000D__x000A_  $TempColumnHeader.Text = $Text_x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempColumnHeader.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempColumnHeader.Name = $Text_x000D__x000A_  }_x000D__x000A_  $TempColumnHeader.Width = $Width_x000D__x000A_  #endregion $TempColumnHeader = [System.Windows.Forms.ColumnHeader]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempColumnHeader_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempColumnHeader = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-ColumnHeader_x000D__x000A__x000D__x000A_#region function New-ListViewGroup_x000D__x000A_function New-ListViewGroup()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new ListViewGroup to a ListView control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.ListViewGroup with the specified properties and adds it to the provided ListView control._x000D__x000A_      It supports customization of the group header, name, tag, and alignment. The new ListViewGroup can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER ListView_x000D__x000A_      The ListView control to which the new ListViewGroup will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER Header_x000D__x000A_      The display header text for the new ListViewGroup. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new ListViewGroup. If not specified, the Header value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new ListViewGroup._x000D__x000A_    .PARAMETER Alignment_x000D__x000A_      The alignment of the group header text. Defaults to 'Left'._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created ListViewGroup object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = New-ListViewGroup -ListView $listView -Header "Header" -Tag "Tag"_x000D__x000A_      Adds a new ListViewGroup with header "Header" and tag "Tag" to $listView._x000D__x000A_    .EXAMPLE_x000D__x000A_      $group = New-ListViewGroup -ListView $listView -Header "Group1" -Name "GroupOne" -Alignment Center -PassThru_x000D__x000A_      Adds a new ListViewGroup with header "Group1", name "GroupOne", centered alignment, and returns the created group object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$ListView,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Header,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [System.Windows.Forms.HorizontalAlignment]$Alignment = "Left",_x000D__x000A_    [switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempListViewGroup = [System.Windows.Forms.ListViewGroup]_x000D__x000A_  $TempListViewGroup = [System.Windows.Forms.ListViewGroup]::New()_x000D__x000A_  [Void]$ListView.Groups.Add($TempListViewGroup)_x000D__x000A_  $TempListViewGroup.Tag = $Tag_x000D__x000A_  $TempListViewGroup.Header = $Header_x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempListViewGroup.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempListViewGroup.Name = $Header_x000D__x000A_  }_x000D__x000A_  $TempListViewGroup.HeaderAlignment = $Alignment_x000D__x000A_  #endregion $TempListViewGroup = [System.Windows.Forms.ListViewGroup]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempListViewGroup_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempListViewGroup = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-ListViewGroup_x000D__x000A__x000D__x000A_#region function New-TabPage_x000D__x000A_function New-TabPage()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates and adds a new TabPage to a TabControl control._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a new System.Windows.Forms.TabPage with the specified properties and adds it to the provided TabControl control._x000D__x000A_      It supports customization of text, name, tag, tooltip, font, colors, image (by index or key), and enabled/disabled state._x000D__x000A_      The new TabPage can optionally be returned via the PassThru switch._x000D__x000A_    .PARAMETER TabControl_x000D__x000A_      The TabControl control to which the new TabPage will be added. This parameter is mandatory._x000D__x000A_    .PARAMETER BackColor_x000D__x000A_      The background color of the TabPage. Defaults to [MyConfig]::Colors.TextBack._x000D__x000A_    .PARAMETER ForeColor_x000D__x000A_      The foreground (text) color of the TabPage. Defaults to [MyConfig]::Colors.TextFore._x000D__x000A_    .PARAMETER Font_x000D__x000A_      The font to use for the TabPage text. Defaults to [MyConfig]::Font.Regular._x000D__x000A_    .PARAMETER Text_x000D__x000A_      The display text for the new TabPage. This parameter is mandatory._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the new TabPage. If not specified, the Text value is used._x000D__x000A_    .PARAMETER Tag_x000D__x000A_      An object to associate additional data with the new TabPage._x000D__x000A_    .PARAMETER ImageIndex_x000D__x000A_      The index of the image to display for the TabPage. Used when specifying images by index._x000D__x000A_    .PARAMETER ImageKey_x000D__x000A_      The key of the image to display for the TabPage. Used when specifying images by key._x000D__x000A_    .PARAMETER ToolTip_x000D__x000A_      The tooltip text to display when the mouse hovers over the TabPage._x000D__x000A_    .PARAMETER Disabled_x000D__x000A_      If specified, disables the TabPage (sets Enabled to $false)._x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      If specified, returns the newly created TabPage object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $TabPage = New-TabPage -TabControl $tabControl -Text "General" -Tag "GeneralSettings" -PassThru_x000D__x000A_      Adds a new TabPage with text "General" and tag "GeneralSettings" to $tabControl and returns the created TabPage object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param(_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.TabControl]$TabControl,_x000D__x000A_    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,_x000D__x000A_    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [String]$Name,_x000D__x000A_    [Object]$Tag,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]_x000D__x000A_    [Int]$ImageIndex,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]_x000D__x000A_    [String]$ImageKey,_x000D__x000A_    [String]$ToolTip,_x000D__x000A_    [Switch]$Disabled,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  #region $TempTabPage = [System.Windows.Forms.TabPage]_x000D__x000A_  $TempTabPage = [System.Windows.Forms.TabPage]::New($Text)_x000D__x000A_  $TabControl.Controls.Add($TempTabPage)_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Name"))_x000D__x000A_  {_x000D__x000A_    $TempTabPage.Name = $Name_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempTabPage.Name = $Text_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempTabPage.Tag = $Tag_x000D__x000A_  $TempTabPage.ToolTipText = $ToolTip_x000D__x000A_  $TempTabPage.Enabled = (-not $Disabled.IsPresent)_x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "ImageIndex"_x000D__x000A_    {_x000D__x000A_      $TempTabPage.ImageIndex = $ImageIndex_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "ImageKey"_x000D__x000A_    {_x000D__x000A_      $TempTabPage.ImageKey = $ImageKey_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $TempTabPage.BackColor = $BackColor_x000D__x000A_  $TempTabPage.ForeColor = $ForeColor_x000D__x000A_  $TempTabPage.Font = $Font_x000D__x000A_  #endregion $TempTabPage = [System.Windows.Forms.TabPage]_x000D__x000A__x000D__x000A_  if ($PassThru.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempTabPage_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempTabPage = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function New-TabPage_x000D__x000A__x000D__x000A_#region function Scale-MyForm_x000D__x000A_function Scale-MyForm()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Scales a Windows Forms control and its child controls by a specified factor._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function recursively scales the size and font of a Windows Forms control (such as a Form, Panel, GroupBox, etc.) and all its child controls by the specified scale factor. _x000D__x000A_      It is useful for DPI scaling or dynamically resizing UI elements to accommodate different display settings or user preferences._x000D__x000A_      The function handles controls with child controls in the Controls collection, as well as controls with an Items collection (such as ListBox, ComboBox, etc.)._x000D__x000A_    .PARAMETER Control_x000D__x000A_      The Windows Forms control to scale. This can be a Form or any control derived from System.Windows.Forms.Control. _x000D__x000A_      If not specified, defaults to the global variable $FCGForm._x000D__x000A_    .PARAMETER Scale_x000D__x000A_      The scaling factor to apply to the control and its children. _x000D__x000A_      For example, a value of 1.25 increases size by 25%, while 0.8 reduces size by 20%. _x000D__x000A_      The default value is 1 (no scaling)._x000D__x000A_    .EXAMPLE_x000D__x000A_      Scale-MyForm -Control $Form -Scale 1.5_x000D__x000A_      Scales the specified form and all its child controls by 150%._x000D__x000A_    .EXAMPLE_x000D__x000A_      Scale-MyForm -Scale 0.9_x000D__x000A_      Scales the default form ($FCGForm) and all its child controls by 90%._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_      Recursively scales all controls, including those with an Items collection._x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [Object]$Control = $FCGForm,_x000D__x000A_    [Single]$Scale = 1_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  if ($Control -is [System.Windows.Forms.Form])_x000D__x000A_  {_x000D__x000A_    $Control.Scale($Scale)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $Control.Font = [System.Drawing.Font]::New($Control.Font.FontFamily, ($Control.Font.Size * $Scale), $Control.Font.Style)_x000D__x000A__x000D__x000A_  if ([String]::IsNullOrEmpty($Control.PSObject.Properties.Match("Items")))_x000D__x000A_  {_x000D__x000A_    if ($Control.Controls.Count)_x000D__x000A_    {_x000D__x000A_      foreach ($ChildControl in $Control.Controls)_x000D__x000A_      {_x000D__x000A_        Scale-MyForm -Control $ChildControl -Scale $Scale_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    foreach ($Item in $Control.Items)_x000D__x000A_    {_x000D__x000A_      Scale-MyForm -Control $Item -Scale $Scale_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Scale-MyForm_x000D__x000A__x000D__x000A_#region Custom ListView Sort_x000D__x000A__x000D__x000A_$MyCode = @"_x000D__x000A_using System;_x000D__x000A_using System.Windows.Forms;_x000D__x000A_using System.Collections;_x000D__x000A__x000D__x000A_namespace MyCustom_x000D__x000A_{_x000D__x000A_  public class ListViewSort : IComparer_x000D__x000A_  {_x000D__x000A_    private int _Column = 0;_x000D__x000A_    private bool _Ascending = true;_x000D__x000A_    private bool _Enable = true;_x000D__x000A__x000D__x000A_    public ListViewSort()_x000D__x000A_    {_x000D__x000A_      _Column = 0;_x000D__x000A_      _Ascending = true;_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public ListViewSort(int Column)_x000D__x000A_    {_x000D__x000A_      _Column = Column;_x000D__x000A_      _Ascending = true;_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public ListViewSort(int Column, bool Order)_x000D__x000A_    {_x000D__x000A_      _Column = Column;_x000D__x000A_      _Ascending = Order;_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public int Column_x000D__x000A_    {_x000D__x000A_      get { return _Column; }_x000D__x000A_      set { _Column = value; }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public bool Ascending_x000D__x000A_    {_x000D__x000A_      get { return _Ascending; }_x000D__x000A_      set { _Ascending = value; }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public bool Enable_x000D__x000A_    {_x000D__x000A_      get { return _Enable; }_x000D__x000A_      set { _Enable = value; }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    public int Compare(object RowX, object RowY)_x000D__x000A_    {_x000D__x000A_      if (_Enable)_x000D__x000A_      {_x000D__x000A_        if (_Ascending)_x000D__x000A_        {_x000D__x000A_          return String.Compare(((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text);_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          return String.Compare(((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text);_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        return 0;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_"@_x000D__x000A_Add-Type -TypeDefinition $MyCode -ReferencedAssemblies "System.Windows.Forms" -Debug:$False_x000D__x000A__x000D__x000A_#endregion My Custom ListView Sort_x000D__x000A__x000D__x000A_#endregion ******* Microsoft Forms Functions ********_x000D__x000A__x000D__x000A_#region ******* Encrypt / Encode Data Functions ********_x000D__x000A__x000D__x000A_#region function Encode-MyData_x000D__x000A_function Encode-MyData()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encodes or decodes data to and from Base64 format._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encodes a string to Base64 with optional line length, or decodes a Base64 string back to its original form. _x000D__x000A_      It supports output as a string or as an array of characters._x000D__x000A_    .PARAMETER Data_x000D__x000A_      The string data to encode or decode. When encoding, this is the plain text to convert to Base64. When decoding, this is the Base64 string to convert back._x000D__x000A_    .PARAMETER LineLength_x000D__x000A_      The maximum length of each line in the encoded Base64 output. Only used when encoding. Default is 160._x000D__x000A_    .PARAMETER Decode_x000D__x000A_      Switch to indicate that the operation should decode the input Base64 string instead of encoding._x000D__x000A_    .PARAMETER AsString_x000D__x000A_      When decoding, outputs the result as a string instead of an array of characters._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encode-MyData -Data "MySecret" _x000D__x000A_      Encodes the string "MySecret" to Base64._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encode-MyData -Data $Base64String -Decode_x000D__x000A_      Decodes the Base64 string back to its original value._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encode-MyData -Data $Base64String -Decode -AsString_x000D__x000A_      Decodes the Base64 string and returns the result as a string._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Encode")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Data,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Encode")]_x000D__x000A_    [Int]$LineLength = 160,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Decode")]_x000D__x000A_    [Switch]$Decode,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Decode")]_x000D__x000A_    [Switch]$AsString_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "Encode")_x000D__x000A_  {_x000D__x000A_    $StreamWriter = [System.IO.StreamWriter]::New($MemoryStream, [System.Text.Encoding]::UTF8)_x000D__x000A_    $StreamWriter.Write($Data)_x000D__x000A_    $StreamWriter.Close()_x000D__x000A__x000D__x000A_    $Encoded = [System.Text.StringBuilder]::New()_x000D__x000A_    ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?&lt;=\G.{$LineLength})(?=.)"))_x000D__x000A_    {_x000D__x000A_      [Void]$Encoded.AppendLine($Line)_x000D__x000A_    }_x000D__x000A_    $Encoded.ToString()_x000D__x000A_    $MemoryStream.Close()_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $CompressedData = [System.Convert]::FromBase64String($Data)_x000D__x000A_    $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)_x000D__x000A_    [Void]$MemoryStream.Seek(0, 0)_x000D__x000A_    $StreamReader = [System.IO.StreamReader]::New($MemoryStream, [System.Text.Encoding]::UTF8)_x000D__x000A__x000D__x000A_    if ($AsString.IsPresent)_x000D__x000A_    {_x000D__x000A_      $StreamReader.ReadToEnd()_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $ArrayList = [System.Collections.ArrayList]::New()_x000D__x000A_      $Buffer = [System.Char[]]::New(4096)_x000D__x000A_      While ($StreamReader.EndOfStream -eq $False)_x000D__x000A_      {_x000D__x000A_        $Bytes = $StreamReader.Read($Buffer, 0, 4096)_x000D__x000A_        if ($Bytes)_x000D__x000A_        {_x000D__x000A_          $ArrayList.AddRange($Buffer[0 .. ($Bytes - 1)])_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $ArrayList_x000D__x000A_      $ArrayList.Clear()_x000D__x000A_    }_x000D__x000A_    $StreamReader.Close()_x000D__x000A_    $MemoryStream.Close()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Encode-MyData_x000D__x000A__x000D__x000A_#region Function Protect-MySensitiveData_x000D__x000A_Function Protect-MySensitiveData_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encrypts or decrypts text string data using AES encryption._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encrypts or decrypts a plain text string using a passphrase and optional salt, hash algorithm, cipher mode, and padding mode. _x000D__x000A_      It supports both encryption and decryption operations based on the -Decrypt switch._x000D__x000A_    .PARAMETER String_x000D__x000A_      The plain text string to encrypt, or the encrypted Base64 string to decrypt._x000D__x000A_    .PARAMETER PassPhrase_x000D__x000A_      The passphrase used to derive the encryption key._x000D__x000A_    .PARAMETER Salt_x000D__x000A_      The salt value used in key derivation. Must be at least 8 characters. Default is "Pepper"._x000D__x000A_    .PARAMETER HashAlgorithm_x000D__x000A_      The hash algorithm used for key derivation. Default is SHA256._x000D__x000A_    .PARAMETER CipherMode_x000D__x000A_      The cipher mode for AES encryption. Default is CBC._x000D__x000A_    .PARAMETER PaddingMode_x000D__x000A_      The padding mode for AES encryption. Default is PKCS7._x000D__x000A_    .PARAMETER Decrypt_x000D__x000A_      Switch to indicate that the function should decrypt the input string instead of encrypting._x000D__x000A_    .EXAMPLE_x000D__x000A_      $EncryptedData = Protect-MySensitiveData -String "SecretText" -PassPhrase "MyPass" -Salt "MySalt"_x000D__x000A_      Encrypts the string "SecretText" using the specified passphrase and salt._x000D__x000A_    .EXAMPLE_x000D__x000A_      $DecryptedData = Protect-MySensitiveData -String $EncryptedData -PassPhrase "MyPass" -Salt "MySalt" -Decrypt_x000D__x000A_      Decrypts the previously encrypted string using the same passphrase and salt._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$String,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$PassPhrase = "PassPhrase",_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [String]$Salt = "Pepper",_x000D__x000A_    [System.Security.Cryptography.HashAlgorithmName]$HashAlgorithm = [System.Security.Cryptography.HashAlgorithmName]::SHA256,_x000D__x000A_    [System.Security.Cryptography.CipherMode]$CipherMode = [System.Security.Cryptography.CipherMode]::CBC,_x000D__x000A_    [System.Security.Cryptography.PaddingMode]$PaddingMode = [System.Security.Cryptography.PaddingMode]::PKCS7,_x000D__x000A_    [Switch]$Decrypt_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  # Create Cryptography AES Object_x000D__x000A_  $Aes = [System.Security.Cryptography.Aes]::Create()_x000D__x000A_  $Aes.Mode = $CipherMode_x000D__x000A_  $Aes.Padding = $PaddingMode_x000D__x000A_  # Salt Needs to be at least 8 Characters_x000D__x000A_  $SaltBytes = [System.Text.Encoding]::UTF8.GetBytes($Salt.PadRight(8, "*"))_x000D__x000A_  $Aes.Key = [System.Security.Cryptography.Rfc2898DeriveBytes]::New($PassPhrase, $SaltBytes, 8, $HashAlgorithm).GetBytes($Aes.Key.Length)_x000D__x000A__x000D__x000A_  if ($Decrypt.IsPresent)_x000D__x000A_  {_x000D__x000A_    # Decrypt Encrypted Data_x000D__x000A_    $DecodeBytes = [System.Convert]::FromBase64String($String)_x000D__x000A_    $Aes.IV = $DecodeBytes[0..15]_x000D__x000A_    $Decryptor = $Aes.CreateDecryptor()_x000D__x000A_    [System.Text.Encoding]::UTF8.GetString(($Decryptor.TransformFinalBlock($DecodeBytes, 16, ($DecodeBytes.Length - 16))))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    # Encrypt String Data_x000D__x000A_    $EncodeBytes = [System.Text.Encoding]::UTF8.GetBytes($String)_x000D__x000A_    $Encryptor = $Aes.CreateEncryptor()_x000D__x000A_    $EncryptedBytes = [System.Collections.ArrayList]::New($Aes.IV)_x000D__x000A_    $EncryptedBytes.AddRange($Encryptor.TransformFinalBlock($EncodeBytes, 0, $EncodeBytes.Length))_x000D__x000A_    [System.Convert]::ToBase64String($EncryptedBytes)_x000D__x000A_    $EncryptedBytes.Clear()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $Aes.Dispose()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion Function Protect-MySensitiveData_x000D__x000A__x000D__x000A_#region function Protect-WithCert_x000D__x000A_Function Protect-WithCert ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encrypts or decrypts text data using certificate information as key material._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encrypts or decrypts a text string using properties from a specified certificate as the passphrase and salt for AES encryption. _x000D__x000A_      You can optionally use a salt derived from the certificate's validity period, and choose to use universal (UTC) or local time for salt generation. _x000D__x000A_      Decryption uses the same parameters as encryption._x000D__x000A_    .PARAMETER CertKey_x000D__x000A_      The thumbprint or subject name of the certificate in the LocalMachine\Root store to use for encryption/decryption._x000D__x000A_    .PARAMETER TextString_x000D__x000A_      The text string to encrypt or decrypt._x000D__x000A_    .PARAMETER Salt_x000D__x000A_      An integer (0-3) specifying which salt format to use, based on the certificate's NotBefore/NotAfter properties. Only used if specified._x000D__x000A_    .PARAMETER Local_x000D__x000A_      Switch to use Local time for salt generation instead of UTC time. Only relevant if -Salt is specified._x000D__x000A_    .PARAMETER Decrypt_x000D__x000A_      Switch to indicate that the function should decrypt the input string instead of encrypting._x000D__x000A_    .EXAMPLE_x000D__x000A_      # Encrypt with local salt_x000D__x000A_      $EncryptedText = Protect-WithCert -CertKey $CertKey -Salt 0 -TextString $TextString_x000D__x000A_    .EXAMPLE_x000D__x000A_      # Encrypt with universal salt_x000D__x000A_      $EncryptedText = Protect-WithCert -CertKey $CertKey -Salt 1 -Universal -TextString $TextString_x000D__x000A_    .EXAMPLE_x000D__x000A_      # Encrypt with no salt (uses certificate subject as salt)_x000D__x000A_      $EncryptedText = Protect-WithCert -CertKey $CertKey -TextString $TextString_x000D__x000A_    .EXAMPLE_x000D__x000A_      # Decrypt previously encrypted text_x000D__x000A_      $DecryptedText = Protect-WithCert -CertKey $CertKey -Salt 0 -TextString $EncryptedText -Decrypt_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "NoSalt")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$CertKey,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$TextString,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "WithSalt")]_x000D__x000A_    [ValidateRange(0, 3)]_x000D__x000A_    [Int]$Salt,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "WithSalt")]_x000D__x000A_    [Switch]$Local,_x000D__x000A_    [Switch]$Decrypt_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $Cert = Get-ChildItem -Path "Cert:\LocalMachine\Root\$($CertKey)"_x000D__x000A_  If ($PSCmdlet.ParameterSetName -eq "WithSalt")_x000D__x000A_  {_x000D__x000A_    If ($Universal.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TmpNotBefore = $Cert.NotBefore.ToUniversalTime()_x000D__x000A_      $TmpNotAfter = $Cert.NotAfter.ToUniversalTime()_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $TmpNotBefore = $Cert.NotBefore_x000D__x000A_      $TmpNotAfter = $Cert.NotAfter_x000D__x000A_    }_x000D__x000A_    $SaltInit = @($TmpNotBefore.ToString("yyyyMMddhhmmss"), $TmpNotBefore.ToString("hhmmssyyyyMMdd"), $TmpNotAfter.ToString("yyyyMMddhhmmss"), $TmpNotAfter.ToString("hhmmssyyyyMMdd"))[$Salt]_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $SaltInit = $Cert.Subject_x000D__x000A_  }_x000D__x000A_  Protect-MySensitiveData -PassPhrase ($Cert.SerialNumber) -Salt $SaltInit -String $TextString -Decrypt:($Decrypt.IsPresent)_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Protect-WithCert_x000D__x000A__x000D__x000A_#region function Encrypt-MyTextString_x000D__x000A_function Encrypt-MyTextString()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Encrypts or decrypts a text string using Windows Data Protection API (DPAPI)._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function encrypts a plain text string or decrypts an encrypted Base64 string using the Windows Data Protection API (DPAPI). _x000D__x000A_      You can specify the protection scope (CurrentUser or LocalMachine) and optionally provide an additional encryption key (entropy) for extra security._x000D__x000A_      When encrypting, the function returns a Base64-encoded string. When decrypting, it returns the original plain text._x000D__x000A_    .PARAMETER TextString_x000D__x000A_      The text string to encrypt or decrypt. When encrypting, this is the plain text to secure. When decrypting, this is the Base64-encoded string to restore._x000D__x000A_    .PARAMETER ProtectionScope_x000D__x000A_      Specifies the scope of protection. _x000D__x000A_      'CurrentUser' restricts decryption to the current user (default)._x000D__x000A_      'LocalMachine' allows any user on the machine to decrypt._x000D__x000A_    .PARAMETER EncryptKey_x000D__x000A_      An optional string used as additional entropy (extra encryption key) for added security. If not specified, no extra entropy is used._x000D__x000A_    .PARAMETER Decrypt_x000D__x000A_      Switch to indicate that the function should decrypt the input string instead of encrypting._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encrypt-MyTextString -TextString "MyPassword"_x000D__x000A_      Encrypts the string "MyPassword" for the current user._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encrypt-MyTextString -TextString $EncryptedString -Decrypt_x000D__x000A_      Decrypts the previously encrypted string for the current user._x000D__x000A_    .EXAMPLE_x000D__x000A_      Encrypt-MyTextString -TextString "MyPassword" -ProtectionScope LocalMachine -EncryptKey "ExtraSecret"_x000D__x000A_      Encrypts the string "MyPassword" for any user on the machine, using "ExtraSecret" as additional entropy._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$TextString,_x000D__x000A_    [ValidateSet("LocalMachine", "CurrentUser")]_x000D__x000A_    [String]$ProtectionScope = "CurrentUser",_x000D__x000A_    [String]$EncryptKey = $Null,_x000D__x000A_    [Switch]$Decrypt_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Security.Cryptography.ProtectedData")).Type))_x000D__x000A_  {_x000D__x000A_    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Security")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("EncryptKey"))_x000D__x000A_  {_x000D__x000A_    $OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes($EncryptKey)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $OptionalEntropy = $Null_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($Decrypt.IsPresent)_x000D__x000A_  {_x000D__x000A_    $EncryptedData = [System.Convert]::FromBase64String($TextString)_x000D__x000A_    $DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect($EncryptedData, $OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]$ProtectionScope))_x000D__x000A_    [System.Text.Encoding]::ASCII.GetString($DecryptedData)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempData = [System.Text.Encoding]::ASCII.GetBytes($TextString)_x000D__x000A_    $EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect($TempData, $OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]$ProtectionScope))_x000D__x000A_    [System.Convert]::ToBase64String($EncryptedData)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Encrypt-MyTextString_x000D__x000A__x000D__x000A_#region function Decode-MySecureString_x000D__x000A_function Decode-MySecureString ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Decodes a SecureString to plain text._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function converts a System.Security.SecureString object to its plain text string representation. _x000D__x000A_      It is useful for retrieving the original value from a SecureString, such as when you need to use the password or sensitive data in plain text form._x000D__x000A_    .PARAMETER SecureString_x000D__x000A_      The SecureString object to decode. This should be a System.Security.SecureString instance containing the sensitive data you want to convert to plain text._x000D__x000A_    .EXAMPLE_x000D__x000A_      $secure = Read-Host "Enter secret" -AsSecureString_x000D__x000A_      Decode-MySecureString -SecureString $secure_x000D__x000A_      Decodes the entered SecureString and outputs the plain text value._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Security.SecureString]$SecureString_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecureString))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Decode-MySecureString_x000D__x000A__x000D__x000A_#region function Convert-MyImageToBase64_x000D__x000A_function Convert-MyImageToBase64()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Converts an image or icon to a Base64-encoded text block for embedding in scripts._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function converts an image file (such as .ico, .gif, .jpg, etc.) or a System.Drawing.Icon object into a Base64-encoded string, formatted for easy inclusion in PowerShell scripts. _x000D__x000A_      The output includes region markers and variable assignment for direct use. You can specify the output variable name and the maximum line length for the Base64 string._x000D__x000A_    .PARAMETER ScriptName_x000D__x000A_      The name of the script or variable prefix to use in the generated code for referencing the image list. Optional._x000D__x000A_    .PARAMETER Icon_x000D__x000A_      A System.Drawing.Icon object to convert to Base64. Use this parameter set to encode an icon object directly._x000D__x000A_    .PARAMETER Path_x000D__x000A_      The file path to the image to convert. Supported formats include .ico, .gif, .jpg, and others supported by System.Drawing.Image._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The variable name to assign the Base64 string to in the generated code. This should be a valid PowerShell variable name._x000D__x000A_    .PARAMETER LineSize_x000D__x000A_      The maximum number of characters per line in the Base64 output. Default is 160._x000D__x000A_    .EXAMPLE_x000D__x000A_      Convert-MyImageToBase64 -Path "C:\Icons\myicon.ico" -Name "MyIcon"_x000D__x000A_      Converts the specified .ico file to a Base64 string and outputs PowerShell code assigning it to $MyIcon._x000D__x000A_    .EXAMPLE_x000D__x000A_      $icon = [System.Drawing.Icon]::ExtractAssociatedIcon("C:\Windows\System32\notepad.exe")_x000D__x000A_      Convert-MyImageToBase64 -Icon $icon -Name "NotepadIcon"_x000D__x000A_      Converts the provided Icon object to Base64 and outputs PowerShell code assigning it to $NotepadIcon._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet. Useful for embedding images or icons in PowerShell GUIs or scripts._x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "File")]_x000D__x000A_  Param (_x000D__x000A_    [String]$ScriptName,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Icon")]_x000D__x000A_    [System.Drawing.Icon]$Icon,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "File")]_x000D__x000A_    [String]$Path,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Name,_x000D__x000A_    [int]$LineSize = 160_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  $StringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A__x000D__x000A_  $ImageName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "").Replace("ico", "Icon")_x000D__x000A_  [Void]$StringBuilder.AppendLine("#region ******** `$$($ImageName) ********")_x000D__x000A_  [Void]$StringBuilder.AppendLine("`$$($ImageName) = @`"")_x000D__x000A_  $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "File")_x000D__x000A_  {_x000D__x000A_    Switch ([System.IO.Path]::GetExtension($Path))_x000D__x000A_    {_x000D__x000A_      ".ico"_x000D__x000A_      {_x000D__x000A_        $Image = [System.Drawing.Icon]::New($Path)_x000D__x000A_        $Image.Save($MemoryStream)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      ".gif"_x000D__x000A_      {_x000D__x000A_        $Image = [System.Drawing.Image]::FromFile($Path)_x000D__x000A_        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Gif)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      Default_x000D__x000A_      {_x000D__x000A_        $Image = [System.Drawing.Image]::FromFile($Path)_x000D__x000A_        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Jpeg)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $Image = $Icon_x000D__x000A_    $Image.Save($MemoryStream)_x000D__x000A_  }_x000D__x000A_  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?&lt;=\G.{$LineSize})(?=.)"))_x000D__x000A_  {_x000D__x000A_    [Void]$StringBuilder.AppendLine($Line)_x000D__x000A_  }_x000D__x000A_  $MemoryStream.Close()_x000D__x000A_  [Void]$StringBuilder.AppendLine("`"@")_x000D__x000A_  [Void]$StringBuilder.AppendLine("#endregion ******** `$$($ImageName) ********")_x000D__x000A_  if (([System.IO.Path]::GetExtension($path) -eq ".ico") -or ($PSCmdlet.ParameterSetName -eq "Icon"))_x000D__x000A_  {_x000D__x000A_    #[Void]$StringBuilder.AppendLine("#`$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")_x000D__x000A_    [Void]$StringBuilder.AppendLine("`$$($ScriptName)ImageList.Images.Add(`"$($ImageName)`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName)))))")_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$StringBuilder.AppendLine("#`$PictureBox.Image = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")_x000D__x000A_  }_x000D__x000A_  $StringBuilder.ToString()_x000D__x000A__x000D__x000A_  $Image = $Null_x000D__x000A_  $MemoryStream = $Null_x000D__x000A_  $StringBuilder = $Null_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Convert-MyImageToBase64_x000D__x000A__x000D__x000A_#region function Compress-MyData_x000D__x000A_Function Compress-MyData()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Compress / Decompress String Data_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Compress / Decompress String Data_x000D__x000A_    .PARAMETER Data_x000D__x000A_      Path to Text File to Compress_x000D__x000A_    .PARAMETER DataName_x000D__x000A_      Name to put in Data Region Comments_x000D__x000A_    .PARAMETER Path_x000D__x000A_      Data to Compress / Decompress_x000D__x000A_    .PARAMETER LineLength_x000D__x000A_      Max Line Length_x000D__x000A_    .PARAMETER Decompress_x000D__x000A_      Decompress the Data String_x000D__x000A_    .PARAMETER AsString_x000D__x000A_      Return as a String_x000D__x000A_    .EXAMPLE_x000D__x000A_      Compress-MyData -Data "String"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "CompressText")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Decompress")]_x000D__x000A_    [String]$Data,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [String]$DataName = "CompressedText",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompressFile")]_x000D__x000A_    [String]$Path,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressFile")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [Int]$LineLength = 160,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompressFile")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompressText")]_x000D__x000A_    [Switch]$Encode,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Decompress")]_x000D__x000A_    [Switch]$Decompress,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Decompress")]_x000D__x000A_    [Switch]$AsString_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Compress-MyData"_x000D__x000A_  _x000D__x000A_  If ($PSCmdLet.ParameterSetName -eq "Decompress")_x000D__x000A_  {_x000D__x000A_    $CompressedData = [System.Convert]::FromBase64String($Data)_x000D__x000A_    $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A_    $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)_x000D__x000A_    [Void]$MemoryStream.Seek(0, 0)_x000D__x000A_    $GZipStream = [System.IO.Compression.GZipStream]::New($MemoryStream, [System.IO.Compression.CompressionMode]::Decompress)_x000D__x000A_    $StreamReader = [System.IO.StreamReader]::New($GZipStream, [System.Text.Encoding]::UTF8)_x000D__x000A_    If ($AsString.IsPresent)_x000D__x000A_    {_x000D__x000A_      $StreamReader.ReadToEnd()_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $ArrayList = [System.Collections.ArrayList]::New()_x000D__x000A_      $Buffer = [System.Char[]]::New(4096)_x000D__x000A_      While (-not $StreamReader.EndOfStream)_x000D__x000A_      {_x000D__x000A_        $Bytes = $StreamReader.Read($Buffer, 0, 4096)_x000D__x000A_        If ($Bytes -gt 0)_x000D__x000A_        {_x000D__x000A_          $ArrayList.AddRange($Buffer[0..($Bytes - 1)])_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $ArrayList_x000D__x000A_      $ArrayList.Clear()_x000D__x000A_    }_x000D__x000A_    # Close Reader_x000D__x000A_    $StreamReader.Close()_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    If ($PSCmdlet.ParameterSetName -eq "CompressFile")_x000D__x000A_    {_x000D__x000A_      $Data = Get-Content -Path $Path -Raw_x000D__x000A_      $DataName = ([System.IO.Path]::GetFileName($Path) -replace "[\.\-\s]", "")_x000D__x000A_    }_x000D__x000A_    $MemoryStream = [System.IO.MemoryStream]::New()_x000D__x000A_    $GZipStream = [System.IO.Compression.GZipStream]::New($MemoryStream, [System.IO.Compression.CompressionMode]::Compress)_x000D__x000A_    $StreamWriter = [System.IO.StreamWriter]::New($GZipStream, [System.Text.Encoding]::UTF8)_x000D__x000A_    $StreamWriter.Write($Data)_x000D__x000A_    # Close Writer_x000D__x000A_    $StreamWriter.Close()_x000D__x000A_    $StringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A_    If ($Encode.IsPresent)_x000D__x000A_    {_x000D__x000A_      [Void]$StringBuilder.AppendLine("#region $($DataName) Data")_x000D__x000A_      [Void]$StringBuilder.AppendLine("`$$($DataName) = @`"")_x000D__x000A_    }_x000D__x000A_    ForEach ($Line In @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?&lt;=\G.{$LineLength})(?=.)"))_x000D__x000A_    {_x000D__x000A_      [Void]$StringBuilder.AppendLine($Line)_x000D__x000A_    }_x000D__x000A_    If ($Encode.IsPresent)_x000D__x000A_    {_x000D__x000A_      [Void]$StringBuilder.AppendLine("`"@")_x000D__x000A_      [Void]$StringBuilder.AppendLine("#endregion $($DataName) Data")_x000D__x000A_    }_x000D__x000A_    # Return Encryped Data_x000D__x000A_    $StringBuilder.ToString()_x000D__x000A_    [void]$StringBuilder.Clear()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  # Close Streams_x000D__x000A_  $GZipStream.Close()_x000D__x000A_  $MemoryStream.Close()_x000D__x000A_  _x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Compress-MyData"_x000D__x000A_}_x000D__x000A_#endregion function Compress-MyData_x000D__x000A__x000D__x000A_#endregion ******* Encrypt / Encode Data Functions ********_x000D__x000A__x000D__x000A_#region function Write-MyLogFile_x000D__x000A_function Write-MyLogFile()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Writes a log entry to a specified log file with customizable severity, formatting, and output options._x000D__x000A_    .DESCRIPTION_x000D__x000A_      The Write-MyLogFile function writes log messages to a file, with support for log rotation, severity levels, colored host output, and customizable log folder and file names. _x000D__x000A_      It is designed for flexible logging in scripts and automation tasks._x000D__x000A_    .PARAMETER LogFolder_x000D__x000A_      Specifies the folder where the log file will be stored. Defaults to the script name if not specified._x000D__x000A_    .PARAMETER LogName_x000D__x000A_      Specifies the name of the log file. Defaults to the script name with a .log extension._x000D__x000A_    .PARAMETER SystemLog_x000D__x000A_      Switch to use the Windows system log folder for storing the log file._x000D__x000A_    .PARAMETER Severity_x000D__x000A_      Specifies the severity of the log entry. Valid values are Text, Info, Good, Warning, and Error. Default is Text._x000D__x000A_    .PARAMETER Message_x000D__x000A_      The message to log. This parameter is mandatory._x000D__x000A_    .PARAMETER Component_x000D__x000A_      Specifies the component or source of the log entry. Defaults to the script name._x000D__x000A_    .PARAMETER Context_x000D__x000A_      Additional context information for the log entry._x000D__x000A_    .PARAMETER Thread_x000D__x000A_      The thread or process ID associated with the log entry. Defaults to the current process ID._x000D__x000A_    .PARAMETER MaxSize_x000D__x000A_      The maximum size (in bytes) of the log file before it is rotated. Default is 52428800 (50 MB)._x000D__x000A_    .PARAMETER OutHost_x000D__x000A_      Switch to also write the log message to the host (console) with color._x000D__x000A_    .PARAMETER ColorText_x000D__x000A_      The color used for Text severity messages in the host output. Default is Gray._x000D__x000A_    .PARAMETER ColorInfo_x000D__x000A_      The color used for Info severity messages in the host output. Default is DarkCyan._x000D__x000A_    .PARAMETER ColorGood_x000D__x000A_      The color used for Good severity messages in the host output. Default is DarkGreen._x000D__x000A_    .PARAMETER ColorWarn_x000D__x000A_      The color used for Warning severity messages in the host output. Default is DarkYellow._x000D__x000A_    .PARAMETER ColorError_x000D__x000A_      The color used for Error severity messages in the host output. Default is DarkRed._x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Message "This is My Info Log File Message"_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Info" -Message "This is My Info Log File Message"_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Warning" -Message "This is My Warning Log File Message"_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Error" -Message "This is My Error Log File Message"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "LogFolder")]_x000D__x000A_    [String]$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [String]$LogName = "$([System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName)).log",_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "SystemLog")]_x000D__x000A_    [Switch]$SystemLog,_x000D__x000A_    [ValidateSet("Text", "Info", "Good", "Warning", "Error")]_x000D__x000A_    [String]$Severity = "Text",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message,_x000D__x000A_    [String]$Component = "",_x000D__x000A_    [String]$Context = "",_x000D__x000A_    [Int]$Thread = $PID,_x000D__x000A_    [ValidateRange(0, 16777216)]_x000D__x000A_    [Int]$MaxSize = 52428800,_x000D__x000A_    [Switch]$OutHost,_x000D__x000A_    [ConsoleColor]$ColorText = [ConsoleColor]::Gray,_x000D__x000A_    [ConsoleColor]$ColorInfo = [ConsoleColor]::DarkCyan,_x000D__x000A_    [ConsoleColor]$ColorGood = [ConsoleColor]::DarkGreen,_x000D__x000A_    [ConsoleColor]$ColorWarn = [ConsoleColor]::DarkYellow,_x000D__x000A_    [ConsoleColor]$ColorError = [ConsoleColor]::DarkRed_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Write-MyLogFile"_x000D__x000A__x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "LogFolder"_x000D__x000A_    {_x000D__x000A_      $LogPath = $LogFolder_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "SystemLog"_x000D__x000A_    {_x000D__x000A_      $LogPath = "$($ENV:SystemRoot)\Logs\$($LogFolder)"_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    Default_x000D__x000A_    {_x000D__x000A_      $LogPath = "$($PSScriptRoot)\Logs"_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if (-not [System.IO.Directory]::Exists($LogPath))_x000D__x000A_  {_x000D__x000A_    [Void][System.IO.Directory]::CreateDirectory($LogPath)_x000D__x000A_  }_x000D__x000A_  $TempFile = "$($LogPath)\$LogName"_x000D__x000A__x000D__x000A_  switch ($Severity)_x000D__x000A_  {_x000D__x000A_    "Text"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 1_x000D__x000A_      $HostColor = $ColorText_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Info"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 1_x000D__x000A_      $HostColor = $ColorInfo_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Good"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 1_x000D__x000A_      $HostColor = $ColorGood_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Warning"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 2_x000D__x000A_      $HostColor = $ColorWarn_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_    "Error"_x000D__x000A_    {_x000D__x000A_      $TempSeverity = 3_x000D__x000A_      $HostColor = $ColorError_x000D__x000A_      break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempDate = [DateTime]::Now_x000D__x000A__x000D__x000A_  if (-not $PSBoundParameters.ContainsKey("Component"))_x000D__x000A_  {_x000D__x000A_    $TempSource = [System.IO.Path]::GetFileName($MyInvocation.ScriptName)_x000D__x000A_    $Component = [System.IO.Path]::GetFileNameWithoutExtension($TempSource)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ([System.IO.File]::Exists($TempFile) -and $MaxSize -gt 0)_x000D__x000A_  {_x000D__x000A_    if (([System.IO.FileInfo]$TempFile).Length -gt $MaxSize)_x000D__x000A_    {_x000D__x000A_      $TempBackup = [System.IO.Path]::ChangeExtension($TempFile, "lo_")_x000D__x000A_      if ([System.IO.File]::Exists($TempBackup))_x000D__x000A_      {_x000D__x000A_        Remove-Item -Force -Path $TempBackup_x000D__x000A_      }_x000D__x000A_      Rename-Item -Force -Path $TempFile -NewName ([System.IO.Path]::GetFileName($TempBackup))_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($OutHost.IsPresent)_x000D__x000A_  {_x000D__x000A_    Write-Host -Object "$($TempDate.ToString("yy-MM-dd HH:mm:ss")) - $($Message)" -ForegroundColor $HostColor_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Add-Content -Encoding Ascii -Path $TempFile -Value ("&lt;![LOG[{0}]LOG]!&gt;&lt;time=`"{1}`" date=`"{2}`" component=`"{3}`" context=`"{4}`" type=`"{5}`" thread=`"{6}`" file=`"{7}`"&gt;" -f $Message, $($TempDate.ToString("HH:mm:ss.fff+000")), $($TempDate.ToString("MM-dd-yyyy")), $Component, $Context, $TempSeverity, $Thread, $TempSource)_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Write-MyLogFile"_x000D__x000A_}_x000D__x000A_#endregion function Write-MyLogFile_x000D__x000A__x000D__x000A_#region ******* Generic / General Functions ********_x000D__x000A__x000D__x000A_#region function Invoke-MyPause_x000D__x000A_function Invoke-MyPause_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Pauses script execution for a specified number of Milliseconds or until a condition is met._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function pauses the script for the specified number of Milliseconds. Optionally, a ScriptBlock can be provided to determine if the pause should continue. _x000D__x000A_      The function processes Windows Forms events during the pause._x000D__x000A_    .PARAMETER Milliseconds_x000D__x000A_      The number of Milliseconds to pause the script. Default is 60._x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      A ScriptBlock that returns $True to continue pausing or $False to stop. Default is { $True }._x000D__x000A_    .EXAMPLE_x000D__x000A_      Invoke-MyPause -Milliseconds 30_x000D__x000A_      Pauses the script for 30 Milliseconds._x000D__x000A_    .EXAMPLE_x000D__x000A_      Invoke-MyPause -Milliseconds 10 -ScriptBlock { $global:ContinuePause }_x000D__x000A_      Pauses the script for up to 10 Milliseconds or until $global:ContinuePause is $False._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [UInt16]$Milliseconds = 60,_x000D__x000A_    [ScriptBlock]$ScriptBlock = { $True }_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Invoke-MyPause"_x000D__x000A__x000D__x000A_  $TmpPause = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  do_x000D__x000A_  {_x000D__x000A_    [System.Threading.Thread]::Sleep(10)_x000D__x000A_    $WaitCheck = $ScriptBlock.Invoke()_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_  }_x000D__x000A_  while (($TmpPause.Elapsed.TotalMilliseconds -lt $Milliseconds) -and $WaitCheck)_x000D__x000A_  $TmpPause.Stop()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Invoke-MyPause"_x000D__x000A_}_x000D__x000A_#endregion function Invoke-MyPause_x000D__x000A__x000D__x000A_#region function Set-MyClipboard_x000D__x000A_function Set-MyClipboard()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Copies object data to the clipboard in HTML and CSV format._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function copies the specified object data to the clipboard, formatting it as both HTML and CSV. _x000D__x000A_      The HTML output includes customizable styles for the table title, property headers, and row colors. _x000D__x000A_      The function is useful for exporting tabular data from PowerShell scripts for use in other applications._x000D__x000A_    .PARAMETER Items_x000D__x000A_      The array of objects to copy to the clipboard. Each object should contain the properties specified in the Properties parameter._x000D__x000A_    .PARAMETER Title_x000D__x000A_      The title displayed at the top of the HTML table. Default is "My Copied Data from PowerShell"._x000D__x000A_    .PARAMETER TitleFore_x000D__x000A_      The foreground (text) color for the table title. Default is "Black"._x000D__x000A_    .PARAMETER TitleBack_x000D__x000A_      The background color for the table title. Default is "LightSteelBlue"._x000D__x000A_    .PARAMETER Properties_x000D__x000A_      The list of property names to include as columns in the table. This parameter is mandatory._x000D__x000A_    .PARAMETER PropertyFore_x000D__x000A_      The foreground (text) color for the property header row. Default is "Black"._x000D__x000A_    .PARAMETER PropertyBack_x000D__x000A_      The background color for the property header row. Default is "PowderBlue"._x000D__x000A_    .PARAMETER RowFore_x000D__x000A_      The foreground (text) color for all data rows. Default is "Black"._x000D__x000A_    .PARAMETER RowEvenBack_x000D__x000A_      The background color for even-numbered data rows. Default is "White"._x000D__x000A_    .PARAMETER RowOddBack_x000D__x000A_      The background color for odd-numbered data rows. Default is "Gainsboro"._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyClipboard -Items $Items -Title "This is My Title" -Properties "Property1", "Property2", "Property3"_x000D__x000A_      Copies the specified properties of $Items to the clipboard with a custom title._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Office")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True)]_x000D__x000A_    [Object[]]$Items,_x000D__x000A_    [String]$Title = "My Copied Data from PowerShell",_x000D__x000A_    [String]$TitleFore = "Black",_x000D__x000A_    [String]$TitleBack = "LightSteelBlue",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String[]]$Properties,_x000D__x000A_    [String]$PropertyFore = "Black",_x000D__x000A_    [String]$PropertyBack = "PowderBlue",_x000D__x000A_    [String]$RowFore = "Black",_x000D__x000A_    [String]$RowEvenBack = "White",_x000D__x000A_    [String]$RowOddBack = "Gainsboro"_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-MyClipboard Begin Block"_x000D__x000A__x000D__x000A_    # Init StringBuilding_x000D__x000A_    $HTMLStringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A__x000D__x000A_    # Start HTML ClipBaord Data_x000D__x000A_    [Void]$HTMLStringBuilder.Append("Version:1.0`r`nStartHTML:000START`r`nEndHTML:00000END`r`nStartFragment:00FSTART`r`nEndFragment:0000FEND`r`n")_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("000START", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;html&gt;&lt;head&gt;&lt;title&gt;My Copied Data&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--StartFragment--&gt;")_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("00FSTART", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A__x000D__x000A_    # Table Style_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;style&gt;`r`n.Title{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: $($TitleFore); background: $($TitleBack);}`r`n.Property{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: $($PropertyFore); background: $($PropertyBack);}`r`n.Row0 {border: 1px solid black; border-collapse: collapse;color: $($RowFore); background: $($RowEvenBack);}`r`n.Row1 {border: 1px solid black; border-collapse: collapse; color: $($RowFore); background: $($RowOddBack);}`r`n&lt;/style&gt;")_x000D__x000A__x000D__x000A_    # Start Build Table / Set Title_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;table&gt;&lt;tr&gt;&lt;th class=Title aligh=center colspan=$($Properties.Count)&gt;&amp;nbsp;$($Title)&amp;nbsp;&lt;/th&gt;&lt;/tr&gt;")_x000D__x000A__x000D__x000A_    # Add Table Column / Property Names_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;tr&gt;$(($Properties | ForEach-Object -Process { "&lt;td class=Property aligh=center&gt;&amp;nbsp;$($PSItem)&amp;nbsp;&lt;/td&gt;" }) -join '')&lt;/tr&gt;")_x000D__x000A__x000D__x000A_    # Start Row Count_x000D__x000A_    $TmpRowCount = 0_x000D__x000A__x000D__x000A_    $TmpItemList = [System.Collections.ArrayList]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-MyClipboard Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-MyClipboard Process Block"_x000D__x000A__x000D__x000A_    foreach ($Item in $Items)_x000D__x000A_    {_x000D__x000A_      [Void]$HTMLStringBuilder.Append("&lt;tr&gt;$(((($Properties | ForEach-Object -Process { $Item.($PSItem) }) | ForEach-Object -Process { "&lt;td class=Row$($TmpRowCount)&gt;&amp;nbsp;$($PSItem)&amp;nbsp;&lt;/td&gt;" }) -join ''))&lt;/tr&gt;")_x000D__x000A_      [Void]$TmpItemList.Add(($Item | Select-Object -Property $Properties))_x000D__x000A_      $TmpRowCount = ($TmpRowCount + 1) % 2_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-MyClipboard Process Block"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-MyClipboard End Block"_x000D__x000A__x000D__x000A_    # Close HTML Table_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;/table&gt;&lt;br&gt;&lt;br&gt;")_x000D__x000A__x000D__x000A_    # Set End Clipboard Values_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("0000FEND", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A_    [Void]$HTMLStringBuilder.Append("&lt;!--EndFragment--&gt;&lt;/body&gt;&lt;/html&gt;")_x000D__x000A_    [Void]$HTMLStringBuilder.Replace("00000END", ("{0:X8}" -f $HTMLStringBuilder.Length))_x000D__x000A__x000D__x000A_    [System.Windows.Forms.Clipboard]::Clear()_x000D__x000A_    $DataObject = [System.Windows.Forms.DataObject]::New("Text", ($TmpItemList | Select-Object -Property $Properties | ConvertTo-Csv -NoTypeInformation | Out-String))_x000D__x000A_    $DataObject.SetData("HTML Format", $HTMLStringBuilder.ToString())_x000D__x000A_    [System.Windows.Forms.Clipboard]::SetDataObject($DataObject)_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-MyClipboard End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Set-MyClipboard_x000D__x000A__x000D__x000A_#region function Send-MyEMail_x000D__x000A_function Send-MyEMail()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Sends an E-mail message using SMTP._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function sends an E-mail message using the specified SMTP server and port. You can specify recipients, sender, subject, body, message file, HTML formatting, CC, BCC, attachments, and priority._x000D__x000A_    .PARAMETER SMTPServer_x000D__x000A_      The SMTP server to use for sending the E-mail. Default is [MyConfig]::SMTPServer._x000D__x000A_    .PARAMETER SMTPPort_x000D__x000A_      The port number to use for the SMTP server. Default is [MyConfig]::SMTPPort._x000D__x000A_    .PARAMETER To_x000D__x000A_      One or more recipient E-mail addresses. Mandatory._x000D__x000A_    .PARAMETER From_x000D__x000A_      The sender's E-mail address. Mandatory._x000D__x000A_    .PARAMETER Subject_x000D__x000A_      The subject of the E-mail message. Mandatory._x000D__x000A_    .PARAMETER Body_x000D__x000A_      The body text of the E-mail message. If a file path is provided, the contents of the file will be used as the body._x000D__x000A_    .PARAMETER IsHTML_x000D__x000A_      Indicates whether the body of the E-mail is formatted as HTML._x000D__x000A_    .PARAMETER CC_x000D__x000A_      One or more E-mail addresses to send a carbon copy (CC) of the message._x000D__x000A_    .PARAMETER BCC_x000D__x000A_      One or more E-mail addresses to send a blind carbon copy (BCC) of the message._x000D__x000A_    .PARAMETER Attachment_x000D__x000A_      One or more attachments to include with the E-mail message._x000D__x000A_    .PARAMETER Priority_x000D__x000A_      The priority of the E-mail message. Valid values are "Low", "Normal", or "High". Default is "Normal"._x000D__x000A_    .EXAMPLE_x000D__x000A_      Send-MyEMail -To "user@example.com" -From "me@example.com" -Subject "Test" -Body "Hello World" -SMTPServer "smtp.example.com" -SMTPPort 25_x000D__x000A_      Sends a simple E-mail message._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$SMTPServer = [MyConfig]::SMTPServer,_x000D__x000A_    [Int]$SMTPPort = [MyConfig]::SMTPPort,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, HelpMessage = "Enter To")]_x000D__x000A_    [System.Net.Mail.MailAddress[]]$To,_x000D__x000A_    [parameter(Mandatory = $True, HelpMessage = "Enter From")]_x000D__x000A_    [System.Net.Mail.MailAddress]$From,_x000D__x000A_    [parameter(Mandatory = $True, HelpMessage = "Enter Subject")]_x000D__x000A_    [String]$Subject,_x000D__x000A_    [parameter(Mandatory = $True, HelpMessage = "Enter Message Text")]_x000D__x000A_    [String]$Body,_x000D__x000A_    [Switch]$IsHTML,_x000D__x000A_    [System.Net.Mail.MailAddress[]]$CC,_x000D__x000A_    [System.Net.Mail.MailAddress[]]$BCC,_x000D__x000A_    [System.Net.Mail.Attachment[]]$Attachment,_x000D__x000A_    [ValidateSet("Low", "Normal", "High")]_x000D__x000A_    [System.Net.Mail.MailPriority]$Priority = "Normal"_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Send-MyEMail Begin"_x000D__x000A__x000D__x000A_    $MyMessage = [System.Net.Mail.MailMessage]::New()_x000D__x000A_    $MyMessage.From = $From_x000D__x000A_    $MyMessage.Subject = $Subject_x000D__x000A_    $MyMessage.IsBodyHtml = $IsHTML_x000D__x000A_    $MyMessage.Priority = $Priority_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("CC"))_x000D__x000A_    {_x000D__x000A_      foreach ($SendCC in $CC)_x000D__x000A_      {_x000D__x000A_        $MyMessage.CC.Add($SendCC)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("BCC"))_x000D__x000A_    {_x000D__x000A_      foreach ($SendBCC in $BCC)_x000D__x000A_      {_x000D__x000A_        $MyMessage.BCC.Add($SendBCC)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ([System.IO.File]::Exists($Body))_x000D__x000A_    {_x000D__x000A_      $MyMessage.Body = $([System.IO.File]::ReadAllText($Body))_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $MyMessage.Body = $Body_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("Attachment"))_x000D__x000A_    {_x000D__x000A_      foreach ($AttachedFile in $Attachment)_x000D__x000A_      {_x000D__x000A_        $MyMessage.Attachments.Add($AttachedFile)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Send-MyEMail Begin"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Send-MyEMail Process"_x000D__x000A__x000D__x000A_    $MyMessage.To.Clear()_x000D__x000A_    foreach ($SendTo in $To)_x000D__x000A_    {_x000D__x000A_      $MyMessage.To.Add($SendTo)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $SMTPClient = [System.Net.Mail.SmtpClient]::New($SMTPServer, $SMTPPort)_x000D__x000A_    $SMTPClient.Send($MyMessage)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Send-MyEMail Process"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Send-MyEMail End"_x000D__x000A_    Write-Verbose -Message "Exit Function Send-MyEMail End"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Send-MyEMail_x000D__x000A__x000D__x000A_#region function Show-MyWebReport_x000D__x000A_function Show-MyWebReport_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Opens a web report in the default browser (Edge or Chrome) as an app window._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function launches the specified report URL in Microsoft Edge or Google Chrome as an app window. _x000D__x000A_      It checks for the configured browser path in [MyConfig] and uses Edge if available, otherwise Chrome. _x000D__x000A_      If neither is configured, the function does nothing._x000D__x000A_    .PARAMETER ReportURL_x000D__x000A_      The URL of the web report to open. This parameter is mandatory._x000D__x000A_    .EXAMPLE_x000D__x000A_      Show-MyWebReport -ReportURL "https://myreportserver/report1"_x000D__x000A_      Opens the specified report in the configured browser as an app window._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$ReportURL_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-MyWebReport"_x000D__x000A__x000D__x000A_  if ([String]::IsNullOrEmpty(([MyConfig]::EdgePath)))_x000D__x000A_  {_x000D__x000A_    if (-not [String]::IsNullOrEmpty(([MyConfig]::ChromePath)))_x000D__x000A_    {_x000D__x000A_      Start-Process -FilePath ([MyConfig]::ChromePath) -ArgumentList "--app=`"$($ReportURL)`""_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    Start-Process -FilePath ([MyConfig]::EdgePath) -ArgumentList "--app=`"$($ReportURL)`""_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-MyWebReport"_x000D__x000A_}_x000D__x000A_#endregion function Show-MyWebReport_x000D__x000A__x000D__x000A_#region class MyConCommand_x000D__x000A_class MyConCommand_x000D__x000A_{_x000D__x000A_  [Int]$ExitCode_x000D__x000A_  [String]$OutputTxt_x000D__x000A_  [String]$ErrorMsg_x000D__x000A__x000D__x000A_  MyConCommand ([Int]$ExitCode, [String]$OutputTxt, [String]$ErrorMsg)_x000D__x000A_  {_x000D__x000A_    $This.ExitCode = $ExitCode_x000D__x000A_    $This.OutputTxt = $OutputTxt_x000D__x000A_    $This.ErrorMsg = $ErrorMsg_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion class MyConCommand_x000D__x000A__x000D__x000A_#region function Invoke-MyConCommand_x000D__x000A_function Invoke-MyConCommand ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Invokes a console command and returns the exit code, output, and error message._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function executes a specified console command with optional parameters, captures the exit code, standard output, and standard error, and returns them in a custom object. _x000D__x000A_      Useful for running external processes and retrieving their results in PowerShell._x000D__x000A_    .PARAMETER Command_x000D__x000A_      The full path to the executable or command to run. This parameter is mandatory._x000D__x000A_    .PARAMETER Parameters_x000D__x000A_      Optional command line parameters to pass to the executable. Default is $Null._x000D__x000A_    .EXAMPLE_x000D__x000A_      Invoke-MyConCommand -Command "C:\Windows\System32\cmd.exe" -Parameters "/c Exit 1"_x000D__x000A_      Runs cmd.exe with the specified parameters and returns the exit code and output._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Command,_x000D__x000A_    [String]$Parameters = $Null_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Invoke-MyConCommand"_x000D__x000A__x000D__x000A_  if ([System.IO.File]::Exists($Command))_x000D__x000A_  {_x000D__x000A_    $PSI = [System.Diagnostics.ProcessStartInfo]::New($Command, $Parameters)_x000D__x000A_    $PSI.UseShellExecute = $False_x000D__x000A_    $PSI.RedirectStandardError = $True_x000D__x000A_    $PSI.RedirectStandardOutput = $True_x000D__x000A_    try_x000D__x000A_    {_x000D__x000A_      $Out = [System.Diagnostics.Process]::Start($PSI)_x000D__x000A_      $Out.WaitForExit()_x000D__x000A_      [MyConCommand]::New($Out.ExitCode, $Out.StandardOutput.ReadToEnd(), $Out.StandardError.ReadToEnd())_x000D__x000A_    }_x000D__x000A_    catch_x000D__x000A_    {_x000D__x000A_      [MyConCommand]::New(-2, $Null, $Error[0].Message)_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [MyConCommand]::New(-1, $Null, "Command was not Found")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Invoke-MyConCommand"_x000D__x000A_}_x000D__x000A_#endregion function Invoke-MyConCommand_x000D__x000A__x000D__x000A_#region function Test-MyClassLoaded_x000D__x000A_function Test-MyClassLoaded()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Test if Custom Class is Loaded_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Test if Custom Class is Loaded_x000D__x000A_    .PARAMETER Name_x000D__x000A_      Name of Custom Class_x000D__x000A_    .EXAMPLE_x000D__x000A_      $IsLoaded = Test-MyClassLoaded -Name "CustomClass"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Default")]_x000D__x000A_    [String]$Name_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Test-MyClassLoaded"_x000D__x000A__x000D__x000A_  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New($Name)).Type))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Test-MyClassLoaded"_x000D__x000A_}_x000D__x000A_#endregion function Test-MyClassLoaded_x000D__x000A__x000D__x000A_#region function New-MyComObject_x000D__x000A_function New-MyComObject()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates Local and Remote COMObjects._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function creates a COM object either locally or on a remote computer using the specified ProgID. _x000D__x000A_      It is useful for automating tasks that require COM automation, such as interacting with Office applications or other COM-enabled software._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer on which to create the COM object. Defaults to the local computer._x000D__x000A_    .PARAMETER COMObject_x000D__x000A_      The ProgID of the COM object to create. This parameter is mandatory._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MyComObject -COMObject "Excel.Application"_x000D__x000A_      Creates an Excel COM object on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      New-MyComObject -ComputerName "RemotePC" -COMObject "Excel.Application"_x000D__x000A_      Creates an Excel COM object on the remote computer "RemotePC"._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$COMObject_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function New-MyComObject"_x000D__x000A__x000D__x000A_  [Activator]::CreateInstance([Type]::GetTypeFromProgID($COMObject, $ComputerName))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function New-MyComObject"_x000D__x000A_}_x000D__x000A_#endregion function New-MyComObject_x000D__x000A__x000D__x000A_#region function ConvertTo-MyIconImage_x000D__x000A_function ConvertTo-MyIconImage()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Converts a Base64-encoded string to an Icon or Image object._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function takes a Base64-encoded string representing an image or icon and converts it back to a .NET Icon or Image object. _x000D__x000A_      Use the -Image switch to specify that the output should be an Image object; otherwise, an Icon object is returned._x000D__x000A_    .PARAMETER EncodedImage_x000D__x000A_      The Base64-encoded string representing the image or icon to convert. This parameter is mandatory._x000D__x000A_    .PARAMETER Image_x000D__x000A_      If specified, the function returns a System.Drawing.Image object. If not specified, a System.Drawing.Icon object is returned._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = ConvertTo-MyIconImage -EncodedImage $EncodedImage_x000D__x000A_      Converts the Base64 string to an Icon object._x000D__x000A_    .EXAMPLE_x000D__x000A_      $NewItem = ConvertTo-MyIconImage -EncodedImage $EncodedImage -Image_x000D__x000A_      Converts the Base64 string to an Image object._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$EncodedImage,_x000D__x000A_    [Switch]$Image_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function ConvertTo-MyIconImage"_x000D__x000A__x000D__x000A_  if ($Image.IsPresent)_x000D__x000A_  {_x000D__x000A_    [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodedImage)))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodedImage)))_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function ConvertTo-MyIconImage"_x000D__x000A_}_x000D__x000A_#endregion function ConvertTo-MyIconImage_x000D__x000A__x000D__x000A_#region function Send-MyTextMessage_x000D__x000A_function Send-MyTextMessage ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Sends a text message to a remote or local computer or IP address using UDP._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function sends a text message to a specified computer name or IP address using UDP protocol. _x000D__x000A_      You can specify the target by computer name or IP address, set the message content, and choose the port. _x000D__x000A_      The function is useful for simple network notifications or inter-process communication._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer to send the message to. Defaults to the local computer. Used only if IPAddress is not specified._x000D__x000A_    .PARAMETER IPAddress_x000D__x000A_      The IP address to send the message to. Defaults to "127.0.0.1". Use "255.255.255.255" for broadcast._x000D__x000A_    .PARAMETER Message_x000D__x000A_      The text message to send. Defaults to "This is My Message"._x000D__x000A_    .PARAMETER Port_x000D__x000A_      The UDP port to use for sending the message. Defaults to 2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Send-MyTextMessage -Message "Hello World" -IPAddress "192.168.1.100" -Port 2500_x000D__x000A_      Sends "Hello World" to IP address 192.168.1.100 on port 2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Send-MyTextMessage -ComputerName "RemotePC" -Message "Test Notification"_x000D__x000A_      Sends "Test Notification" to the computer named RemotePC._x000D__x000A_    .NOTES_x000D__x000A_      Original function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "IPAddress")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ComputerName")]_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "IPAddress")]_x000D__x000A_    [System.Net.IPAddress]$IPAddress = "127.0.0.1",_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [String]$Message = "This is My Message",_x000D__x000A_    [int]$Port = 2500_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter function Send-MyTextMessage"_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "IPAddress")_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New($IPAddress, $Port)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName($ComputerName)).AddressList[0]), $Port)_x000D__x000A_  }_x000D__x000A_  $MessageBytes = [Text.Encoding]::ASCII.GetBytes("$($Message)")_x000D__x000A_  $UDPClient = [System.Net.Sockets.UdpClient]::New()_x000D__x000A_  $UDPClient.Send($MessageBytes, $MessageBytes.Length, $RemoteClient)_x000D__x000A_  $UDPClient.Close()_x000D__x000A_  $UDPClient.Dispose()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit function Send-MyTextMessage"_x000D__x000A_}_x000D__x000A_#endregion function Send-MyTextMessage_x000D__x000A__x000D__x000A_#region function Listen-MyTextMessage_x000D__x000A_function Listen-MyTextMessage ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Listens for text messages sent via UDP from remote or local computers._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function listens for incoming UDP text messages on a specified port and IP address or computer name. _x000D__x000A_      It displays received messages and the sender's address. The listener runs until a message with the content "Exit" is received._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer to listen for messages from. Defaults to the local computer. Used only if IPAddress is not specified._x000D__x000A_    .PARAMETER IPAddress_x000D__x000A_      The IP address to listen on. Defaults to "127.0.0.1". Use "0.0.0.0" to listen on all interfaces._x000D__x000A_    .PARAMETER Port_x000D__x000A_      The UDP port to listen on. Defaults to 2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Listen-MyTextMessage_x000D__x000A_      Listens for UDP messages on 127.0.0.1:2500._x000D__x000A_    .EXAMPLE_x000D__x000A_      Listen-MyTextMessage -IPAddress "0.0.0.0" -Port 3000_x000D__x000A_      Listens for UDP messages on all interfaces at port 3000._x000D__x000A_    .EXAMPLE_x000D__x000A_      Listen-MyTextMessage -ComputerName "RemotePC"_x000D__x000A_      Listens for UDP messages from the computer named RemotePC._x000D__x000A_    .NOTES_x000D__x000A_      Original function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "IPAddress")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ComputerName")]_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "IPAddress")]_x000D__x000A_    [System.Net.IPAddress]$IPAddress = "127.0.0.1",_x000D__x000A_    [int]$Port = 2500_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter function Listen-MyTextMessage"_x000D__x000A__x000D__x000A_  if ($PSCmdlet.ParameterSetName -eq "IPAddress")_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New($IPAddress, $Port)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName($ComputerName)).AddressList[0]), $Port)_x000D__x000A_  }_x000D__x000A_  $UDPClient = [System.Net.Sockets.UdpClient]::New($Port)_x000D__x000A_  do_x000D__x000A_  {_x000D__x000A_    $TempRemoteClient = $RemoteClient_x000D__x000A_    $Message = $UDPClient.Receive([ref]$TempRemoteClient)_x000D__x000A_    $DecodedMessage = [Text.Encoding]::ASCII.GetString($Message)_x000D__x000A_    Write-Host -Object "Message From: $($TempRemoteClient.Address) - $($DecodedMessage)"_x000D__x000A_  } while ($True -and ($DecodedMessage -ne "Exit"))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit function Listen-MyTextMessage"_x000D__x000A_}_x000D__x000A_#endregion function Listen-MyTextMessage_x000D__x000A__x000D__x000A_#region class MyWorkstationInfo_x000D__x000A_class MyWorkstationInfo_x000D__x000A_{_x000D__x000A_  [String]$ComputerName = [Environment]::MachineName_x000D__x000A_  [String]$FQDN = [Environment]::MachineName_x000D__x000A_  [Bool]$Found = $False_x000D__x000A_  [String]$UserName = ""_x000D__x000A_  [String]$Domain = ""_x000D__x000A_  [Bool]$DomainMember = $False_x000D__x000A_  [int]$ProductType = 0_x000D__x000A_  [String]$Manufacturer = ""_x000D__x000A_  [String]$Model = ""_x000D__x000A_  [Bool]$IsMobile = $False_x000D__x000A_  [String]$SerialNumber = ""_x000D__x000A_  [Long]$Memory = 0_x000D__x000A_  [String]$OperatingSystem = ""_x000D__x000A_  [String]$BuildNumber = ""_x000D__x000A_  [String]$Version = ""_x000D__x000A_  [String]$ServicePack = ""_x000D__x000A_  [String]$Architecture = ""_x000D__x000A_  [Bool]$Is64Bit = $False_x000D__x000A_  [DateTime]$LocalDateTime = [DateTime]::MinValue_x000D__x000A_  [DateTime]$InstallDate = [DateTime]::MinValue_x000D__x000A_  [DateTime]$LastBootUpTime = [DateTime]::MinValue_x000D__x000A_  [String]$IPAddress = ""_x000D__x000A_  [String]$Status = "Off-Line"_x000D__x000A_  [DateTime]$StartTime = [DateTime]::Now_x000D__x000A_  [DateTime]$EndTime = [DateTime]::Now_x000D__x000A__x000D__x000A_  MyWorkstationInfo ([String]$ComputerName)_x000D__x000A_  {_x000D__x000A_    $This.ComputerName = $ComputerName.ToUpper()_x000D__x000A_    $This.FQDN = $ComputerName.ToUpper()_x000D__x000A_    $This.Status = "On-Line"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [Void] AddComputerSystem ([String]$TestName, [String]$IPAddress, [String]$ComputerName, [Bool]$DomainMember, [String]$Domain, [String]$Manufacturer, [String]$Model, [String]$UserName, [Long]$Memory)_x000D__x000A_  {_x000D__x000A_    $This.IPAddress = $IPAddress_x000D__x000A_    $This.ComputerName = "$($ComputerName)".ToUpper()_x000D__x000A_    $This.DomainMember = $DomainMember_x000D__x000A_    $This.Domain = "$($Domain)".ToUpper()_x000D__x000A_    if ($DomainMember)_x000D__x000A_    {_x000D__x000A_      $This.FQDN = "$($ComputerName).$($Domain)".ToUpper()_x000D__x000A_    }_x000D__x000A_    $This.Manufacturer = $Manufacturer_x000D__x000A_    $This.Model = $Model_x000D__x000A_    $This.UserName = $UserName_x000D__x000A_    $This.Memory = $Memory_x000D__x000A_    $This.Found = ($ComputerName -eq @($TestName.Split("."))[0])_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [Void] AddOperatingSystem ([int]$ProductType, [String]$OperatingSystem, [String]$ServicePack, [String]$BuildNumber, [String]$Version, [String]$Architecture, [DateTime]$LocalDateTime, [DateTime]$InstallDate, [DateTime]$LastBootUpTime)_x000D__x000A_  {_x000D__x000A_    $This.ProductType = $ProductType_x000D__x000A_    $This.OperatingSystem = $OperatingSystem_x000D__x000A_    $This.ServicePack = $ServicePack_x000D__x000A_    $This.BuildNumber = $BuildNumber_x000D__x000A_    $This.Version = $Version_x000D__x000A_    $This.Architecture = $Architecture_x000D__x000A_    $This.Is64Bit = ($Architecture -eq "64-bit")_x000D__x000A_    $This.LocalDateTime = $LocalDateTime_x000D__x000A_    $This.InstallDate = $InstallDate_x000D__x000A_    $This.LastBootUpTime = $LastBootUpTime_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [Void] AddSerialNumber ([String]$SerialNumber)_x000D__x000A_  {_x000D__x000A_    $This.SerialNumber = $SerialNumber_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [Void] AddIsMobile ([Long[]]$ChassisTypes)_x000D__x000A_  {_x000D__x000A_    $This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains $ChassisTypes[0])_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [Void] UpdateStatus ([String]$Status)_x000D__x000A_  {_x000D__x000A_    $This.Status = $Status_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [MyWorkstationInfo] SetEndTime ()_x000D__x000A_  {_x000D__x000A_    $This.EndTime = [DateTime]::Now_x000D__x000A_    return $This_x000D__x000A_  }_x000D__x000A__x000D__x000A_  [TimeSpan] GetRunTime ()_x000D__x000A_  {_x000D__x000A_    return ($This.EndTime - $This.StartTime)_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion class MyWorkstationInfo_x000D__x000A__x000D__x000A_#region function Get-MyWorkstationInfo_x000D__x000A_function Get-MyWorkstationInfo()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Verify Remote Workstation is the Correct One_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Verify Remote Workstation is the Correct One_x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Name of the Computer to Verify_x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Credentials to use when connecting to the Remote Computer_x000D__x000A_    .PARAMETER Serial_x000D__x000A_      Return Serial Number_x000D__x000A_    .PARAMETER Mobile_x000D__x000A_      Check if System is Desktop / Laptop_x000D__x000A_    .INPUTS_x000D__x000A_    .OUTPUTS_x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyWorkstationInfo -ComputerName "MyWorkstation"_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [PSCredential]$Credential,_x000D__x000A_    [Switch]$Serial,_x000D__x000A_    [Switch]$Mobile_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo"_x000D__x000A__x000D__x000A_    # Default Common Get-WmiObject Options_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      $Params = @{_x000D__x000A_        "ComputerName" = $Null_x000D__x000A_        "Credential"   = $Credential_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $Params = @{_x000D__x000A_        "ComputerName" = $Null_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo - Process"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      # Start Setting Return Values as they are Found_x000D__x000A_      $VerifyObject = [MyWorkstationInfo]::New($Computer)_x000D__x000A__x000D__x000A_      # Validate ComputerName_x000D__x000A_      if ($Computer -match "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$")_x000D__x000A_      {_x000D__x000A_        try_x000D__x000A_        {_x000D__x000A_          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not_x000D__x000A_          $IPAddresses = @([System.Net.Dns]::GetHostAddresses($Computer) | Where-Object -FilterScript { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)_x000D__x000A_          :FoundMyWork foreach ($IPAddress in $IPAddresses)_x000D__x000A_          {_x000D__x000A_            if ([System.Net.NetworkInformation.Ping]::New().Send($IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)_x000D__x000A_            {_x000D__x000A_              # Set Default Parms_x000D__x000A_              $Params.ComputerName = $IPAddress_x000D__x000A__x000D__x000A_              # Get ComputerSystem_x000D__x000A_              [Void]($MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)_x000D__x000A_              $VerifyObject.AddComputerSystem($Computer, $IPAddress, ($MyCompData.Name), ($MyCompData.PartOfDomain), ($MyCompData.Domain), ($MyCompData.Manufacturer), ($MyCompData.Model), ($MyCompData.UserName), ($MyCompData.TotalPhysicalMemory))_x000D__x000A_              $MyCompData.Dispose()_x000D__x000A__x000D__x000A_              # Verify Remote Computer is the Connect Computer, No need to get any more information_x000D__x000A_              if ($VerifyObject.Found)_x000D__x000A_              {_x000D__x000A_                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                [Void]($MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)_x000D__x000A_                $VerifyObject.AddOperatingSystem(($MyOSData.ProductType), ($MyOSData.Caption), ($MyOSData.CSDVersion), ($MyOSData.BuildNumber), ($MyOSData.Version), ($MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LastBootUpTime)))_x000D__x000A_                $MyOSData.Dispose()_x000D__x000A__x000D__x000A_                # Optional SerialNumber Job_x000D__x000A_                if ($Serial.IsPresent)_x000D__x000A_                {_x000D__x000A_                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                  [Void]($MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)_x000D__x000A_                  $VerifyObject.AddSerialNumber($MyBIOSData.SerialNumber)_x000D__x000A_                  $MyBIOSData.Dispose()_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # Optional Mobile / ChassisType Job_x000D__x000A_                if ($Mobile.IsPresent)_x000D__x000A_                {_x000D__x000A_                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer_x000D__x000A_                  [Void]($MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)_x000D__x000A_                  $VerifyObject.AddIsMobile($MyChassisData.ChassisTypes)_x000D__x000A_                  $MyChassisData.Dispose()_x000D__x000A_                }_x000D__x000A_              }_x000D__x000A_              else_x000D__x000A_              {_x000D__x000A_                $VerifyObject.UpdateStatus("Wrong Workstation Name")_x000D__x000A_              }_x000D__x000A_              # Beak out of Loop, Verify was a Success no need to try other IP Address if any_x000D__x000A_              break FoundMyWork_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        catch_x000D__x000A_        {_x000D__x000A_          # Workstation Not in DNS_x000D__x000A_          $VerifyObject.UpdateStatus("Workstation Not in DNS")_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $VerifyObject.UpdateStatus("Invalid Computer Name")_x000D__x000A_      }_x000D__x000A__x000D__x000A_      # Set End Time and Return Results_x000D__x000A_      $VerifyObject.SetEndTime()_x000D__x000A_    }_x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo - Process"_x000D__x000A_  }_x000D__x000A_  end_x000D__x000A_  {_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Get-MyWorkstationInfo_x000D__x000A__x000D__x000A_#region function Get-MyNetAdapterConStatus_x000D__x000A_function Get-MyNetAdapterConStatus ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Gets the connection status of wired and wireless network adapters on a specified computer._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function checks the network adapters on the specified computer and determines if there are any active wired or wireless connections. _x000D__x000A_      It uses WMI queries to identify the physical medium type and connection status of each adapter._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      The name of the computer to query. Defaults to the local computer._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      The credentials to use when connecting to the remote computer. Defaults to an empty credential._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyNetAdapterConStatus -ComputerName "PC01"_x000D__x000A_      Returns the wired and wireless connection status for computer "PC01"._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-MyNetAdapterConStatus -ComputerName "PC01" -Credential (Get-Credential)_x000D__x000A_      Returns the connection status using the specified credentials._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-MyNetAdapterConStatus"_x000D__x000A__x000D__x000A_  $PhysicalMediumTypeList = @(Get-WmiObject -ComputerName $ComputerName -Credential $Credential -Namespace "Root\WMI" -Query "Select InstanceName, NdisPhysicalMediumType From MSNdis_PhysicalMediumType Where Active = 1" | Select-Object -Property InstanceName, NdisPhysicalMediumType)_x000D__x000A_  $NetworkAdapters = @(Get-WmiObject -ComputerName $ComputerName -Credential $Credential -Namespace "Root\CimV2" -Query "Select Name from Win32_NetworkAdapter Where NetConnectionStatus = 2" | Select-Object -ExpandProperty Name)_x000D__x000A_  [PSCustomObject][ordered]@{_x000D__x000A_    "Wired"    = (@($PhysicalMediumTypeList | Where-Object -FilterScript { ($PSItem.NdisPhysicalMediumType -eq 0) -and ($PSItem.InstanceName -in $NetworkAdapters) }).Count -gt 0)_x000D__x000A_    "Wireless" = (@($PhysicalMediumTypeList | Where-Object -FilterScript { ($PSItem.NdisPhysicalMediumType -eq 9) -and ($PSItem.InstanceName -in $NetworkAdapters) }).Count -gt 0)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-MyNetAdapterConStatus"_x000D__x000A_}_x000D__x000A_#endregion function Get-MyNetAdapterConStatus_x000D__x000A__x000D__x000A_#endregion ******* Generic / General Functions ********_x000D__x000A__x000D__x000A_#region ******* Registry / Environement Variable Functions ********_x000D__x000A__x000D__x000A_#region function Reset-MyRegKeyOwner_x000D__x000A_function Reset-MyRegKeyOwner ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Take Ownership of a Registry Key and Reset Access Rules._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function takes ownership of a specified registry key and optionally resets its access rules. It can operate recursively and supports changing ownership to either the Administrators or Users group._x000D__x000A_    .PARAMETER Hive_x000D__x000A_      Specifies the registry hive to operate on. Defaults to LocalMachine._x000D__x000A_    .PARAMETER Key_x000D__x000A_      The path of the registry key to take ownership of. This parameter is mandatory._x000D__x000A_    .PARAMETER User_x000D__x000A_      If specified, sets the owner to the Users group (S-1-5-32-545). Otherwise, sets to Administrators group (S-1-5-32-544)._x000D__x000A_    .PARAMETER ResetAccess_x000D__x000A_      If specified, resets the access rules for the registry key to grant full control to the new owner._x000D__x000A_    .PARAMETER Recurse_x000D__x000A_      If specified, applies ownership and access rule changes recursively to all subkeys._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp"_x000D__x000A_      Takes ownership of the "SOFTWARE\MyApp" registry key as Administrators._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp" -User_x000D__x000A_      Takes ownership of the "SOFTWARE\MyApp" registry key as Users._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp" -ResetAccess_x000D__x000A_      Takes ownership and resets access rules for the "SOFTWARE\MyApp" registry key._x000D__x000A_    .EXAMPLE_x000D__x000A_      Reset-MyRegKeyOwner -Key "SOFTWARE\MyApp" -Recurse_x000D__x000A_      Takes ownership recursively for "SOFTWARE\MyApp" and all its subkeys._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [Microsoft.Win32.RegistryKey]$Hive = [Microsoft.Win32.Registry]::LocalMachine,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Key,_x000D__x000A_    [Switch]$User,_x000D__x000A_    [Switch]$ResetAccess,_x000D__x000A_    [Switch]$Recurse_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Reset-MyRegKeyOwner"_x000D__x000A__x000D__x000A_  if ($User.IsPresent)_x000D__x000A_  {_x000D__x000A_    $NewOwner = [System.Security.Principal.SecurityIdentifier]::New("S-1-5-32-545")_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $NewOwner = [System.Security.Principal.SecurityIdentifier]::New("S-1-5-32-544")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Key: $($Key)"_x000D__x000A_  $TempKey = $Hive.OpenSubKey($Key, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::TakeOwnership)_x000D__x000A_  $ACL = [System.Security.AccessControl.RegistrySecurity]::New()_x000D__x000A_  $ACL.SetOwner($NewOwner)_x000D__x000A_  $TempKey.SetAccessControl($ACL)_x000D__x000A_  $ACL.SetAccessRuleProtection($False, $False)_x000D__x000A_  $TempKey.SetAccessControl($ACL)_x000D__x000A__x000D__x000A_  if ($ResetAccess.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TempKey = $TempKey.OpenSubKey("", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)_x000D__x000A_    $Rule = [System.Security.AccessControl.RegistryAccessRule]::New($NewOwner, [System.Security.AccessControl.RegistryRights]::FullControl, [System.Security.AccessControl.InheritanceFlags]::ContainerInherit, [System.Security.AccessControl.PropagationFlags]::None, [System.Security.AccessControl.AccessControlType]::Allow)_x000D__x000A_    $ACL.ResetAccessRule($Rule)_x000D__x000A_    $TempKey.SetAccessControl($ACL)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($Recurse.IsPresent)_x000D__x000A_  {_x000D__x000A_    [Void]$PSBoundParameters.Remove("Key")_x000D__x000A_    [Void]$PSBoundParameters.Remove("ResetAccess")_x000D__x000A_    $TempKey = $TempKey.OpenSubKey("")_x000D__x000A_    foreach ($SubKey in @($TempKey.GetSubKeyNames()))_x000D__x000A_    {_x000D__x000A_      Reset-MyRegKeyOwner @PSBoundParameters -Key "$($Key)\$($SubKey)"_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Reset-MyRegKeyOwner"_x000D__x000A_}_x000D__x000A_#endregion function Reset-MyRegKeyOwner_x000D__x000A__x000D__x000A_#region function Set-MyISScriptData_x000D__x000A_function Set-MyISScriptData()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Writes Script Data to the Registry_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Writes Script Data to the Registry_x000D__x000A_    .PARAMETER Script_x000D__x000A_     Name of the Regsitry Key to write the values under. Defaults to the name of the script._x000D__x000A_    .PARAMETER Name_x000D__x000A_     Name of the Value to write_x000D__x000A_    .PARAMETER Value_x000D__x000A_      The Data to write_x000D__x000A_    .PARAMETER MultiValue_x000D__x000A_      Write Multiple values to the Registry_x000D__x000A_    .PARAMETER User_x000D__x000A_      Write to the HKCU Registry Hive_x000D__x000A_    .PARAMETER Computer_x000D__x000A_      Write to the HKLM Registry Hive_x000D__x000A_    .PARAMETER Bitness_x000D__x000A_      Specify 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value "Value"_x000D__x000A__x000D__x000A_      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value @("This", "That") -User -Script "ScriptName"_x000D__x000A__x000D__x000A_      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key_x000D__x000A__x000D__x000A_      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ_x000D__x000A_      Use @() or (,) when specifing the Value paramter value_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value (,8) -Bitness "64" -Computer_x000D__x000A__x000D__x000A_      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key_x000D__x000A__x000D__x000A_      Number arrays are written to the registry as strings._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -Name "Name" -Value 0 -Computer_x000D__x000A__x000D__x000A_      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-MyISScriptData -MultiValue @{"Name" = "MyName"; "Number" = 4; "Array" = @("First", 2, "3rd", 4)} -Computer -Bitness "32"_x000D__x000A__x000D__x000A_      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "User")]_x000D__x000A_  param (_x000D__x000A_    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "User")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [String]$Name,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "User")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [Object]$Value,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "UserMulti")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompMulti")]_x000D__x000A_    [HashTable]$MultiValue,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "User")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "UserMulti")]_x000D__x000A_    [Switch]$User,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "CompMulti")]_x000D__x000A_    [Switch]$Computer,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Comp")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "CompMulti")]_x000D__x000A_    [ValidateSet("32", "64", "All")]_x000D__x000A_    [String]$Bitness = "All"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Set-MyISScriptData"_x000D__x000A__x000D__x000A_  # Get Default Registry Paths_x000D__x000A_  $RegPaths = [System.Collections.ArrayList]::New()_x000D__x000A_  if ($Computer.IsPresent)_x000D__x000A_  {_x000D__x000A_    if ($Bitness -match "All|32")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node")_x000D__x000A_    }_x000D__x000A_    if ($Bitness -match "All|64")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software")_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$RegPaths.Add("Registry::HKEY_CURRENT_USER\Software")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Create the Registry Keys if Needed._x000D__x000A_  foreach ($RegPath in $RegPaths)_x000D__x000A_  {_x000D__x000A_    if ([String]::IsNullOrEmpty((Get-Item -Path "$RegPath\MyISScriptData" -ErrorAction "SilentlyContinue")))_x000D__x000A_    {_x000D__x000A_      try_x000D__x000A_      {_x000D__x000A_        [Void](New-Item -Path $RegPath -Name "MyISScriptData")_x000D__x000A_      }_x000D__x000A_      catch_x000D__x000A_      {_x000D__x000A_        throw "Error Creating Registry Key : MyISScriptData"_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    if ([String]::IsNullOrEmpty((Get-Item -Path "$RegPath\MyISScriptData\$Script" -ErrorAction "SilentlyContinue")))_x000D__x000A_    {_x000D__x000A_      try_x000D__x000A_      {_x000D__x000A_        [Void](New-Item -Path "$RegPath\MyISScriptData" -Name $Script)_x000D__x000A_      }_x000D__x000A_      catch_x000D__x000A_      {_x000D__x000A_        throw "Error Creating Registry Key : $Script"_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Write the values to the registry._x000D__x000A_  switch -regex ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "Multi"_x000D__x000A_    {_x000D__x000A_      foreach ($Key in $MultiValue.Keys)_x000D__x000A_      {_x000D__x000A_        if ($MultiValue[$Key] -is [Array])_x000D__x000A_        {_x000D__x000A_          $Data = [String[]]$MultiValue[$Key]_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $Data = $MultiValue[$Key]_x000D__x000A_        }_x000D__x000A_        foreach ($RegPath in $RegPaths)_x000D__x000A_        {_x000D__x000A_          [Void](Set-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -Name $Key -Value $Data)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    default_x000D__x000A_    {_x000D__x000A_      if ($Value -is [Array])_x000D__x000A_      {_x000D__x000A_        $Data = [String[]]$Value_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $Data = $Value_x000D__x000A_      }_x000D__x000A_      foreach ($RegPath in $RegPaths)_x000D__x000A_      {_x000D__x000A_        [Void](Set-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -Name $Name -Value $Data)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Set-MyISScriptData"_x000D__x000A_}_x000D__x000A_#endregion function Set-MyISScriptData_x000D__x000A__x000D__x000A_#region function Get-MyISScriptData_x000D__x000A_function Get-MyISScriptData()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Reads Script Data from the Registry_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Reads Script Data from the Registry_x000D__x000A_    .PARAMETER Script_x000D__x000A_     Name of the Regsitry Key to read the values from. Defaults to the name of the script._x000D__x000A_    .PARAMETER Name_x000D__x000A_     Name of the Value to read_x000D__x000A_    .PARAMETER User_x000D__x000A_      Read from the HKCU Registry Hive_x000D__x000A_    .PARAMETER Computer_x000D__x000A_      Read from the HKLM Registry Hive_x000D__x000A_    .PARAMETER Bitness_x000D__x000A_      Specify 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name"_x000D__x000A__x000D__x000A_      Read the value from the HKCU Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name" -User -Script "ScriptName"_x000D__x000A__x000D__x000A_      Read the value from the HKCU Registry Hive under the Specified Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name" -Computer_x000D__x000A__x000D__x000A_      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key_x000D__x000A_    .EXAMPLE_x000D__x000A_      $RegValues = Get-MyISScriptData -Name "Name" -Bitness "32" -Script "ScriptName" -Computer_x000D__x000A__x000D__x000A_      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "User")]_x000D__x000A_  param (_x000D__x000A_    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [String[]]$Name = "*",_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "User")]_x000D__x000A_    [Switch]$User,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [Switch]$Computer,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Comp")]_x000D__x000A_    [ValidateSet("32", "64")]_x000D__x000A_    [String]$Bitness = "64"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-MyISScriptData"_x000D__x000A__x000D__x000A_  # Get Default Registry Path_x000D__x000A_  if ($Computer.IsPresent)_x000D__x000A_  {_x000D__x000A_    if ($Bitness -eq "64")_x000D__x000A_    {_x000D__x000A_      $RegPath = "Registry::HKEY_LOCAL_MACHINE\Software"_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $RegPath = "Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node"_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $RegPath = "Registry::HKEY_CURRENT_USER\Software"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Get the values from the registry._x000D__x000A_  Get-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -ErrorAction "SilentlyContinue" | Select-Object -Property $Name_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-MyISScriptData"_x000D__x000A_}_x000D__x000A_#endregion function Get-MyISScriptData_x000D__x000A__x000D__x000A_#region function Remove-MyISScriptData_x000D__x000A_function Remove-MyISScriptData()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Removes Script Data from the Registry_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Removes Script Data from the Registry_x000D__x000A_    .PARAMETER Script_x000D__x000A_     Name of the Regsitry Key to remove. Defaults to the name of the script._x000D__x000A_    .PARAMETER User_x000D__x000A_      Remove from the HKCU Registry Hive_x000D__x000A_    .PARAMETER Computer_x000D__x000A_      Remove from the HKLM Registry Hive_x000D__x000A_    .PARAMETER Bitness_x000D__x000A_      Specify 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData_x000D__x000A__x000D__x000A_      Removes the default script registry key from the HKCU Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData -User -Script "ScriptName"_x000D__x000A__x000D__x000A_      Removes the Specified Script Name registry key from the HKCU Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData -Computer_x000D__x000A__x000D__x000A_      Removes the default script registry key from the 32/64 bit HKLM Registry Hive_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyISScriptData -Computer -Script "ScriptName" -Bitness "32"_x000D__x000A__x000D__x000A_      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "User")]_x000D__x000A_  param (_x000D__x000A_    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "User")]_x000D__x000A_    [Switch]$User,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Comp")]_x000D__x000A_    [Switch]$Computer,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Comp")]_x000D__x000A_    [ValidateSet("32", "64", "All")]_x000D__x000A_    [String]$Bitness = "All"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Remove-MyISScriptData"_x000D__x000A__x000D__x000A_  # Get Default Registry Paths_x000D__x000A_  $RegPaths = [System.Collections.ArrayList]::New()_x000D__x000A_  if ($Computer.IsPresent)_x000D__x000A_  {_x000D__x000A_    if ($Bitness -match "All|32")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node")_x000D__x000A_    }_x000D__x000A_    if ($Bitness -match "All|64")_x000D__x000A_    {_x000D__x000A_      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software")_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void]$RegPaths.Add("Registry::HKEY_CURRENT_USER\Software")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Remove the values from the registry._x000D__x000A_  foreach ($RegPath in $RegPaths)_x000D__x000A_  {_x000D__x000A_    [Void](Remove-Item -Path "$RegPath\MyISScriptData\$Script")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Remove-MyISScriptData"_x000D__x000A_}_x000D__x000A_#endregion function Remove-MyISScriptData_x000D__x000A__x000D__x000A_#region function Get-EnvironmentVariable_x000D__x000A_function Get-EnvironmentVariable()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Retrieves environment variables from the local or remote workstation._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function queries environment variables for a specified user on one or more computers using CIM/WMI._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Specifies one or more computer names to query. Defaults to the local computer._x000D__x000A_    .PARAMETER Variable_x000D__x000A_      Specifies the name of the environment variable to retrieve. Supports wildcards. Defaults to '%' (all variables)._x000D__x000A_    .PARAMETER UserName_x000D__x000A_      Specifies the user context for the environment variable. Defaults to '&lt;SYSTEM&gt;' for system-wide variables._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Specifies a PSCredential object for authentication when connecting to remote computers._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-EnvironmentVariable -Variable "Path"_x000D__x000A_      Retrieves the "Path" environment variable for the system on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      Get-EnvironmentVariable -ComputerName "Server01","Server02" -Variable "TEMP" -UserName "DOMAIN\User"_x000D__x000A_      Retrieves the "TEMP" environment variable for the specified user on multiple remote computers._x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [String]$Variable = "%",_x000D__x000A_    [String]$UserName = "&lt;SYSTEM&gt;",_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-EnvironmentVariable Begin Block"_x000D__x000A__x000D__x000A_    $Query = "Select * from Win32_Environment Where Name like '$Variable' and UserName = '$UserName'"_x000D__x000A__x000D__x000A_    $SessionParams = @{_x000D__x000A_      "ComputerName" = ""_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      [Void]$SessionParms.Add("Credential", $Credential)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-EnvironmentVariable Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-EnvironmentVariable Process Block"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      $SessionParams.ComputerName = $Computer_x000D__x000A_      Get-CimInstance -CimSession (New-CimSession @SessionParams) -Query $Query_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-EnvironmentVariable Process Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Get-EnvironmentVariable_x000D__x000A__x000D__x000A_#region function Set-EnvironmentVariable_x000D__x000A_function Set-EnvironmentVariable()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Sets or creates an environment variable on the local or remote workstation._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function sets the value of an environment variable for a specified user on one or more computers using CIM/WMI. If the variable does not exist, it will be created._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Specifies one or more computer names to target. Defaults to the local computer._x000D__x000A_    .PARAMETER Variable_x000D__x000A_      Specifies the name of the environment variable to set. This parameter is mandatory._x000D__x000A_    .PARAMETER Value_x000D__x000A_      Specifies the value to assign to the environment variable._x000D__x000A_    .PARAMETER UserName_x000D__x000A_      Specifies the user context for the environment variable. Defaults to '&lt;SYSTEM&gt;' for system-wide variables._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Specifies a PSCredential object for authentication when connecting to remote computers._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-EnvironmentVariable -Variable "Path" -Value "C:\MyPath"_x000D__x000A_      Sets the "Path" environment variable for the system on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      Set-EnvironmentVariable -ComputerName "Server01","Server02" -Variable "TEMP" -Value "C:\Temp" -UserName "DOMAIN\User"_x000D__x000A_      Sets the "TEMP" environment variable for the specified user on multiple remote computers._x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Variable,_x000D__x000A_    [String]$Value,_x000D__x000A_    [String]$UserName = "&lt;SYSTEM&gt;",_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-EnvironmentVariable Begin Block"_x000D__x000A__x000D__x000A_    $Query = "Select * from Win32_Environment Where Name = '$Variable' and UserName = '$UserName'"_x000D__x000A__x000D__x000A_    $SessionParams = @{_x000D__x000A_      "ComputerName" = ""_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      [Void]$SessionParms.Add("Credential", $Credential)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-EnvironmentVariable Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Set-EnvironmentVariable Process Block"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      $SessionParams.ComputerName = $Computer_x000D__x000A_      $CimSession = New-CimSession @SessionParams_x000D__x000A_      if ([String]::IsNullOrEmpty(($Instance = Get-CimInstance -CimSession $CimSession -Query $Query)))_x000D__x000A_      {_x000D__x000A_        New-CimInstance -CimSession $CimSession -ClassName Win32_Environment -Property @{ "Name" = $Variable; "VariableValue" = $Value; "UserName" = $UserName }_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        Set-CimInstance -InputObject $Instance -Property @{ "Name" = $Variable; "VariableValue" = $Value } -PassThru_x000D__x000A_      }_x000D__x000A_      $CimSession.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Set-EnvironmentVariable Process Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Set-EnvironmentVariable_x000D__x000A__x000D__x000A_#region function Remove-EnvironmentVariable_x000D__x000A_function Remove-EnvironmentVariable()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Removes an environment variable from the local or remote workstation._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function deletes a specified environment variable for a given user on one or more computers using CIM/WMI. _x000D__x000A_      It supports system-wide and user-specific variables and can authenticate to remote computers._x000D__x000A_    .PARAMETER ComputerName_x000D__x000A_      Specifies one or more computer names to target. Defaults to the local computer._x000D__x000A_    .PARAMETER Variable_x000D__x000A_      Specifies the name of the environment variable to remove. This parameter is mandatory._x000D__x000A_    .PARAMETER UserName_x000D__x000A_      Specifies the user context for the environment variable. Defaults to '&lt;SYSTEM&gt;' for system-wide variables._x000D__x000A_    .PARAMETER Credential_x000D__x000A_      Specifies a PSCredential object for authentication when connecting to remote computers._x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-EnvironmentVariable -Variable "TEMP"_x000D__x000A_      Removes the "TEMP" environment variable for the system on the local computer._x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-EnvironmentVariable -ComputerName "Server01","Server02" -Variable "Path" -UserName "DOMAIN\User"_x000D__x000A_      Removes the "Path" environment variable for the specified user on multiple remote computers._x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [String[]]$ComputerName = [System.Environment]::MachineName,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Variable,_x000D__x000A_    [String]$UserName = "&lt;SYSTEM&gt;",_x000D__x000A_    [PSCredential]$Credential = [PSCredential]::Empty_x000D__x000A_  )_x000D__x000A_  begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-EnvironmentVariable Begin Block"_x000D__x000A__x000D__x000A_    $Query = "Select * from Win32_Environment Where Name = '$Variable' and UserName = '$UserName'"_x000D__x000A__x000D__x000A_    $SessionParams = @{_x000D__x000A_      "ComputerName" = ""_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Credential"))_x000D__x000A_    {_x000D__x000A_      [Void]$SessionParms.Add("Credential", $Credential)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-EnvironmentVariable Begin Block"_x000D__x000A_  }_x000D__x000A_  process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-EnvironmentVariable Process Block"_x000D__x000A__x000D__x000A_    foreach ($Computer in $ComputerName)_x000D__x000A_    {_x000D__x000A_      $SessionParams.ComputerName = $Computer_x000D__x000A_      $CimSession = New-CimSession @SessionParams_x000D__x000A_      if (-not [String]::IsNullOrEmpty(($Instance = Get-CimInstance -CimSession $CimSession -Query $Query)))_x000D__x000A_      {_x000D__x000A_        Remove-CimInstance -InputObject $Instance_x000D__x000A_      }_x000D__x000A_      $CimSession.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-EnvironmentVariable Process Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Remove-EnvironmentVariable_x000D__x000A__x000D__x000A_#endregion ******* Registry / Environement Variable Functions ********_x000D__x000A__x000D__x000A_#region function Install-MyModule_x000D__x000A_Function Install-MyModule ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Checks for, installs if required, and imports the specified PowerShell module._x000D__x000A_    .DESCRIPTION_x000D__x000A_      This function checks if the specified module is imported or installed. If not, it installs the module from the given repository and imports it. Supports custom repositories and installation scopes._x000D__x000A_    .PARAMETER Name_x000D__x000A_      The name of the module to check, install, and import._x000D__x000A_    .PARAMETER Version_x000D__x000A_      The minimum required version of the module. Defaults to "0.0.0.0" (any version)._x000D__x000A_    .PARAMETER Scope_x000D__x000A_      Specifies whether to install/import the module for AllUsers or CurrentUser. Defaults to "AllUsers"._x000D__x000A_    .PARAMETER Repository_x000D__x000A_      The name of the repository to use for installation. Defaults to "sie-powershell"._x000D__x000A_    .PARAMETER Install_x000D__x000A_      If specified, performs the installation of the module if not present._x000D__x000A_    .PARAMETER NoImport_x000D__x000A_      If specified, Do not Import the specified module_x000D__x000A_    .PARAMETER SourceLocation_x000D__x000A_      The URL of the repository source location. Used when registering a custom repository._x000D__x000A_    .PARAMETER PublishLocation_x000D__x000A_      The URL of the repository publish location. Used when registering a custom repository._x000D__x000A_    .EXAMPLE_x000D__x000A_      Install-MyModule -Name "MSAL.PS" -Version "2.0.0.0" -Scope "AllUsers" -Install_x000D__x000A_      Checks for MSAL.PS module, installs version 2.0.0.0 or higher for all users if required, and imports it._x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Name,_x000D__x000A_    [Version]$Version = "0.0.0.0",_x000D__x000A_    [ValidateSet("AllUsers", "CurrentUser")]_x000D__x000A_    [String]$Scope = "AllUsers",_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Default")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Custom")]_x000D__x000A_    [String]$Repository = "PSGallery",_x000D__x000A_    [Switch]$Install,_x000D__x000A_    [Switch]$NoImport,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Custom")]_x000D__x000A_    [String]$SourceLocation,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Custom")]_x000D__x000A_    [String]$PublishLocation_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Install-MyModule"_x000D__x000A__x000D__x000A_  # Zero Verion for Checks_x000D__x000A_  $ZeroVersion = [Version]::new(0, 0, 0, 0)_x000D__x000A__x000D__x000A_  # Get Module Common Parameters_x000D__x000A_  $GMParams = @{_x000D__x000A_    "Name"          = $Name_x000D__x000A_    "WarningAction" = "SilentlyContinue"_x000D__x000A_    "ErrorAction"   = "SilentlyContinue"_x000D__x000A_    "Verbose"       = $False_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Install Module Parameters_x000D__x000A_  $IMParams = @{_x000D__x000A_    "Name"          = $Name_x000D__x000A_    "WarningAction" = "SilentlyContinue"_x000D__x000A_    "ErrorAction"   = "SilentlyContinue"_x000D__x000A_    "Verbose"       = $False_x000D__x000A_  }_x000D__x000A_  If ($PSBoundParameters.ContainsKey("Version"))_x000D__x000A_  {_x000D__x000A_    $IMParams.Add("RequiredVersion", $Version)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Check if Module is Already Imported_x000D__x000A_  $ChkInstalled = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_  If ([String]::IsNullOrEmpty($ChkInstalled.Version))_x000D__x000A_  {_x000D__x000A_    # Get Installed Module Versions_x000D__x000A_    $ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { ($PSItem.Version -eq $Version) -or ($Version -eq $ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_    If ([String]::IsNullOrEmpty($ChkInstalled.Version))_x000D__x000A_    {_x000D__x000A_      If (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and ($Scope -eq "AllUsers")) -or ($Scope -eq "CurrentUser")) -and $Install.IsPresent)_x000D__x000A_      {_x000D__x000A_        # Check if Repo Exists_x000D__x000A_        $ChkRepo = Get-PSRepository -Name $Repository -ErrorAction SilentlyContinue_x000D__x000A_        If ([String]::IsNullOrEmpty($ChkRepo.Name))_x000D__x000A_        {_x000D__x000A_          # Add Custom Repo_x000D__x000A_          Register-PSRepository -Name $Repository -SourceLocation $SourceLocation -PublishLocation $PublishLocation -InstallationPolicy "Trusted"_x000D__x000A_        }_x000D__x000A_        # Install / Update Module_x000D__x000A_        Install-Module @IMParams -Repository $Repository -Scope $Scope -Force -AllowClobber | Out-Null_x000D__x000A_        If ($Repository -ne "PSGallery")_x000D__x000A_        {_x000D__x000A_          # Remove Custom Repo_x000D__x000A_          Unregister-PSRepository -Name $Repository_x000D__x000A_        }_x000D__x000A_        $ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { ($PSItem.Version -eq $Version) -or ($Version -eq $ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_        If ([String]::IsNullOrEmpty($ChkInstalled.Version))_x000D__x000A_        {_x000D__x000A_          # Module Installed Failed_x000D__x000A_          [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install Failed" }_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          If ($NoImport.IsPresent)_x000D__x000A_          {_x000D__x000A_            [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install Succeeded" }_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            # Import Module_x000D__x000A_            Import-Module @IMParams_x000D__x000A_            # Verify Imported Module_x000D__x000A_            $ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_            If ($ChkImported.Version -eq $ChkInstalled.Version)_x000D__x000A_            {_x000D__x000A_              # Module Install / Import Succeeded_x000D__x000A_              [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install / Import Succeeded" }_x000D__x000A_            }_x000D__x000A_            Else_x000D__x000A_            {_x000D__x000A_              # Module Install / Import Failed_x000D__x000A_              [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install / Import Failed" }_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Module Install / Import Failed_x000D__x000A_        [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install / Import Not Installed" }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      If ($NoImport.IsPresent)_x000D__x000A_      {_x000D__x000A_        [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install Succeeded" }_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Import Module_x000D__x000A_        Import-Module @IMParams_x000D__x000A_        # Verify Imported Module_x000D__x000A_        $ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1_x000D__x000A_        If ($ChkImported.Version -eq $ChkInstalled.Version)_x000D__x000A_        {_x000D__x000A_          # Module Import Succeeded_x000D__x000A_          [PSCustomObject]@{ "Success" = $True; "Message" = "Module Import Succeeded" }_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          # Module Import Failed_x000D__x000A_          [PSCustomObject]@{ "Success" = $False; "Message" = "Module Import Failed" }_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    # Module Previously Imported_x000D__x000A_    If (($ChkInstalled.Version -eq $Version) -or ($Version -eq $ZeroVersion))_x000D__x000A_    {_x000D__x000A_      # Correct Module Version Imported_x000D__x000A_      [PSCustomObject]@{ "Success" = $True; "Message" = "Correct Version Previously Loaded" }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      # Wrong Module Version Imported_x000D__x000A_      [PSCustomObject]@{ "Success" = $False; "Message" = "Wrong Version Previously Loaded" }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Install-MyModule"_x000D__x000A_}_x000D__x000A_#endregion function Install-MyModule_x000D__x000A__x000D__x000A_#endregion ******** Functions Library ********_x000D__x000A__x000D__x000A_#region ******** Multiple Thread Functions ********_x000D__x000A__x000D__x000A_#region ******** Custom Objects MyRSPool / MyRSJob ********_x000D__x000A__x000D__x000A_$MyCode = @"_x000D__x000A_using System;_x000D__x000A_using System.Collections.Generic;_x000D__x000A_using System.Management.Automation;_x000D__x000A_using System.Threading;_x000D__x000A__x000D__x000A_public class MyRSJob_x000D__x000A_{_x000D__x000A_  private System.String _Name;_x000D__x000A_  private System.String _PoolName;_x000D__x000A_  private System.Guid _PoolID;_x000D__x000A_  private System.Management.Automation.PowerShell _PowerShell;_x000D__x000A_  private System.IAsyncResult _PowerShellAsyncResult;_x000D__x000A_  private System.Object _InputObject = null;_x000D__x000A__x000D__x000A_  public MyRSJob(System.String Name, System.Management.Automation.PowerShell PowerShell, System.IAsyncResult PowerShellAsyncResult, System.Object InputObject, System.String PoolName, System.Guid PoolID)_x000D__x000A_  {_x000D__x000A_    _Name = Name;_x000D__x000A_    _PoolName = PoolName;_x000D__x000A_    _PoolID = PoolID;_x000D__x000A_    _PowerShell = PowerShell;_x000D__x000A_    _PowerShellAsyncResult = PowerShellAsyncResult;_x000D__x000A_    _InputObject = InputObject;_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.String Name_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _Name;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Guid InstanceID_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.InstanceId;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.String PoolName_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PoolName;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Guid PoolID_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PoolID;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PowerShell PowerShell_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PSInvocationState State_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.InvocationStateInfo.State;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Exception Reason_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.InvocationStateInfo.Reason;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public bool HadErrors_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.HadErrors;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.String Command_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.Commands.Commands[0].ToString();_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.Runspaces.RunspacePool RunspacePool_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.RunspacePool;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.IAsyncResult PowerShellAsyncResult_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShellAsyncResult;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public bool IsCompleted_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShellAsyncResult.IsCompleted;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Object InputObject_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _InputObject;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PSDataCollection&lt;System.Management.Automation.DebugRecord&gt; Debug_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.Streams.Debug;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PSDataCollection&lt;System.Management.Automation.ErrorRecord&gt; Error_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.Streams.Error;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PSDataCollection&lt;System.Management.Automation.ProgressRecord&gt; Progress_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.Streams.Progress;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PSDataCollection&lt;System.Management.Automation.VerboseRecord&gt; Verbose_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.Streams.Verbose;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.PSDataCollection&lt;System.Management.Automation.WarningRecord&gt; Warning_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _PowerShell.Streams.Warning;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_public class MyRSPool_x000D__x000A_{_x000D__x000A_  private System.String _Name;  _x000D__x000A_  private System.Management.Automation.Runspaces.RunspacePool _RunspacePool;_x000D__x000A_  public System.Collections.Generic.List&lt;MyRSJob&gt; Jobs = new System.Collections.Generic.List&lt;MyRSJob&gt;();_x000D__x000A_  private System.Collections.Hashtable _SyncedHash;_x000D__x000A_  private System.Threading.Mutex _Mutex;  _x000D__x000A__x000D__x000A_  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash) _x000D__x000A_  {_x000D__x000A_    _Name = Name;_x000D__x000A_    _RunspacePool = RunspacePool;_x000D__x000A_    _SyncedHash = SyncedHash;_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash, System.String Mutex) _x000D__x000A_  {_x000D__x000A_    _Name = Name;_x000D__x000A_    _RunspacePool = RunspacePool;_x000D__x000A_    _SyncedHash = SyncedHash;_x000D__x000A_    _Mutex = new System.Threading.Mutex(false, Mutex);_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Collections.Hashtable SyncedHash_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _SyncedHash;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Threading.Mutex Mutex_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _Mutex;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.String Name_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _Name;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Guid InstanceID_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _RunspacePool.InstanceId;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.Runspaces.RunspacePool RunspacePool_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _RunspacePool;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  public System.Management.Automation.Runspaces.RunspacePoolState State_x000D__x000A_  {_x000D__x000A_    get_x000D__x000A_    {_x000D__x000A_      return _RunspacePool.RunspacePoolStateInfo.State;_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_"@_x000D__x000A_Add-Type -TypeDefinition $MyCode -Debug:$False_x000D__x000A__x000D__x000A_$Script:MyHiddenRSPool = [System.Collections.Generic.Dictionary[[String], [MyRSPool]]]::New()_x000D__x000A__x000D__x000A_#endregion ******** Custom Objects MyRSPool / MyRSJob ********_x000D__x000A__x000D__x000A_#region function Start-MyRSPool_x000D__x000A_function Start-MyRSPool()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates or Updates a RunspacePool_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RunspacePool_x000D__x000A_    .PARAMETER Functions_x000D__x000A_      Functions to include in the initial Session State_x000D__x000A_    .PARAMETER Variables_x000D__x000A_      Variables to include in the initial Session State_x000D__x000A_    .PARAMETER Modules_x000D__x000A_      Modules to load in the initial Session State_x000D__x000A_    .PARAMETER PSSnapins_x000D__x000A_      PSSnapins to load in the initial Session State_x000D__x000A_    .PARAMETER Hashtable_x000D__x000A_      Synced Hasttable to pass values between threads_x000D__x000A_    .PARAMETER Mutex_x000D__x000A_      Protects access to a shared resource_x000D__x000A_    .PARAMETER MaxJobs_x000D__x000A_      Maximum Number of Jobs_x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      Return the New RSPool to the Pipeline_x000D__x000A_    .EXAMPLE_x000D__x000A_      Start-MyRSPool_x000D__x000A__x000D__x000A_      Create the Default RunspacePool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSPool = Start-MyRSPool -PoolName $PoolName -MaxJobs $MaxJobs -PassThru_x000D__x000A__x000D__x000A_      Create a New RunspacePool and Return the RSPool to the Pipeline_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [Hashtable]$Functions,_x000D__x000A_    [Hashtable]$Variables,_x000D__x000A_    [String[]]$Modules,_x000D__x000A_    [String[]]$PSSnapins,_x000D__x000A_    [Hashtable]$Hashtable = @{ "Enabled" = $True },_x000D__x000A_    [String]$Mutex,_x000D__x000A_    [ValidateRange(1, 64)]_x000D__x000A_    [Int]$MaxJobs = 8,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Start-MyRSPool"_x000D__x000A__x000D__x000A_  # check if Runspace Pool already exists_x000D__x000A_  if ($Script:MyHiddenRSPool.ContainsKey($PoolName))_x000D__x000A_  {_x000D__x000A_    # Return Existing Runspace Pool_x000D__x000A_    [MyRSPool]($Script:MyHiddenRSPool[$PoolName])_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    # Create Default Session State_x000D__x000A_    $InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()_x000D__x000A__x000D__x000A_    # Import Modules_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Modules"))_x000D__x000A_    {_x000D__x000A_      [Void]$InitialSessionState.ImportPSModule($Modules)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Import PSSnapins_x000D__x000A_    if ($PSBoundParameters.ContainsKey("PSSnapins"))_x000D__x000A_    {_x000D__x000A_      [Void]$InitialSessionState.ImportPSSnapIn($PSSnapins, [Ref]$Null)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Add Common Functions_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Functions"))_x000D__x000A_    {_x000D__x000A_      ForEach ($Key in $Functions.Keys)_x000D__x000A_      {_x000D__x000A_        $InitialSessionState.Commands.Add(([System.Management.Automation.Runspaces.SessionStateFunctionEntry]::New($Key, $Functions[$Key])))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Add Default Variables_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Variables"))_x000D__x000A_    {_x000D__x000A_      ForEach ($Key in $Variables.Keys)_x000D__x000A_      {_x000D__x000A_        $InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New($Key, $Variables[$Key], "$Key = $($Variables[$Key])", ([System.Management.Automation.ScopedItemOptions]::AllScope))))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Create and Open RunSpacePool_x000D__x000A_    $SyncedHash = [Hashtable]::Synchronized($Hashtable)_x000D__x000A_    $InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New("SyncedHash", $SyncedHash, "SyncedHash = Synced Hashtable", ([System.Management.Automation.ScopedItemOptions]::AllScope))))_x000D__x000A_    if ($PSBoundParameters.ContainsKey("Mutex"))_x000D__x000A_    {_x000D__x000A_      $InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New("Mutex", $Mutex, "Mutex = $Mutex", ([System.Management.Automation.ScopedItemOptions]::AllScope))))_x000D__x000A_      $CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $MaxJobs, $InitialSessionState, $Host)_x000D__x000A_      $RSPool = [MyRSPool]::New($PoolName, $CreateRunspacePool, $SyncedHash, $Mutex)_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $MaxJobs, $InitialSessionState, $Host)_x000D__x000A_      $RSPool = [MyRSPool]::New($PoolName, $CreateRunspacePool, $SyncedHash)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $RSPool.RunspacePool.ApartmentState = "STA"_x000D__x000A_    #$RSPool.RunspacePool.ApartmentState = "MTA"_x000D__x000A_    $RSPool.RunspacePool.CleanupInterval = [TimeSpan]::FromMinutes(2)_x000D__x000A_    $RSPool.RunspacePool.Open()_x000D__x000A__x000D__x000A_    $Script:MyHiddenRSPool.Add($PoolName, $RSPool)_x000D__x000A__x000D__x000A_    if ($PassThru.IsPresent)_x000D__x000A_    {_x000D__x000A_      $RSPool_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Start-MyRSPool"_x000D__x000A_}_x000D__x000A_#endregion function Start-MyRSPool_x000D__x000A__x000D__x000A_#region function Get-MyRSPool_x000D__x000A_function Get-MyRSPool()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Get RunspacePools that match specified criteria_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Get RunspacePools that match specified criteria_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RSPool to search for_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      PoolID of Job to search for_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSPools = Get-MyRSPool_x000D__x000A__x000D__x000A_      Get all RSPools_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSPools = Get-MyRSPool -PoolName $PoolName_x000D__x000A__x000D__x000A_      $MyRSPools = Get-MyRSPool -PoolID $PoolID_x000D__x000A__x000D__x000A_      Get Specified RSPools_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "All")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolName")]_x000D__x000A_    [String[]]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "PoolID")]_x000D__x000A_    [Guid[]]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "All")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolID")]_x000D__x000A_    [ValidateSet("BeforeOpen", "Opening", "Opened", "Closed", "Closing", "Broken", "Disconnecting", "Disconnected", "Connecting")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSPool Begin Block"_x000D__x000A__x000D__x000A_    # Set Job State RegEx Pattern_x000D__x000A_    if ($PSBoundParameters.ContainsKey("State"))_x000D__x000A_    {_x000D__x000A_      $StatePattern = $State -join "|"_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $StatePattern = ".*"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSPool Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSPool Process Block"_x000D__x000A__x000D__x000A_    switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "All" {_x000D__x000A_        # Return Matching Pools_x000D__x000A_        [MyRSPool[]]($Script:MyHiddenRSPool.Values | Where-Object -FilterScript { $PSItem.State -match $StatePattern })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolName" {_x000D__x000A_        # Set Pool Name and Return Matching Pools_x000D__x000A_        $NamePattern = $PoolName -join "|"_x000D__x000A_        [MyRSPool[]]($Script:MyHiddenRSPool.Values | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.Name -match $NamePattern})_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolID" {_x000D__x000A_        # Set PoolID and Return Matching Pools_x000D__x000A_        $IDPattern = $PoolID -join "|"_x000D__x000A_        [MyRSPool[]]($Script:MyHiddenRSPool.Values | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.InstanceId -match $IDPattern })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSPool Process Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Get-MyRSPool_x000D__x000A__x000D__x000A_#region function Close-MyRSPool_x000D__x000A_function Close-MyRSPool()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Close RunspacePool and Stop all Running Jobs_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Close RunspacePool and Stop all Running Jobs_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to clsoe_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RSPool to close_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      PoolID of Job to close_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to close_x000D__x000A_    .EXAMPLE_x000D__x000A_      Close-MyRSPool_x000D__x000A__x000D__x000A_      Close the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      Close-MyRSPool -PoolName $PoolName_x000D__x000A__x000D__x000A_      Close-MyRSPool -PoolID $PoolID_x000D__x000A__x000D__x000A_      Close Specified RSPools_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "All")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSPool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolName")]_x000D__x000A_    [String[]]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolID")]_x000D__x000A_    [Guid[]]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "All")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolID")]_x000D__x000A_    [ValidateSet("BeforeOpen", "Opening", "Opened", "Closed", "Closing", "Broken", "Disconnecting", "Disconnected", "Connecting")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Close-MyRSPool Process Block"_x000D__x000A__x000D__x000A_    If ($PSCmdlet.ParameterSetName -eq "RSPool")_x000D__x000A_    {_x000D__x000A_      $TempPools = $RSPool_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempPools = [MyRSPool[]](Get-MyRSPool @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Close RunspacePools, This will Stop all Running Jobs_x000D__x000A_    ForEach ($TempPool in $TempPools)_x000D__x000A_    {_x000D__x000A_      if (-not [String]::IsNullOrEmpty($TempPool.Mutex))_x000D__x000A_      {_x000D__x000A_        $TempPool.Mutex.Close()_x000D__x000A_        $TempPool.Mutex.Dispose()_x000D__x000A_      }_x000D__x000A_      $TempPool.RunspacePool.Close()_x000D__x000A_      $TempPool.RunspacePool.Dispose()_x000D__x000A_      [Void]$Script:MyHiddenRSPool.Remove($TempPool.Name)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Close-MyRSPool Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Close-MyRSPool End Block"_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Close-MyRSPool End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Close-MyRSPool_x000D__x000A__x000D__x000A_#region function Start-MyRSJob_x000D__x000A_function Start-MyRSJob()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Creates or Updates a RunspacePool_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to add new RunspacePool Jobs to_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of RunspacePool_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of RunspacePool_x000D__x000A_    .PARAMETER InputObject_x000D__x000A_      Object / Value to pass to the RunspacePool Job ScriptBlock_x000D__x000A_    .PARAMETER InputParam_x000D__x000A_      Paramter to pass the Object / Value as_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of RunspacePool Jobs_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      RunspacePool Job ScriptBock to Execute_x000D__x000A_    .PARAMETER Parameters_x000D__x000A_      Common Paramaters to pass to the RunspacePool Job ScriptBlock_x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      Return the New Jobs to the Pipeline_x000D__x000A_    .EXAMPLE_x000D__x000A_      Start-MyRSJob -ScriptBlock $ScriptBlock -JobName $JobName -InputObject $InputObject_x000D__x000A__x000D__x000A_      Add new RSJobs to the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $InputObject | Start-MyRSJob -ScriptBlock $ScriptBlock -RSPool $RSPool -JobName $JobName_x000D__x000A__x000D__x000A_      $InputObject | Start-MyRSJob -ScriptBlock $ScriptBlock -PoolName $PoolName -JobName $JobName_x000D__x000A__x000D__x000A_      $InputObject | Start-MyRSJob -ScriptBlock $ScriptBlock -PoolID $PoolID -JobName $JobName_x000D__x000A__x000D__x000A_      Add new RSJobs to the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "PoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "RSPool")]_x000D__x000A_    [MyRSPool]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "PoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "PoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ValueFromPipeline = $True)]_x000D__x000A_    [Object[]]$InputObject,_x000D__x000A_    [String]$InputParam = "InputObject",_x000D__x000A_    [String]$JobName = "Job Name",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [ScriptBlock]$ScriptBlock,_x000D__x000A_    [Hashtable]$Parameters,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Start-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    Switch ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "RSPool" {_x000D__x000A_        # Set Pool_x000D__x000A_        $TempPool = $RSPool_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolName" {_x000D__x000A_        # Set Pool Name and Return Matching Pools_x000D__x000A_        $TempPool = [MyRSPool](Start-MyRSPool -PoolName $PoolName -PassThru)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolID" {_x000D__x000A_        # Set PoolID Return Matching Pools_x000D__x000A_        $TempPool = [MyRSPool](Get-MyRSPool -PoolID $PoolID)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for New Jobs_x000D__x000A_    $NewJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Start-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Start-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey("InputObject"))_x000D__x000A_    {_x000D__x000A_      ForEach ($Object in $InputObject)_x000D__x000A_      {_x000D__x000A_        # Create New PowerShell Instance with ScriptBlock_x000D__x000A_        $PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript($ScriptBlock)_x000D__x000A_        # Set RunspacePool_x000D__x000A_        $PowerShell.RunspacePool = $TempPool.RunspacePool_x000D__x000A_        # Add Parameters_x000D__x000A_        [Void]$PowerShell.AddParameter($InputParam, $Object)_x000D__x000A_        if ($PSBoundParameters.ContainsKey("Parameters"))_x000D__x000A_        {_x000D__x000A_          [Void]$PowerShell.AddParameters($Parameters)_x000D__x000A_        }_x000D__x000A_        # set Job Name_x000D__x000A_        if (($Object -is [String]) -or ($Object -is [ValueType]))_x000D__x000A_        {_x000D__x000A_          $TempJobName = "$JobName - $($Object)"_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $TempJobName = $($Object.$JobName)_x000D__x000A_        }_x000D__x000A_        [Void]$NewJobs.Add(([MyRSjob]::New($TempJobName, $PowerShell, $PowerShell.BeginInvoke(), $Object, $TempPool.Name, $TempPool.InstanceID)))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      # Create New PowerShell Instance with ScriptBlock_x000D__x000A_      $PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript($ScriptBlock)_x000D__x000A_      # Set RunspacePool_x000D__x000A_      $PowerShell.RunspacePool = $TempPool.RunspacePool_x000D__x000A_      # Add Parameters_x000D__x000A_      if ($PSBoundParameters.ContainsKey("Parameters"))_x000D__x000A_      {_x000D__x000A_        [Void]$PowerShell.AddParameters($Parameters)_x000D__x000A_      }_x000D__x000A_      [Void]$NewJobs.Add(([MyRSjob]::New($JobName, $PowerShell, $PowerShell.BeginInvoke(), $Null, $TempPool.Name, $TempPool.InstanceID)))_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Start-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Start-MyRSJob End Block"_x000D__x000A__x000D__x000A_    if ($NewJobs.Count)_x000D__x000A_    {_x000D__x000A_      $TempPool.Jobs.AddRange($NewJobs)_x000D__x000A_      # Return Jobs only if New RunspacePool_x000D__x000A_      if ($PassThru.IsPresent)_x000D__x000A_      {_x000D__x000A_        [MyRSJob[]]($NewJobs)_x000D__x000A_      }_x000D__x000A_      $NewJobs.Clear()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Start-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Start-MyRSJob_x000D__x000A__x000D__x000A_#region function Get-MyRSJob_x000D__x000A_function Get-MyRSJob()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Get Jobs from RunspacePool that match specified criteria_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Get Jobs from RunspacePool that match specified criteria_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of Pool to Get Jobs From_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of Pool to Get Jobs From_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of Jobs to Get_x000D__x000A_    .PARAMETER JobID_x000D__x000A_      ID of Jobs to Get_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Get-MyRSJob_x000D__x000A__x000D__x000A_      Get RSJobs from the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Get-MyRSJob -RSPool $RSPool_x000D__x000A__x000D__x000A_      $MyRSJobs = Get-MyRSJob -PoolName $PoolName_x000D__x000A__x000D__x000A_      $MyRSJobs = Get-MyRSJob -PoolID $PoolID_x000D__x000A__x000D__x000A_      Get RSJobs from the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Set Job State RegEx Pattern_x000D__x000A_    if ($PSBoundParameters.ContainsKey("State"))_x000D__x000A_    {_x000D__x000A_      $StatePattern = $State -join "|"_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $StatePattern = ".*"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Switch -regex ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "Pool$" {_x000D__x000A_        # Set Pool_x000D__x000A_        $TempPools = $RSPool_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolName$" {_x000D__x000A_        # Set Pool Name and Return Matching Pools_x000D__x000A_        $TempPools = [MyRSPool[]](Get-MyRSPool -PoolName $PoolName)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "PoolID$" {_x000D__x000A_        # Set PoolID Return Matching Pools_x000D__x000A_        $TempPools = [MyRSPool[]](Get-MyRSPool -PoolID $PoolID)_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Get-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    Switch -regex ($PSCmdlet.ParameterSetName)_x000D__x000A_    {_x000D__x000A_      "^JobName" {_x000D__x000A_        # Set Job Name RegEx Pattern and Return Matching Jobs_x000D__x000A_        $NamePattern = $JobName -join "|"_x000D__x000A_        [MyRSJob[]]($TempPools | ForEach-Object -Process { $PSItem.Jobs | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.Name -match $NamePattern } })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_      "^JobID" {_x000D__x000A_        # Set Job ID RegEx Pattern and Return Matching Jobs_x000D__x000A_        $IDPattern = $JobID -join "|"_x000D__x000A_        [MyRSJob[]]($TempPools | ForEach-Object -Process { $PSItem.Jobs | Where-Object -FilterScript { $PSItem.State -match $StatePattern -and $PSItem.InstanceId -match $IDPattern } })_x000D__x000A_        Break;_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Get-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Get-MyRSJob_x000D__x000A__x000D__x000A_#region function Wait-MyRSJob_x000D__x000A_function Wait-MyRSJob()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Wait for RSJob to Finish_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Wait for RSJob to Finish_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of Pool to Get Jobs From_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of Pool to Get Jobs From_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of Jobs to Get_x000D__x000A_    .PARAMETER JobID_x000D__x000A_      ID of Jobs to Get_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      ScriptBlock to invoke while waiting_x000D__x000A__x000D__x000A_      For windows Forms scripts add the DoEvents method in to the Wait ScritpBlock_x000D__x000A__x000D__x000A_      [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      [System.Threading.Thread]::Sleep(250)_x000D__x000A_    .PARAMETER Wait_x000D__x000A_      TimeSpace to wait_x000D__x000A_    .PARAMETER NoWait_x000D__x000A_      No Wait, Return when any Job states changes to Stopped, Completed, or Failed_x000D__x000A_    .PARAMETER PassThru_x000D__x000A_      Return the New Jobs to the Pipeline_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Wait-MyRSJob -PassThru_x000D__x000A__x000D__x000A_      Wait for and Get RSJobs from the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyRSJobs = Wait-MyRSJob -RSPool $RSPool -PassThru_x000D__x000A__x000D__x000A_      $MyRSJobs = Wait-MyRSJob -PoolName $PoolName -PassThru_x000D__x000A__x000D__x000A_      $MyRSJobs = Wait-MyRSJob -PoolID $PoolID -PassThru_x000D__x000A__x000D__x000A_      Wait for and Get RSJobs from the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State,_x000D__x000A_    [ScriptBlock]$SciptBlock = { [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 },_x000D__x000A_    [UInt16]$Wait = 60,_x000D__x000A_    [Switch]$NoWait,_x000D__x000A_    [Switch]$PassThru_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Wait-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Remove Invalid Get-MyRSJob Parameters_x000D__x000A_    if ($PSCmdlet.ParameterSetName -ne "RSJob")_x000D__x000A_    {_x000D__x000A_      if ($PSBoundParameters.ContainsKey("PassThru"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("PassThru")_x000D__x000A_      }_x000D__x000A_      if ($PSBoundParameters.ContainsKey("Wait"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("Wait")_x000D__x000A_      }_x000D__x000A_      if ($PSBoundParameters.ContainsKey("NoWait"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("NoWait")_x000D__x000A_      }_x000D__x000A_      if ($PSBoundParameters.ContainsKey("ScriptBlock"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("ScriptBlock")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for Wait Jobs_x000D__x000A_    $WaitJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Wait-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Wait-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $WaitJobs.AddRange([MyRSJob[]]($RSJob))_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $WaitJobs.AddRange([MyRSJob[]](Get-MyRSJob @PSBoundParameters))_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Wait-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Wait-MyRSJob End Block"_x000D__x000A__x000D__x000A_    # Wait for Jobs to be Finshed_x000D__x000A_    if ($NoWait.IsPresent)_x000D__x000A_    {_x000D__x000A_      While (@(($WaitJobs | Where-Object -FilterScript { $PSItem.State -notmatch "Stopped|Completed|Failed" })).Count -eq $WaitJobs.Count)_x000D__x000A_      {_x000D__x000A_        $SciptBlock.Invoke()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Object[]]$CheckJobs = $WaitJobs.ToArray()_x000D__x000A_      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_      While (@(($CheckJobs = $CheckJobs | Where-Object -FilterScript { $PSItem.State -notmatch "Stopped|Completed|Failed" })).Count -and (($StopWatch.TotalSeconds -le $Wait) -or ($Wait -eq 0)))_x000D__x000A_      {_x000D__x000A_        $SciptBlock.Invoke()_x000D__x000A_      }_x000D__x000A_      $StopWatch.Stop()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    if ($PassThru.IsPresent)_x000D__x000A_    {_x000D__x000A_      # Return Completed Jobs_x000D__x000A_      [MyRSJob[]]($WaitJobs | Where-Object -FilterScript { $PSItem.State -match "Stopped|Completed|Failed" })_x000D__x000A_    }_x000D__x000A_    $WaitJobs.Clear()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Wait-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Wait-MyRSJob_x000D__x000A__x000D__x000A_#region function Stop-MyRSJob_x000D__x000A_function Stop-MyRSJob()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER Name_x000D__x000A_      Name of Job to search for_x000D__x000A_    .PARAMETER InstanceId_x000D__x000A_      InstanceId of Job to search for_x000D__x000A_    .PARAMETER RSJob_x000D__x000A_      RunspacePool Jobs to Process_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .EXAMPLE_x000D__x000A_      Stop-MyRSJob_x000D__x000A__x000D__x000A_      Stop all RSJobs in the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      Stop-MyRSJob -RSPool $RSPool_x000D__x000A__x000D__x000A_      Stop-MyRSJob -PoolName $PoolName_x000D__x000A__x000D__x000A_      Stop-MyRSJob -PoolID $PoolID_x000D__x000A__x000D__x000A_      Stop all RSJobs in the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State_x000D__x000A_  )_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Stop-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $TempJobs = $RSJob_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Stop all Jobs that have not Finished_x000D__x000A_    ForEach ($TempJob in $TempJobs)_x000D__x000A_    {_x000D__x000A_      if ($TempJob.State -notmatch "Stopped|Completed|Failed")_x000D__x000A_      {_x000D__x000A_        $TempJob.PowerShell.Stop()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Stop-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Stop-MyRSJob End Block"_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Stop-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Stop-MyRSJob_x000D__x000A__x000D__x000A_#region function Receive-MyRSJob_x000D__x000A_function Receive-MyRSJob()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Receive Output from Completed Jobs_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Receive Output from Completed Jobs_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER PoolName_x000D__x000A_      Name of Pool to Get Jobs From_x000D__x000A_    .PARAMETER PoolID_x000D__x000A_      ID of Pool to Get Jobs From_x000D__x000A_    .PARAMETER JobName_x000D__x000A_      Name of Jobs to Get_x000D__x000A_    .PARAMETER JobID_x000D__x000A_      ID of Jobs to Get_x000D__x000A_    .PARAMETER RSJob_x000D__x000A_      Jobs to Process_x000D__x000A_    .PARAMETER AutoRemove_x000D__x000A_      Remove Jobs after Receiving Output_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyResults = Receive-MyRSJob -AutoRemove_x000D__x000A__x000D__x000A_      Receive Results from RSJobs in the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      $MyResults = Receive-MyRSJob -RSPool $RSPool -AutoRemove_x000D__x000A__x000D__x000A_      $MyResults = Receive-MyRSJob -PoolName $PoolName -AutoRemove_x000D__x000A__x000D__x000A_      $MyResults = Receive-MyRSJob -PoolID $PoolID -AutoRemove_x000D__x000A__x000D__x000A_      Receive Results from RSJobs in the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [Switch]$AutoRemove,_x000D__x000A_    [Switch]$Force_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Receive-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Remove Invalid Get-MyRSJob Parameters_x000D__x000A_    if ($PSCmdlet.ParameterSetName -ne "RSJob")_x000D__x000A_    {_x000D__x000A_      if ($PSBoundParameters.ContainsKey("AutoRemove"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("AutoRemove")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for Remove Jobs_x000D__x000A_    $RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Receive-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Receive-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $TempJobs = $RSJob_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void]$PSBoundParameters.Add("State", "Completed")_x000D__x000A_      $TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Receive all Complted Jobs, Remove Job if Required_x000D__x000A_    ForEach ($TempJob in $TempJobs)_x000D__x000A_    {_x000D__x000A_      if ($TempJob.IsCompleted)_x000D__x000A_      {_x000D__x000A_        Try_x000D__x000A_        {_x000D__x000A_          $TempJob.PowerShell.EndInvoke($TempJob.PowerShellAsyncResult)_x000D__x000A_          # Add Job to Remove List_x000D__x000A_          [Void]$RemoveJobs.Add($TempJob)_x000D__x000A_        }_x000D__x000A_        Catch_x000D__x000A_        {_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Receive-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Receive-MyRSJob End Block"_x000D__x000A__x000D__x000A_    if ($AutoRemove.IsPresent)_x000D__x000A_    {_x000D__x000A_      # Remove RSJobs_x000D__x000A_      foreach ($RemoveJob in $RemoveJobs)_x000D__x000A_      {_x000D__x000A_        $RemoveJob.PowerShell.Dispose()_x000D__x000A_        [Void]$Script:MyHiddenRSPool[$RemoveJob.PoolName].Jobs.Remove($RemoveJob)_x000D__x000A_      }_x000D__x000A_      $RemoveJobs.Clear()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Receive-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Receive-MyRSJob_x000D__x000A__x000D__x000A_#region function Remove-MyRSJob_x000D__x000A_function Remove-MyRSJob()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Function to do something specific_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Function to do something specific_x000D__x000A_    .PARAMETER RSPool_x000D__x000A_      RunspacePool to search_x000D__x000A_    .PARAMETER Name_x000D__x000A_      Name of Job to search for_x000D__x000A_    .PARAMETER InstanceId_x000D__x000A_      InstanceId of Job to search for_x000D__x000A_    .PARAMETER RSJob_x000D__x000A_      RunspacePool Jobs to Process_x000D__x000A_    .PARAMETER State_x000D__x000A_      State of Jobs to search for_x000D__x000A_    .PARAMETER Force_x000D__x000A_      Force the Job to stop_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyRSJob_x000D__x000A__x000D__x000A_      Remove all RSJobs in the Default RSPool_x000D__x000A_    .EXAMPLE_x000D__x000A_      Remove-MyRSJob -RSPool $RSPool_x000D__x000A__x000D__x000A_      Remove-MyRSJob -PoolName $PoolName_x000D__x000A__x000D__x000A_      Remove-MyRSJob -PoolID $PoolID_x000D__x000A__x000D__x000A_      Remove all RSJobs in the Specified RSPool_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017 at 06:53 AM_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019 at 06:53 AM_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "JobNamePoolName")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePool")]_x000D__x000A_    [MyRSPool[]]$RSPool,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [String]$PoolName = "MyDefaultRSPool",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [Guid]$PoolID,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [String[]]$JobName = ".*",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [Guid[]]$JobID,_x000D__x000A_    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "RSJob")]_x000D__x000A_    [MyRSJob[]]$RSJob,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobNamePoolID")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPool")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolName")]_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "JobIDPoolID")]_x000D__x000A_    [ValidateSet("NotStarted", "Running", "Stopping", "Stopped", "Completed", "Failed", "Disconnected")]_x000D__x000A_    [String[]]$State,_x000D__x000A_    [Switch]$Force_x000D__x000A_  )_x000D__x000A_  Begin_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-MyRSJob Begin Block"_x000D__x000A__x000D__x000A_    # Remove Invalid Get-MyRSJob Parameters_x000D__x000A_    if ($PSCmdlet.ParameterSetName -ne "RSJob")_x000D__x000A_    {_x000D__x000A_      if ($PSBoundParameters.ContainsKey("Force"))_x000D__x000A_      {_x000D__x000A_        [Void]$PSBoundParameters.Remove("Force")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # List for Remove Jobs_x000D__x000A_    $RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-MyRSJob Begin Block"_x000D__x000A_  }_x000D__x000A_  Process_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-MyRSJob Process Block"_x000D__x000A__x000D__x000A_    # Add Passed RSJobs to $Jobs_x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq "RSJob")_x000D__x000A_    {_x000D__x000A_      $TempJobs = $RSJob_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Remove all Jobs, Stop all Running if Forced_x000D__x000A_    ForEach ($TempJob in $TempJobs)_x000D__x000A_    {_x000D__x000A_      if ($Force -and $TempJob.State -notmatch "Stopped|Completed|Failed")_x000D__x000A_      {_x000D__x000A_        $TempJob.PowerShell.Stop()_x000D__x000A_      }_x000D__x000A_      if ($TempJob.State -match "Stopped|Completed|Failed")_x000D__x000A_      {_x000D__x000A_        # Add Job to Remove List_x000D__x000A_        [Void]$RemoveJobs.Add($TempJob)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-MyRSJob Process Block"_x000D__x000A_  }_x000D__x000A_  End_x000D__x000A_  {_x000D__x000A_    Write-Verbose -Message "Enter Function Remove-MyRSJob End Block"_x000D__x000A__x000D__x000A_    # Remove RSJobs_x000D__x000A_    foreach ($RemoveJob in $RemoveJobs)_x000D__x000A_    {_x000D__x000A_      $RemoveJob.PowerShell.Dispose()_x000D__x000A_      [Void]$Script:MyHiddenRSPool[$RemoveJob.PoolName].Jobs.Remove($RemoveJob)_x000D__x000A_    }_x000D__x000A_    $RemoveJobs.Clear()_x000D__x000A__x000D__x000A_    # Garbage Collect, Recover Resources_x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Function Remove-MyRSJob End Block"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion function Remove-MyRSJob_x000D__x000A__x000D__x000A_#region ******** RSPools Sample Code ********_x000D__x000A__x000D__x000A_#region function Test-Function_x000D__x000A_Function Test-Function_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Test Function for RunspacePool ScriptBlock_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Test Function for RunspacePool ScriptBlock_x000D__x000A_    .PARAMETER Value_x000D__x000A_      Value Command Line Parameter_x000D__x000A_    .EXAMPLE_x000D__x000A_      Test-Function -Value "String"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $False, HelpMessage = "Enter Value", ParameterSetName = "Default")]_x000D__x000A_    [Object[]]$Value = "Default Value"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Test-Function"_x000D__x000A__x000D__x000A_  Start-Sleep -Milliseconds (1000 * 5)_x000D__x000A_  ForEach ($Item in $Value)_x000D__x000A_  {_x000D__x000A_    "Return Value: `$Item = $Item"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Test-Function"_x000D__x000A_}_x000D__x000A_#endregion function Test-Function_x000D__x000A__x000D__x000A_#region Job $ScriptBlock_x000D__x000A_$ScriptBlock = {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Test RunspacePool ScriptBlock_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Test RunspacePool ScriptBlock_x000D__x000A_    .PARAMETER InputObject_x000D__x000A_      InputObject passed to script_x000D__x000A_    .EXAMPLE_x000D__x000A_      Test-Script.ps1 -InputObject $InputObject_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet on 10/15/2017_x000D__x000A_      Updated Script By Ken Sweet on 02/04/2019_x000D__x000A__x000D__x000A_      Thread Script Variables_x000D__x000A_        [String]$Mutex - Exist only if -Mutex was specified on the Start-MyRSPool command line_x000D__x000A_        [HashTable]$SyncedHash - Always Exists, Default values $SyncedHash.Enabled = $True_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "ByValue")]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "ByValue")]_x000D__x000A_    [Object[]]$InputObject_x000D__x000A_  )_x000D__x000A__x000D__x000A_  # Generate Error Message to show in Error Buffer_x000D__x000A_  $ErrorActionPreference = "Continue"_x000D__x000A_  GenerateErrorMessage_x000D__x000A_  $ErrorActionPreference = "Stop"_x000D__x000A__x000D__x000A_  # Enable Verbose logging_x000D__x000A_  $VerbosePreference = "Continue"_x000D__x000A__x000D__x000A_  # Check is Thread is Enabled to Run_x000D__x000A_  if ($SyncedHash.Enabled)_x000D__x000A_  {_x000D__x000A_    # Call Imported Test Function_x000D__x000A_    Test-Function -Value $InputObject_x000D__x000A__x000D__x000A_    # Check if a Mutex exist_x000D__x000A_    if ([String]::IsNullOrEmpty($Mutex))_x000D__x000A_    {_x000D__x000A_      $HasMutex = $False_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      # Open and wait for Mutex_x000D__x000A_      $MyMutex = [System.Threading.Mutex]::OpenExisting($Mutex)_x000D__x000A_      [Void]($MyMutex.WaitOne())_x000D__x000A_      $HasMutex = $True_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Write Data to the Screen_x000D__x000A_    For ($Count = 0; $Count -le 8; $Count++)_x000D__x000A_    {_x000D__x000A_      Write-Host -Object "`$InputObject = $InputObject"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Release the Mutex if it Exists_x000D__x000A_    if ($HasMutex)_x000D__x000A_    {_x000D__x000A_      $MyMutex.ReleaseMutex()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    "Return Value: RSJob was Canceled"_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion_x000D__x000A__x000D__x000A_#region $WaitScript_x000D__x000A_$WaitScript = {_x000D__x000A_  Write-Host -Object "Completed $(@(Get-MyRSJob | Where-Object -FilterScript { $PSItem.State -eq 'Completed' }).Count) Jobs"_x000D__x000A_  Start-Sleep -Milliseconds 1000_x000D__x000A_}_x000D__x000A_#endregion_x000D__x000A__x000D__x000A_&lt;#_x000D__x000A_$TestFunction = @{}_x000D__x000A_$TestFunction.Add("Test-Function", (Get-Command -Type Function -Name Test-Function).ScriptBlock)_x000D__x000A__x000D__x000A_# Start and Get RSPool_x000D__x000A_$RSPool = Start-MyRSPool -MaxJobs 8 -Functions $TestFunction -PassThru #-Mutex "TestMutex"_x000D__x000A__x000D__x000A_# Create new RunspacePool and start 5 Jobs_x000D__x000A_1..10 | Start-MyRSJob -ScriptBlock $ScriptBlock -PassThru | Out-String_x000D__x000A__x000D__x000A_# Add 5 new Jobs to an existing RunspacePool_x000D__x000A_11..20 | Start-MyRSJob -ScriptBlock $ScriptBlock -PassThru | Out-String_x000D__x000A__x000D__x000A_# Disable Thread Script_x000D__x000A_#$RSPool.SyncedHash.Enabled = $False_x000D__x000A__x000D__x000A_# Wait for all Jobs to Complete or Fail_x000D__x000A_Get-MyRSJob | Wait-MyRSJob -SciptBlock $WaitScript -PassThru | Out-String_x000D__x000A__x000D__x000A_# Receive Completed Jobs and Remove them_x000D__x000A_Get-MyRSJob | Receive-MyRSJob -AutoRemove_x000D__x000A__x000D__x000A_# Close RunspacePool_x000D__x000A_Close-MyRSPool_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_#endregion ******** RSPools Sample Code ********_x000D__x000A__x000D__x000A_#endregion ******** Multiple Thread Functions ********_x000D__x000A__x000D__x000A_#region ******** PIL Common Dialogs ********_x000D__x000A__x000D__x000A_# --------------------------_x000D__x000A_# Show ChangeLog Function_x000D__x000A_# --------------------------_x000D__x000A_#region function Show-ChangeLog_x000D__x000A_Function Show-ChangeLog ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-ChangeLog_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-ChangeLog_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-ChangeLog Dialog Window_x000D__x000A_    .PARAMETER ChangeText_x000D__x000A_      Change Log Text_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Show-ChangeLog Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Show-ChangeLog Dialog Window_x000D__x000A_    .EXAMPLE_x000D__x000A_      $TmpContent = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()_x000D__x000A_      $CLogStart = ($TmpContent.IndexOf("&lt;") + 3)_x000D__x000A_      $CLogEnd = ($TmpContent.IndexOf("&gt;") - 1)_x000D__x000A_      Show-ChangeLog -ChangeText ($TmpContent.SubString($CLogStart, ($CLogEnd - $CLogStart)))_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "Change Log - $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$ChangeText,_x000D__x000A_    [Int]$Width = 60,_x000D__x000A_    [Int]$Height = 30_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-ChangeLog"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ChangeLog **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ChangeLog Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ChangeLogForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ChangeLogForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ChangeLogForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ChangeLogForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ChangeLogForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ChangeLogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ChangeLogForm.Icon = $PILForm.Icon_x000D__x000A_  $ChangeLogForm.KeyPreview = $True_x000D__x000A_  $ChangeLogForm.MaximizeBox = $False_x000D__x000A_  $ChangeLogForm.MinimizeBox = $False_x000D__x000A_  $ChangeLogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ChangeLogForm.Name = "ChangeLogForm"_x000D__x000A_  $ChangeLogForm.Owner = $PILForm_x000D__x000A_  $ChangeLogForm.ShowInTaskbar = $False_x000D__x000A_  $ChangeLogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ChangeLogForm.Tag = $False_x000D__x000A_  $ChangeLogForm.Text = $Title_x000D__x000A_  #endregion $ChangeLogForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ChangeLogFormKeyDown ********_x000D__x000A_  Function Start-ChangeLogFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the ChangeLog Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the ChangeLog Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ChangeLogFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ChangeLogForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $ChangeLogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ChangeLogForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ChangeLogFormKeyDown ********_x000D__x000A_  $ChangeLogForm.add_KeyDown({ Start-ChangeLogFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ChangeLogFormShown ********_x000D__x000A_  Function Start-ChangeLogFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_     .SYNOPSIS_x000D__x000A_       Shown Event for the ChangeLog Form Control_x000D__x000A_     .DESCRIPTION_x000D__x000A_       Shown Event for the ChangeLog Form Control_x000D__x000A_     .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_     .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ChangeLogFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ChangeLogForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    $ChangeLogTextBox.AppendText($ChangeText)_x000D__x000A__x000D__x000A_    $ChangeLogTextBox.SelectionLength = 0_x000D__x000A_    $ChangeLogTextBox.SelectionStart = 0_x000D__x000A_    $ChangeLogTextBox.ScrollToCaret()_x000D__x000A_    $Sender.Refresh()_x000D__x000A_    $Sender.Activate()_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ChangeLogForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ChangeLogFormShown ********_x000D__x000A_  $ChangeLogForm.add_Shown({ Start-ChangeLogFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ChangeLog Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ChangeLog Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ChangeLogPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogForm.Controls.Add($ChangeLogPanel)_x000D__x000A_  $ChangeLogPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ChangeLogPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ChangeLogPanel.Name = "ChangeLogPanel"_x000D__x000A_  #endregion $ChangeLogPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ChangeLogPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $ChangeLogPanel.Controls.Add($ChangeLogTextBox)_x000D__x000A_  $ChangeLogTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $ChangeLogTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ChangeLogTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $ChangeLogTextBox.Font = [System.Drawing.Font]::New("Courier New", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)_x000D__x000A_  $ChangeLogTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ChangeLogTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ChangeLogTextBox.MaxLength = [Int]::MaxValue_x000D__x000A_  $ChangeLogTextBox.Multiline = $True_x000D__x000A_  $ChangeLogTextBox.Name = "ChangeLogTextBox"_x000D__x000A_  $ChangeLogTextBox.ReadOnly = $True_x000D__x000A_  $ChangeLogTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both_x000D__x000A_  $ChangeLogTextBox.Size = [System.Drawing.Size]::New(($ChangeLogPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ChangeLogPanel.ClientSize.Height - ($ChangeLogTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $ChangeLogTextBox.TabStop = $False_x000D__x000A_  $ChangeLogTextBox.Text = $Null_x000D__x000A_  $ChangeLogTextBox.WordWrap = $False_x000D__x000A_  #endregion $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_  #endregion ******** $ChangeLogPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ChangeLogBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ChangeLogForm.Controls.Add($ChangeLogBtmPanel)_x000D__x000A_  $ChangeLogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ChangeLogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ChangeLogBtmPanel.Name = "ChangeLogBtmPanel"_x000D__x000A_  #endregion $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ChangeLogBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ChangeLogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ChangeLogBtmPanel.Controls.Add($ChangeLogBtmMidButton)_x000D__x000A_  $ChangeLogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ChangeLogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ChangeLogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ChangeLogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $ChangeLogBtmMidButton.Enabled = $True_x000D__x000A_  $ChangeLogBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ChangeLogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ChangeLogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), 0)_x000D__x000A_  $ChangeLogBtmMidButton.Name = "ChangeLogBtmMidButton"_x000D__x000A_  $ChangeLogBtmMidButton.TabStop = $True_x000D__x000A_  $ChangeLogBtmMidButton.Text = "&amp;Ok"_x000D__x000A_  $ChangeLogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ChangeLogBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  $ChangeLogBtmPanel.ClientSize = [System.Drawing.Size]::New(($ChangeLogTextBox.Right + [MyConfig]::FormSpacer), (($ChangeLogBtmPanel.Controls[$ChangeLogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ChangeLogBtmPanel Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ChangeLog Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** Show-ChangeLog **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ChangeLogForm.ShowDialog($PILForm)_x000D__x000A_  $ChangeLogForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-ChangeLog"_x000D__x000A_}_x000D__x000A_#endregion function Show-ChangeLog_x000D__x000A__x000D__x000A_# --------------------------_x000D__x000A_# Show AlertMessage Function_x000D__x000A_# --------------------------_x000D__x000A_#region function Show-AlertMessage_x000D__x000A_Function Show-AlertMessage ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-AlertMessage_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-AlertMessage_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-AlertMessage Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Alert Message to Display_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Show-AlertMessage Dialog Window_x000D__x000A_    .PARAMETER MsgType_x000D__x000A_      Type of Alert Message to SHow_x000D__x000A_    .EXAMPLE_x000D__x000A_      Show-AlertMessage -Title "Example Alert" -Message "Show Success, Warning, Error, and Information Alert Messages"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Title,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [ValidateSet("Success", "Warning", "Error", "Info")]_x000D__x000A_    [String]$MsgType = "Info"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-AlertMessage"_x000D__x000A__x000D__x000A_  #region ******** Begin **** $AlertMessage **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $AlertMessage Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $AlertMessageForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $AlertMessageForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $AlertMessageForm.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $AlertMessageForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $AlertMessageForm.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $AlertMessageForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A__x000D__x000A_  switch ($MsgType)_x000D__x000A_  {_x000D__x000A_    "Success"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Shield_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Warning"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Warning_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Error"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Error_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Info"_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Information_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $AlertMessageForm.KeyPreview = $True_x000D__x000A_  $AlertMessageForm.MaximizeBox = $False_x000D__x000A_  $AlertMessageForm.MinimizeBox = $False_x000D__x000A_  $AlertMessageForm.Name = "AlertMessageForm"_x000D__x000A_  $AlertMessageForm.Owner = $PILForm_x000D__x000A_  $AlertMessageForm.ShowInTaskbar = $False_x000D__x000A_  $AlertMessageForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))_x000D__x000A_  $AlertMessageForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $AlertMessageForm.Tag = @{ "Cancel" = $False; "Pause" = $False }_x000D__x000A_  $AlertMessageForm.Text = $Title_x000D__x000A_  #endregion $AlertMessageForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-AlertMessageFormKeyDown ********_x000D__x000A_  Function Start-AlertMessageFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the AlertMessage Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the AlertMessage Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-AlertMessageFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$AlertMessageForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $AlertMessageForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$AlertMessageForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-AlertMessageFormKeyDown ********_x000D__x000A_  $AlertMessageForm.add_KeyDown({ Start-AlertMessageFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-AlertMessageFormShown ********_x000D__x000A_  Function Start-AlertMessageFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $AlertMessage Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $AlertMessage Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-AlertMessageFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$AlertMessageForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$AlertMessageForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-AlertMessageFormShown ********_x000D__x000A_  $AlertMessageForm.add_Shown({ Start-AlertMessageFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for $AlertMessage Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $AlertMessage Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $AlertMessagePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessagePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessageForm.Controls.Add($AlertMessagePanel)_x000D__x000A_  $AlertMessagePanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $AlertMessagePanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $AlertMessagePanel.Name = "AlertMessagePanel"_x000D__x000A_  $AlertMessagePanel.Size = [System.Drawing.Size]::New(($AlertMessageForm.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($AlertMessageForm.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  #endregion $AlertMessagePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $AlertMessagePanel Controls ********_x000D__x000A__x000D__x000A_  #region $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessagePanel.Controls.Add($AlertMessageTopLabel)_x000D__x000A_  $AlertMessageTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A__x000D__x000A_  Switch ($MsgType)_x000D__x000A_  {_x000D__x000A_    "Info"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextInfo_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Success"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextGood_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Warning"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextWarn_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Error"_x000D__x000A_    {_x000D__x000A_      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextBad_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $AlertMessageTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $AlertMessageTopLabel.Font = [MyConfig]::Font.Title_x000D__x000A_  $AlertMessageTopLabel.ForeColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $AlertMessageTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $AlertMessageTopLabel.Name = "AlertMessageTopLabel"_x000D__x000A_  $AlertMessageTopLabel.Size = [System.Drawing.Size]::New(($AlertMessagePanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $AlertMessageTopLabel.PreferredHeight)_x000D__x000A_  $AlertMessageTopLabel.Text = $Title_x000D__x000A_  $AlertMessageTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  #endregion $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  #region $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $AlertMessagePanel.Controls.Add($AlertMessageBtmLabel)_x000D__x000A_  $AlertMessageBtmLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $AlertMessageBtmLabel.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $AlertMessageBtmLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $AlertMessageBtmLabel.Font = [MyConfig]::Font.Bold_x000D__x000A_  $AlertMessageBtmLabel.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $AlertMessageBtmLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($AlertMessageTopLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  $AlertMessageBtmLabel.Name = "AlertMessageBtmLabel"_x000D__x000A_  $AlertMessageBtmLabel.Size = [System.Drawing.Size]::New($AlertMessageTopLabel.Width, ($AlertMessageTopLabel.Width - ($AlertMessageBtmLabel.Top * 3)))_x000D__x000A_  $AlertMessageBtmLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  $AlertMessageBtmLabel.Text = $Message_x000D__x000A_  #endregion $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  $AlertMessagePanel.ClientSize = [System.Drawing.Size]::New($AlertMessagePanel.ClientSize.Width, ($AlertMessageBtmLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $AlertMessagePanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  # ************************************************_x000D__x000A_  # $AlertMessageBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $AlertMessageForm.Controls.Add($AlertMessageBtmPanel)_x000D__x000A_  $AlertMessageBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $AlertMessageBtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $AlertMessagePanel.Bottom)_x000D__x000A_  $AlertMessageBtmPanel.Name = "AlertMessageBtmPanel"_x000D__x000A_  #endregion $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $AlertMessageBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($AlertMessageBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $AlertMessageBtmPanel.Controls.Add($AlertMessageBtmMidButton)_x000D__x000A_  $AlertMessageBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $AlertMessageBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $AlertMessageBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $AlertMessageBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $AlertMessageBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $AlertMessageBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $AlertMessageBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_  $AlertMessageBtmMidButton.Name = "AlertMessageBtmMidButton"_x000D__x000A_  $AlertMessageBtmMidButton.TabStop = $True_x000D__x000A_  $AlertMessageBtmMidButton.Text = "OK"_x000D__x000A_  $AlertMessageBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $AlertMessageBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  $AlertMessageBtmPanel.ClientSize = [System.Drawing.Size]::New($AlertMessagePanel.ClientSize.Width, (($AlertMessageBtmPanel.Controls[$AlertMessageBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $AlertMessageBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $AlertMessageForm.ClientSize = [System.Drawing.Size]::New($AlertMessageForm.ClientSize.Width, $AlertMessageBtmPanel.Bottom)_x000D__x000A__x000D__x000A_  #endregion ******** Controls for $AlertMessage Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** $Show-AlertMessage **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $AlertMessageForm.ShowDialog($PILForm)_x000D__x000A_  $AlertMessageForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-AlertMessage"_x000D__x000A_}_x000D__x000A_#endregion function Show-AlertMessage_x000D__x000A__x000D__x000A_# --------------------------_x000D__x000A_# Get UserResponse Function_x000D__x000A_# --------------------------_x000D__x000A_#region UserResponse Result Class_x000D__x000A_Class UserResponse_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  _x000D__x000A_  UserResponse ([Bool]$Success, [Object]$DialogResult)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion UserResponse Result Class_x000D__x000A__x000D__x000A_#region function Get-UserResponse_x000D__x000A_Function Get-UserResponse ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-UserResponse_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-UserResponse_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-UserResponse Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Get-UserResponse Dialog Window_x000D__x000A_    .PARAMETER Icon_x000D__x000A_      Message Icon_x000D__x000A_    .PARAMETER ButtonDefault_x000D__x000A_      The Default Button_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $DialogResult = Get-UserResponse -Title "Get User Text - Single" -Message "Show this Sample Message Prompt to the User"_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "One")]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [System.Drawing.Icon]$Icon = [System.Drawing.SystemIcons]::Information,_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonLeft,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "One")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonMid = "OK",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonRight_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-UserResponse"_x000D__x000A_  _x000D__x000A_  #region ******** Begin **** $UserResponse **** Begin ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # $UserResponse Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $UserResponseForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $UserResponseForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $UserResponseForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $UserResponseForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $UserResponseForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $UserResponseForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $UserResponseForm.Icon = $PILForm.Icon_x000D__x000A_  $UserResponseForm.KeyPreview = $AllowControl.IsPresent_x000D__x000A_  $UserResponseForm.MaximizeBox = $False_x000D__x000A_  $UserResponseForm.MinimizeBox = $False_x000D__x000A_  $UserResponseForm.Name = "UserResponseForm"_x000D__x000A_  $UserResponseForm.Owner = $PILForm_x000D__x000A_  $UserResponseForm.ShowInTaskbar = $False_x000D__x000A_  $UserResponseForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))_x000D__x000A_  $UserResponseForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $UserResponseForm.Tag = @{ "Cancel" = $False; "Pause" = $False }_x000D__x000A_  $UserResponseForm.Text = $Title_x000D__x000A_  #endregion $UserResponseForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-UserResponseFormKeyDown ********_x000D__x000A_  Function Start-UserResponseFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the UserResponse Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the UserResponse Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-UserResponseFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$UserResponseForm"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Escape))_x000D__x000A_    {_x000D__x000A_      $UserResponseForm.Close()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$UserResponseForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-UserResponseFormKeyDown ********_x000D__x000A_  $UserResponseForm.add_KeyDown({ Start-UserResponseFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-UserResponseFormShown ********_x000D__x000A_  Function Start-UserResponseFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $UserResponse Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $UserResponse Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-UserResponseFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$UserResponseForm"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $Sender.Refresh()_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$UserResponseForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-UserResponseFormShown ********_x000D__x000A_  $UserResponseForm.add_Shown({ Start-UserResponseFormShown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Controls for $UserResponse Form ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # $UserResponse Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $UserResponsePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponsePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponseForm.Controls.Add($UserResponsePanel)_x000D__x000A_  $UserResponsePanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponsePanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $UserResponsePanel.Name = "UserResponsePanel"_x000D__x000A_  #endregion $UserResponsePanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  _x000D__x000A_  #region ******** $UserResponsePanel Controls ********_x000D__x000A_  _x000D__x000A_  #region $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()_x000D__x000A_  $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()_x000D__x000A_  $UserResponsePanel.Controls.Add($UserResponsePictureBox)_x000D__x000A_  $UserResponsePictureBox.AutoSize = $False_x000D__x000A_  $UserResponsePictureBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $UserResponsePictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponsePictureBox.Image = $Icon_x000D__x000A_  $UserResponsePictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_  $UserResponsePictureBox.Name = "UserResponsePictureBox"_x000D__x000A_  $UserResponsePictureBox.Size = [System.Drawing.Size]::New(32, 32)_x000D__x000A_  $UserResponsePictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage_x000D__x000A_  #endregion $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()_x000D__x000A_  _x000D__x000A_  #region $UserResponseLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $UserResponseLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $UserResponsePanel.Controls.Add($UserResponseLabel)_x000D__x000A_  $UserResponseLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponseLabel.Font = [MyConfig]::Font.Regular_x000D__x000A_  $UserResponseLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_  $UserResponseLabel.Location = [System.Drawing.Point]::New(($UserResponsePictureBox.Right + [MyConfig]::FormSpacer), $UserResponsePictureBox.Top)_x000D__x000A_  $UserResponseLabel.Name = "UserResponseLabel"_x000D__x000A_  $UserResponseLabel.Size = [System.Drawing.Size]::New(($UserResponsePanel.ClientSize.Width - ($UserResponseLabel.Left + ([MyConfig]::FormSpacer * 3))), $UserResponsePanel.ClientSize.Width)_x000D__x000A_  $UserResponseLabel.Text = $Message_x000D__x000A_  $UserResponseLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_  #endregion $UserResponseLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  _x000D__x000A_  # Returns the minimum size required to display the text_x000D__x000A_  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($UserResponseLabel.Text, [MyConfig]::Font.Regular, $UserResponseLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_  $UserResponseLabel.Size = [System.Drawing.Size]::New(($UserResponsePanel.ClientSize.Width - ($UserResponseLabel.Left + ([MyConfig]::FormSpacer * 3))), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A_  _x000D__x000A_  #endregion ******** $UserResponsePanel Controls ********_x000D__x000A_  _x000D__x000A_  Switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "One"_x000D__x000A_    {_x000D__x000A_      $UserResponseButtons = 1_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Two"_x000D__x000A_    {_x000D__x000A_      $UserResponseButtons = 2_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Three"_x000D__x000A_    {_x000D__x000A_      $UserResponseButtons = 3_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  # ************************************************_x000D__x000A_  # $UserResponseBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $UserResponseForm.Controls.Add($UserResponseBtmPanel)_x000D__x000A_  $UserResponseBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $UserResponseBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $UserResponseBtmPanel.Name = "UserResponseBtmPanel"_x000D__x000A_  #endregion $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  _x000D__x000A_  #region ******** $UserResponseBtmPanel Controls ********_x000D__x000A_  _x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($UserResponseBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A_  _x000D__x000A_  #region $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  If (($UserResponseButtons -eq 2) -or ($UserResponseButtons -eq 3))_x000D__x000A_  {_x000D__x000A_    $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    $UserResponseBtmPanel.Controls.Add($UserResponseBtmLeftButton)_x000D__x000A_    $UserResponseBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_    $UserResponseBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_    $UserResponseBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_    $UserResponseBtmLeftButton.DialogResult = $ButtonLeft_x000D__x000A_    $UserResponseBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_    $UserResponseBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_    $UserResponseBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_    $UserResponseBtmLeftButton.Name = "UserResponseBtmLeftButton"_x000D__x000A_    $UserResponseBtmLeftButton.TabIndex = 0_x000D__x000A_    $UserResponseBtmLeftButton.TabStop = $True_x000D__x000A_    $UserResponseBtmLeftButton.Text = "&amp;$($ButtonLeft.ToString())"_x000D__x000A_    $UserResponseBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $UserResponseBtmLeftButton.PreferredSize.Height)_x000D__x000A_    if ($ButtonLeft -eq $ButtonDefault)_x000D__x000A_    {_x000D__x000A_      $UserResponseBtmLeftButton.Select()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  _x000D__x000A_  #region $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  If (($UserResponseButtons -eq 1) -or ($UserResponseButtons -eq 3))_x000D__x000A_  {_x000D__x000A_    $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    $UserResponseBtmPanel.Controls.Add($UserResponseBtmMidButton)_x000D__x000A_    $UserResponseBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_    $UserResponseBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_    $UserResponseBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_    $UserResponseBtmMidButton.DialogResult = $ButtonMid_x000D__x000A_    $UserResponseBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_    $UserResponseBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_    $UserResponseBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_    $UserResponseBtmMidButton.Name = "UserResponseBtmMidButton"_x000D__x000A_    $UserResponseBtmMidButton.TabStop = $True_x000D__x000A_    $UserResponseBtmMidButton.Text = "&amp;$($ButtonMid.ToString())"_x000D__x000A_    $UserResponseBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $UserResponseBtmMidButton.PreferredSize.Height)_x000D__x000A_    if ($ButtonMid -eq $ButtonDefault)_x000D__x000A_    {_x000D__x000A_      $UserResponseBtmMidButton.Select()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  _x000D__x000A_  #region $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  If (($UserResponseButtons -eq 2) -or ($UserResponseButtons -eq 3))_x000D__x000A_  {_x000D__x000A_    $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    $UserResponseBtmPanel.Controls.Add($UserResponseBtmRightButton)_x000D__x000A_    $UserResponseBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_    $UserResponseBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_    $UserResponseBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_    $UserResponseBtmRightButton.DialogResult = $ButtonRight_x000D__x000A_    $UserResponseBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_    $UserResponseBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_    $UserResponseBtmRightButton.Location = [System.Drawing.Point]::New(($UserResponseBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_    $UserResponseBtmRightButton.Name = "UserResponseBtmRightButton"_x000D__x000A_    $UserResponseBtmRightButton.TabIndex = 1_x000D__x000A_    $UserResponseBtmRightButton.TabStop = $True_x000D__x000A_    $UserResponseBtmRightButton.Text = "&amp;$($ButtonRight.ToString())"_x000D__x000A_    $UserResponseBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $UserResponseBtmRightButton.PreferredSize.Height)_x000D__x000A_    if ($ButtonRight -eq $ButtonDefault)_x000D__x000A_    {_x000D__x000A_      $UserResponseBtmRightButton.Select()_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  #endregion $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  _x000D__x000A_  $UserResponseBtmPanel.ClientSize = [System.Drawing.Size]::New(($UserResponseTextBox.Right + [MyConfig]::FormSpacer), (($UserResponseBtmPanel.Controls[$UserResponseBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  _x000D__x000A_  #endregion ******** $UserResponseBtmPanel Controls ********_x000D__x000A_  _x000D__x000A_  $UserResponseForm.ClientSize = [System.Drawing.Size]::New($UserResponseForm.ClientSize.Width, ($UserResponseForm.ClientSize.Height - ($UserResponsePanel.ClientSize.Height - ([Math]::Max($UserResponsePictureBox.Bottom, $UserResponseLabel.Bottom) + ([MyConfig]::FormSpacer * 2)))))_x000D__x000A_  _x000D__x000A_  #endregion ******** Controls for $UserResponse Form ********_x000D__x000A_  _x000D__x000A_  #endregion ******** End **** $Get-UserResponse **** End ********_x000D__x000A_  _x000D__x000A_  $DialogResult = $UserResponseForm.ShowDialog($PILForm)_x000D__x000A_  [UserResponse]::New(($DialogResult -eq $ButtonDefault), $DialogResult)_x000D__x000A_  _x000D__x000A_  $UserResponseForm.Dispose()_x000D__x000A_  _x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Get-UserResponse"_x000D__x000A_}_x000D__x000A_#endregion function Get-UserResponse_x000D__x000A__x000D__x000A_# -----------------------_x000D__x000A_# Get TextBoxInput Function_x000D__x000A_# -----------------------_x000D__x000A_#region TextBoxInput Result Class_x000D__x000A_Class TextBoxInput_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [String[]]$Items_x000D__x000A__x000D__x000A_  TextBoxInput ([Bool]$Success, [Object]$DialogResult, [String[]]$Items)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Items = $Items_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion TextBoxInput Result Class_x000D__x000A__x000D__x000A_#region function Get-TextBoxInput_x000D__x000A_function Get-TextBoxInput ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-TextBoxInput_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-TextBoxInput_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-TextBoxInput Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER HintText_x000D__x000A_      Hint Text to Display_x000D__x000A_    .PARAMETER ValidChars_x000D__x000A_      RegEx Allowed Valid Characters for Input_x000D__x000A_    .PARAMETER ValidOutput_x000D__x000A_      RegEx Validate Output Format_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Default Items / Text_x000D__x000A_    .PARAMETER MaxLength_x000D__x000A_      Maximum Length of Text Input_x000D__x000A_    .PARAMETER Multi_x000D__x000A_      Allow Multiple Lines of TExt_x000D__x000A_    .PARAMETER NoDuplicates_x000D__x000A_      Do Not Allow Duplicate Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Get-TextBoxInput Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Get-TextBoxInput Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $DialogResult = Get-TextBoxInput -Title "Get User Text - Multi" -Message "Show this Sample Message Prompt to the User" -Multi -Items @("Computer Name 01", "Computer Name 02", "Computer Name 03")_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Single")]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [String]$HintText = "Enter Value Here",_x000D__x000A_    [String]$ValidChars = "[\s\w\d\.\-_,;]",_x000D__x000A_    [String]$ValidOutput = ".+",_x000D__x000A_    [String[]]$Items = @(),_x000D__x000A_    [Int]$MaxLength = [Int]::MaxValue,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Multi")]_x000D__x000A_    [Switch]$Multi,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Multi")]_x000D__x000A_    [Switch]$NoDuplicates,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "Multi")]_x000D__x000A_    [Int]$Height = 18,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-TextBoxInput"_x000D__x000A__x000D__x000A_  #region ******** Begin **** TextBoxInput **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInput Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $TextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $TextBoxInputForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $TextBoxInputForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $TextBoxInputForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $TextBoxInputForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $TextBoxInputForm.Icon = $PILForm.Icon_x000D__x000A_  $TextBoxInputForm.KeyPreview = $True_x000D__x000A_  $TextBoxInputForm.MaximizeBox = $False_x000D__x000A_  $TextBoxInputForm.MinimizeBox = $False_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TextBoxInputForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TextBoxInputForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  }_x000D__x000A_  $TextBoxInputForm.Name = "TextBoxInputForm"_x000D__x000A_  $TextBoxInputForm.Owner = $PILForm_x000D__x000A_  $TextBoxInputForm.ShowInTaskbar = $False_x000D__x000A_  $TextBoxInputForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $TextBoxInputForm.Text = $Title_x000D__x000A_  #endregion $TextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputFormKeyDown ********_x000D__x000A_  function Start-TextBoxInputFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the TextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the TextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputFormKeyDown ********_x000D__x000A_  $TextBoxInputForm.add_KeyDown({ Start-TextBoxInputFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputFormShown ********_x000D__x000A_  function Start-TextBoxInputFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the TextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the TextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$TextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TextBoxInputTextBox.DeselectAll()_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$TextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputFormShown ********_x000D__x000A_  $TextBoxInputForm.add_Shown({ Start-TextBoxInputFormShown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Controls for TextBoxInput Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInput Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputForm.Controls.Add($TextBoxInputPanel)_x000D__x000A_  $TextBoxInputPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $TextBoxInputPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $TextBoxInputPanel.Name = "TextBoxInputPanel"_x000D__x000A_  #endregion $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $TextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $TextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $TextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $TextBoxInputPanel.Controls.Add($TextBoxInputLabel)_x000D__x000A_    $TextBoxInputLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $TextBoxInputLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $TextBoxInputLabel.Name = "TextBoxInputLabel"_x000D__x000A_    $TextBoxInputLabel.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $TextBoxInputLabel.Text = $Message_x000D__x000A_    $TextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $TextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($TextBoxInputLabel.Text, [MyConfig]::Font.Regular, $TextBoxInputLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $TextBoxInputLabel.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $TextBoxInputLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInput GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $TextBoxInputPanel.Controls.Add($TextBoxInputGroupBox)_x000D__x000A_  $TextBoxInputGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $TextBoxInputGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $TextBoxInputGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $TextBoxInputGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $TextBoxInputGroupBox.Name = "TextBoxInputGroupBox"_x000D__x000A_  $TextBoxInputGroupBox.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TextBoxInputPanel.ClientSize.Height - ($TextBoxInputGroupBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $TextBoxInputGroupBox.Text = $Null_x000D__x000A_  #endregion $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  _x000D__x000A_  #region ******** $TextBoxInputGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  #region $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $TextBoxInputGroupBox.Controls.Add($TextBoxInputTextBox)_x000D__x000A_  $TextBoxInputTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $TextBoxInputTextBox.AutoSize = $True_x000D__x000A_  $TextBoxInputTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $TextBoxInputTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $TextBoxInputTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $TextBoxInputTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $TextBoxInputTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $TextBoxInputTextBox.MaxLength = $MaxLength_x000D__x000A_  $TextBoxInputTextBox.Multiline = $Multi.IsPresent_x000D__x000A_  $TextBoxInputTextBox.Name = "TextBoxInputTextBox"_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $TextBoxInputTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both_x000D__x000A_    If ($Items.Count)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = $Items_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = ""_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = $Items }_x000D__x000A_    }_x000D__x000A_    $TextBoxInputTextBox.Size = [System.Drawing.Size]::New(($TextBoxInputGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TextBoxInputGroupBox.ClientSize.Height - ($TextBoxInputTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TextBoxInputTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None_x000D__x000A_    if ($Items.Count)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = $Items[0]_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items[0] } _x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = ""_x000D__x000A_      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = "" }_x000D__x000A_    }_x000D__x000A_    $TextBoxInputTextBox.Size = [System.Drawing.Size]::New(($TextBoxInputGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TextBoxInputTextBox.PreferredHeight)_x000D__x000A_  }_x000D__x000A_  $TextBoxInputTextBox.TabIndex = 0_x000D__x000A_  $TextBoxInputTextBox.TabStop = $True_x000D__x000A_  $TextBoxInputTextBox.WordWrap = $False_x000D__x000A_  #endregion $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxGotFocus ********_x000D__x000A_  Function Start-TextBoxInputTextBoxGotFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      GotFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      GotFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the GotFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox GotFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter GotFocus Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ($Sender.Tag.HintEnabled)_x000D__x000A_    {_x000D__x000A_      $Sender.Text = ""_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit GotFocus Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxGotFocus ********_x000D__x000A_  $TextBoxInputTextBox.add_GotFocus({ Start-TextBoxInputTextBoxGotFocus -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxKeyDown ********_x000D__x000A_  function Start-TextBoxInputTextBoxKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the TextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the TextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The TextBox Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the TextBox KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))_x000D__x000A_    {_x000D__x000A_      $TextBoxInputBtmLeftButton.PerformClick()_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxKeyDown ********_x000D__x000A_  $TextBoxInputTextBox.add_KeyDown({ Start-TextBoxInputTextBoxKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxKeyPress ********_x000D__x000A_  Function Start-TextBoxInputTextBoxKeyPress_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyPress Event for the TextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyPress Event for the TextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TextBox Control that fired the KeyPress Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TextBox KeyPress Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-TextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyPress Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X_x000D__x000A_    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyPress Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxKeyPress ********_x000D__x000A_  $TextBoxInputTextBox.add_KeyPress({Start-TextBoxInputTextBoxKeyPress -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxKeyUp ********_x000D__x000A_  Function Start-TextBoxInputTextBoxKeyUp_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyUp Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyUp Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the KeyUp Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox KeyUp Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyUp Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit KeyUp Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxKeyUp ********_x000D__x000A_  $TextBoxInputTextBox.add_KeyUp({ Start-TextBoxInputTextBoxKeyUp -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-TextBoxInputTextBoxLostFocus ********_x000D__x000A_  Function Start-TextBoxInputTextBoxLostFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      LostFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      LostFocus Event for the TextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the LostFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox LostFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-TextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter LostFocus Event for `$TextBoxInputTextBox"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_    {_x000D__x000A_      $Sender.Text = $Sender.Tag.HintText_x000D__x000A_      $Sender.Tag.HintEnabled = $True_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $Sender.Tag.HintEnabled = $False_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit LostFocus Event for `$TextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputTextBoxLostFocus ********_x000D__x000A_  $TextBoxInputTextBox.add_LostFocus({ Start-TextBoxInputTextBoxLostFocus -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  $TextBoxInputGroupBox.ClientSize = [System.Drawing.Size]::New($TextBoxInputGroupBox.ClientSize.Width, ($TextBoxInputTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  _x000D__x000A_  #endregion ******** $TextBoxInputGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($TextBoxInputGroupBox.Right + [MyConfig]::FormSpacer), ($TextBoxInputGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $TextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # TextBoxInputBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $TextBoxInputForm.Controls.Add($TextBoxInputBtmPanel)_x000D__x000A_  $TextBoxInputBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $TextBoxInputBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $TextBoxInputBtmPanel.Name = "TextBoxInputBtmPanel"_x000D__x000A_  #endregion $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $TextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($TextBoxInputBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmLeftButton)_x000D__x000A_  $TextBoxInputBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $TextBoxInputBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $TextBoxInputBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $TextBoxInputBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $TextBoxInputBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $TextBoxInputBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $TextBoxInputBtmLeftButton.Name = "TextBoxInputBtmLeftButton"_x000D__x000A_  $TextBoxInputBtmLeftButton.TabIndex = 1_x000D__x000A_  $TextBoxInputBtmLeftButton.TabStop = $True_x000D__x000A_  $TextBoxInputBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $TextBoxInputBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $TextBoxInputBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputBtmLeftButtonClick ********_x000D__x000A_  function Start-TextBoxInputBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ((-not $TextBoxInputTextBox.Tag.HintEnabled) -and ("$($TextBoxInputTextBox.Text.Trim())".Length -gt 0))_x000D__x000A_    {_x000D__x000A_      $ChkOutput = $True_x000D__x000A_      ($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { $ChkOutput = ($ChkOutput -and $PSItem -match $ValidOutput) }_x000D__x000A_      If ($ChkOutput)_x000D__x000A_      {_x000D__x000A_        $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Missing Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputBtmLeftButtonClick ********_x000D__x000A_  $TextBoxInputBtmLeftButton.add_Click({ Start-TextBoxInputBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmMidButton)_x000D__x000A_  $TextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $TextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $TextBoxInputBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $TextBoxInputBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $TextBoxInputBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $TextBoxInputBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $TextBoxInputBtmMidButton.Location = [System.Drawing.Point]::New(($TextBoxInputBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $TextBoxInputBtmMidButton.Name = "TextBoxInputBtmMidButton"_x000D__x000A_  $TextBoxInputBtmMidButton.TabIndex = 2_x000D__x000A_  $TextBoxInputBtmMidButton.TabStop = $True_x000D__x000A_  $TextBoxInputBtmMidButton.Text = $ButtonMid_x000D__x000A_  $TextBoxInputBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $TextBoxInputBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputBtmMidButtonClick ********_x000D__x000A_  function Start-TextBoxInputBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Lines = $TextBoxInputTextBox.Tag.Items_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $TextBoxInputTextBox.Text = $TextBoxInputTextBox.Tag.Items_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    $TextBoxInputTextBox.Tag.HintEnabled = ($TextBoxInputTextBox.TextLength -gt 0)_x000D__x000A_    Start-TextBoxInputTextBoxLostFocus -Sender $TextBoxInputTextBox -EventArg "LostFocus"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputBtmMidButtonClick ********_x000D__x000A_  $TextBoxInputBtmMidButton.add_Click({ Start-TextBoxInputBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmRightButton)_x000D__x000A_  $TextBoxInputBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $TextBoxInputBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $TextBoxInputBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $TextBoxInputBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $TextBoxInputBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $TextBoxInputBtmRightButton.Location = [System.Drawing.Point]::New(($TextBoxInputBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $TextBoxInputBtmRightButton.Name = "TextBoxInputBtmRightButton"_x000D__x000A_  $TextBoxInputBtmRightButton.TabIndex = 3_x000D__x000A_  $TextBoxInputBtmRightButton.TabStop = $True_x000D__x000A_  $TextBoxInputBtmRightButton.Text = $ButtonRight_x000D__x000A_  $TextBoxInputBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $TextBoxInputBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-TextBoxInputBtmRightButtonClick ********_x000D__x000A_  function Start-TextBoxInputBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the TextBoxInputBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the TextBoxInputBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-TextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A_    _x000D__x000A_    $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-TextBoxInputBtmRightButtonClick ********_x000D__x000A_  $TextBoxInputBtmRightButton.add_Click({ Start-TextBoxInputBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $TextBoxInputBtmPanel.ClientSize = [System.Drawing.Size]::New(($TextBoxInputBtmRightButton.Right + [MyConfig]::FormSpacer), ($TextBoxInputBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $TextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $TextBoxInputForm.ClientSize = [System.Drawing.Size]::New($TextBoxInputForm.ClientSize.Width, ($TempClientSize.Height + $TextBoxInputBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for TextBoxInput Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** Get-TextBoxInput **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $TextBoxInputForm.ShowDialog($PILForm)_x000D__x000A_  If ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    If ($NoDuplicates.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TmpItems = @(($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | Select-Object -Unique)_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $TmpItems = @(($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries))_x000D__x000A_    }_x000D__x000A_    [TextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpItems)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [TextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TextBoxInputTextBox.Text)_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  $TextBoxInputForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-TextBoxInput"_x000D__x000A_}_x000D__x000A_#endregion function Get-TextBoxInput_x000D__x000A__x000D__x000A_# ------------------------------_x000D__x000A_# Get MultiTextBoxInput Function_x000D__x000A_# ------------------------------_x000D__x000A_#region MultiTextBoxInput Result Class_x000D__x000A_Class MultiTextBoxInput_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [System.Collections.Specialized.OrderedDictionary]$OrderedItems_x000D__x000A__x000D__x000A_  MultiTextBoxInput ([Bool]$Success, [Object]$DialogResult, [System.Collections.Specialized.OrderedDictionary]$OrderedItems)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.OrderedItems = $OrderedItems_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion MultiTextBoxInput Result Class_x000D__x000A__x000D__x000A_#region function Get-MultiTextBoxInput_x000D__x000A_Function Get-MultiTextBoxInput ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-MultiTextBoxInput_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-MultiTextBoxInput_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-MultiTextBoxInput Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER ReturnTitle_x000D__x000A_      Title of Values Group Box_x000D__x000A_    .PARAMETER OrderedItems_x000D__x000A_      Ordered List (HashTable) if Names and Values_x000D__x000A_    .PARAMETER ValidCars_x000D__x000A_      Valid Inputy Chatacters_x000D__x000A_    .PARAMETER Width_x000D__x000A_      With of Get-MultiTextBoxInput Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .PARAMETER AllRequired_x000D__x000A_      All Values are Required_x000D__x000A_    .EXAMPLE_x000D__x000A_      $DialogResult = Get-MultiTextBoxInput -Title "Get Multi Text Input" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message,_x000D__x000A_    [String]$ReturnTitle,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,_x000D__x000A_    [String]$ValidChars = "[\s\w\d\.\-_]",_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$AllRequired_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-MultiTextBoxInput"_x000D__x000A__x000D__x000A_  #region ******** Begin **** MultiTextBoxInput **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInput Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $MultiTextBoxInputForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $MultiTextBoxInputForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $MultiTextBoxInputForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $MultiTextBoxInputForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $MultiTextBoxInputForm.Icon = $PILForm.Icon_x000D__x000A_  $MultiTextBoxInputForm.KeyPreview = $True_x000D__x000A_  $MultiTextBoxInputForm.MaximizeBox = $False_x000D__x000A_  $MultiTextBoxInputForm.MinimizeBox = $False_x000D__x000A_  $MultiTextBoxInputForm.Name = "MultiTextBoxInputForm"_x000D__x000A_  $MultiTextBoxInputForm.Owner = $PILForm_x000D__x000A_  $MultiTextBoxInputForm.ShowInTaskbar = $False_x000D__x000A_  $MultiTextBoxInputForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))_x000D__x000A_  $MultiTextBoxInputForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $MultiTextBoxInputForm.Tag = $AllRequired.IsPresent_x000D__x000A_  $MultiTextBoxInputForm.Text = $Title_x000D__x000A_  #endregion $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputFormKeyDown ********_x000D__x000A_  Function Start-MultiTextBoxInputFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputFormKeyDown ********_x000D__x000A_  $MultiTextBoxInputForm.add_KeyDown({ Start-MultiTextBoxInputFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputFormShown ********_x000D__x000A_  Function Start-MultiTextBoxInputFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the MultiTextBoxInput Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$MultiTextBoxInputForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$MultiTextBoxInputForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputFormShown ********_x000D__x000A_  $MultiTextBoxInputForm.add_Shown({ Start-MultiTextBoxInputFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for MultiTextBoxInput Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInput Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputForm.Controls.Add($MultiTextBoxInputPanel)_x000D__x000A_  $MultiTextBoxInputPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $MultiTextBoxInputPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $MultiTextBoxInputPanel.Name = "MultiTextBoxInputPanel"_x000D__x000A_  $MultiTextBoxInputPanel.Text = "MultiTextBoxInputPanel"_x000D__x000A_  #endregion $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $MultiTextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputPanel.Controls.Add($MultiTextBoxInputLabel)_x000D__x000A_    $MultiTextBoxInputLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $MultiTextBoxInputLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $MultiTextBoxInputLabel.Name = "SearchTextMainLabel"_x000D__x000A_    $MultiTextBoxInputLabel.Size = [System.Drawing.Size]::New(($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $MultiTextBoxInputLabel.Text = $Message_x000D__x000A_    $MultiTextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_    #endregion $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($MultiTextBoxInputLabel.Text, [MyConfig]::Font.Regular, $MultiTextBoxInputLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $MultiTextBoxInputLabel.Size = [System.Drawing.Size]::New(($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $MultiTextBoxInputLabel.Bottom_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInput GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $MultiTextBoxInputPanel.Controls.Add($MultiTextBoxInputGroupBox)_x000D__x000A_  $MultiTextBoxInputGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $MultiTextBoxInputGroupBox.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $MultiTextBoxInputGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $MultiTextBoxInputGroupBox.Name = "MultiTextBoxInputGroupBox"_x000D__x000A_  $MultiTextBoxInputGroupBox.Text = $ReturnTitle_x000D__x000A_  $MultiTextBoxInputGroupBox.Width = ($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))_x000D__x000A_  #endregion $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  $TmpLabelWidth = 0_x000D__x000A_  $Count = 0_x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    #region $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $MultiTextBoxInputGroupBox.Controls.Add($MultiTextBoxInputLabel)_x000D__x000A_    $MultiTextBoxInputLabel.AutoSize = $True_x000D__x000A_    $MultiTextBoxInputLabel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $MultiTextBoxInputLabel.Font = [MyConfig]::Font.Regular_x000D__x000A_    $MultiTextBoxInputLabel.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_    $MultiTextBoxInputLabel.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + (($MultiTextBoxInputLabel.PreferredHeight + [MyConfig]::FormSpacer) * $Count)))_x000D__x000A_    $MultiTextBoxInputLabel.Name = "$($Key)Label"_x000D__x000A_    $MultiTextBoxInputLabel.Tag = $Null_x000D__x000A_    $MultiTextBoxInputLabel.Text = "$($Key):"_x000D__x000A_    $MultiTextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight_x000D__x000A_    #endregion $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    $TmpLabelWidth = [Math]::Max($TmpLabelWidth, $MultiTextBoxInputLabel.Width)_x000D__x000A_    $Count += 1_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxGotFocus ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxGotFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      GotFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      GotFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the GotFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox GotFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter GotFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ($Sender.Tag.HintEnabled)_x000D__x000A_    {_x000D__x000A_      $Sender.Text = ""_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit GotFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxGotFocus ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxKeyDown ********_x000D__x000A_  function Start-MultiTextBoxInputTextBoxKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the GetMultiValueMain TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the GetMultiValueMain TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The TextBox Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the TextBox KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputBtmLeftButton.PerformClick()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyDown ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxKeyPress ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxKeyPress_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyPress Event for the MultiTextBoxInput TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyPress Event for the MultiTextBoxInput TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TextBox Control that fired the KeyPress Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TextBox KeyPress Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-MultiTextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyPress Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X_x000D__x000A_    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyPress Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyPress ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxKeyUp ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxKeyUp_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyUp Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyUp Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the KeyUp Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox KeyUp Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyUp Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyUp Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyUp ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputTextBoxLostFocus ********_x000D__x000A_  Function Start-MultiTextBoxInputTextBoxLostFocus_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      LostFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      LostFocus Event for the MultiTextBoxInput TextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The TextBox Control that fired the LostFocus Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the TextBox LostFocus Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-MultiTextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter LostFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_    {_x000D__x000A_      $Sender.Text = $Sender.Tag.HintText_x000D__x000A_      $Sender.Tag.HintEnabled = $True_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $Sender.Tag.HintEnabled = $False_x000D__x000A_      $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_      $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit LostFocus Event for `$MultiTextBoxInputTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputTextBoxLostFocus ********_x000D__x000A__x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    $TmpLabel = $MultiTextBoxInputGroupBox.Controls["$($Key)Label"]_x000D__x000A_    $TmpLabel.AutoSize = $False_x000D__x000A_    $TmpLabel.Size = [System.Drawing.Size]::New($TmpLabelWidth, $TmpLabel.PreferredHeight)_x000D__x000A__x000D__x000A_    #region $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $MultiTextBoxInputGroupBox.Controls.Add($MultiTextBoxInputTextBox)_x000D__x000A_    $MultiTextBoxInputTextBox.AutoSize = $False_x000D__x000A_    $MultiTextBoxInputTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_    $MultiTextBoxInputTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $MultiTextBoxInputTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    $MultiTextBoxInputTextBox.Location = [System.Drawing.Size]::New(($TmpLabel.Right + [MyConfig]::FormSpacer), $TmpLabel.Top)_x000D__x000A_    $MultiTextBoxInputTextBox.MaxLength = 25_x000D__x000A_    $MultiTextBoxInputTextBox.Name = "$($Key)"_x000D__x000A_    $MultiTextBoxInputTextBox.TabStop = $True_x000D__x000A_    $MultiTextBoxInputTextBox.Text = $OrderedItems[$Key]_x000D__x000A_    $MultiTextBoxInputTextBox.Tag = @{ "HintText" = "Enter Value for '$($Key)'"; "HintEnabled" = ($MultiTextBoxInputTextBox.TextLength -eq 0); "Value" = $OrderedItems[$Key] }_x000D__x000A_    $MultiTextBoxInputTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left_x000D__x000A_    $MultiTextBoxInputTextBox.Size = [System.Drawing.Size]::New(($MultiTextBoxInputGroupBox.ClientSize.Width - ($TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), $TmpLabel.Height)_x000D__x000A_    #endregion $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_    $MultiTextBoxInputTextBox.add_GotFocus({ Start-MultiTextBoxInputTextBoxGotFocus -Sender $This -EventArg $PSItem})_x000D__x000A_    $MultiTextBoxInputTextBox.add_KeyDown({ Start-MultiTextBoxInputTextBoxKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_    $MultiTextBoxInputTextBox.add_KeyPress({ Start-MultiTextBoxInputTextBoxKeyPress -Sender $This -EventArg $PSItem })_x000D__x000A_    $MultiTextBoxInputTextBox.add_KeyUp({ Start-MultiTextBoxInputTextBoxKeyUp -Sender $This -EventArg $PSItem })_x000D__x000A_    $MultiTextBoxInputTextBox.add_LostFocus({ Start-MultiTextBoxInputTextBoxLostFocus -Sender $This -EventArg $PSItem })_x000D__x000A_    Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputTextBox -EventArg $EventArg_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $MultiTextBoxInputGroupBox.ClientSize = [System.Drawing.Size]::New($MultiTextBoxInputGroupBox.ClientSize.Width, (($MultiTextBoxInputGroupBox.Controls[$MultiTextBoxInputGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($MultiTextBoxInputTextBox.Right + [MyConfig]::FormSpacer), ($MultiTextBoxInputGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $MultiTextBoxInputPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # MultiTextBoxInputBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $MultiTextBoxInputForm.Controls.Add($MultiTextBoxInputBtmPanel)_x000D__x000A_  $MultiTextBoxInputBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $MultiTextBoxInputBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $MultiTextBoxInputBtmPanel.Name = "MultiTextBoxInputBtmPanel"_x000D__x000A_  $MultiTextBoxInputBtmPanel.Text = "MultiTextBoxInputBtmPanel"_x000D__x000A_  #endregion $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $MultiTextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($MultiTextBoxInputBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmLeftButton)_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Name = "MultiTextBoxInputBtmLeftButton"_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.TabIndex = 1_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.TabStop = $True_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $MultiTextBoxInputBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputBtmLeftButtonClick ********_x000D__x000A_  Function Start-MultiTextBoxInputBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TmpValidCheck = $MultiTextBoxInputForm.Tag_x000D__x000A_    ForEach ($Key In @($OrderedItems.Keys))_x000D__x000A_    {_x000D__x000A_      $TmpItemValue = "$($MultiTextBoxInputGroupBox.Controls[$Key].Text)".Trim()_x000D__x000A_      $ChkItemValue = (-not (([String]::IsNullOrEmpty($TmpItemValue) -or $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled)))_x000D__x000A_      if ($ChkItemValue)_x000D__x000A_      {_x000D__x000A_        $OrderedItems[$Key] = $TmpItemValue_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $OrderedItems[$Key] = $Null_x000D__x000A_      }_x000D__x000A__x000D__x000A_      if ($MultiTextBoxInputForm.Tag)_x000D__x000A_      {_x000D__x000A_        $TmpValidCheck = $ChkItemValue -and $TmpValidCheck_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        $TmpValidCheck = $ChkItemValue -or $TmpValidCheck_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    If ($TmpValidCheck)_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($MultiTextBoxInputForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputBtmLeftButtonClick ********_x000D__x000A_  $MultiTextBoxInputBtmLeftButton.add_Click({ Start-MultiTextBoxInputBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmMidButton)_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $MultiTextBoxInputBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $MultiTextBoxInputBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Location = [System.Drawing.Point]::New(($MultiTextBoxInputBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Name = "MultiTextBoxInputBtmMidButton"_x000D__x000A_  $MultiTextBoxInputBtmMidButton.TabIndex = 2_x000D__x000A_  $MultiTextBoxInputBtmMidButton.TabStop = $True_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Text = $ButtonMid_x000D__x000A_  $MultiTextBoxInputBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $MultiTextBoxInputBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputBtmMidButtonClick ********_x000D__x000A_  Function Start-MultiTextBoxInputBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($Key In @($OrderedItems.Keys))_x000D__x000A_    {_x000D__x000A_      $MultiTextBoxInputGroupBox.Controls[$Key].Text = $MultiTextBoxInputGroupBox.Controls[$Key].Tag.Value_x000D__x000A_      $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled = ($MultiTextBoxInputGroupBox.TextLength -eq 0)_x000D__x000A_      Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputGroupBox.Controls[$Key] -EventArg $EventArg_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputBtmMidButtonClick ********_x000D__x000A_  $MultiTextBoxInputBtmMidButton.add_Click({ Start-MultiTextBoxInputBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmRightButton)_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $MultiTextBoxInputBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $MultiTextBoxInputBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $MultiTextBoxInputBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Location = [System.Drawing.Point]::New(($MultiTextBoxInputBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Name = "MultiTextBoxInputBtmRightButton"_x000D__x000A_  $MultiTextBoxInputBtmRightButton.TabIndex = 3_x000D__x000A_  $MultiTextBoxInputBtmRightButton.TabStop = $True_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Text = $ButtonRight_x000D__x000A_  $MultiTextBoxInputBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $MultiTextBoxInputBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-MultiTextBoxInputBtmRightButtonClick ********_x000D__x000A_  Function Start-MultiTextBoxInputBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the MultiTextBoxInputBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the MultiTextBoxInputBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-MultiTextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-MultiTextBoxInputBtmRightButtonClick ********_x000D__x000A_  $MultiTextBoxInputBtmRightButton.add_Click({ Start-MultiTextBoxInputBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $MultiTextBoxInputBtmPanel.ClientSize = [System.Drawing.Size]::New(($MultiTextBoxInputBtmRightButton.Right + [MyConfig]::FormSpacer), ($MultiTextBoxInputBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $MultiTextBoxInputBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $MultiTextBoxInputForm.ClientSize = [System.Drawing.Size]::New($MultiTextBoxInputForm.ClientSize.Width, ($TempClientSize.Height + $MultiTextBoxInputBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for MultiTextBoxInput Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** MultiTextBoxInput **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $MultiTextBoxInputForm.ShowDialog($PILForm)_x000D__x000A_  [MultiTextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $OrderedItems)_x000D__x000A__x000D__x000A_  $MultiTextBoxInputForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-MultiTextBoxInput"_x000D__x000A_}_x000D__x000A_#endregion function Get-MultiTextBoxInput_x000D__x000A__x000D__x000A_# ------------------------------_x000D__x000A_# Get RadioButtonOption Function_x000D__x000A_# ------------------------------_x000D__x000A_#region RadioButtonOption Result Class_x000D__x000A_Class RadioButtonOption_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [HashTable]$Item = @{}_x000D__x000A__x000D__x000A_  RadioButtonOption ([Bool]$Success, [Object]$DialogResult)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_  }_x000D__x000A__x000D__x000A_  RadioButtonOption ([Bool]$Success, [Object]$DialogResult, [HashTable]$Item)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Item = $Item_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion RadioButtonOption Result Class_x000D__x000A__x000D__x000A_#region function Get-RadioButtonOption_x000D__x000A_Function Get-RadioButtonOption ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-RadioButtonOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-RadioButtonOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-RadioButtonOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Selected RadioButtonOption_x000D__x000A_    .PARAMETER OrderedItems_x000D__x000A_      Ordered List (HashTable) if Names and Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      With if Get-RadioButtonOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4"}_x000D__x000A_      $DialogResult = Get-RadioButtonOption -Title "RadioButton Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected "4"_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [Object]$Selected = "",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-RadioButtonOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** RadioButtonOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RadioButtonOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $RadioButtonOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RadioButtonOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $RadioButtonOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $RadioButtonOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $RadioButtonOptionForm.KeyPreview = $True_x000D__x000A_  $RadioButtonOptionForm.MaximizeBox = $False_x000D__x000A_  $RadioButtonOptionForm.MinimizeBox = $False_x000D__x000A_  $RadioButtonOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $RadioButtonOptionForm.Name = "RadioButtonOptionForm"_x000D__x000A_  $RadioButtonOptionForm.Owner = $PILForm_x000D__x000A_  $RadioButtonOptionForm.ShowInTaskbar = $False_x000D__x000A_  $RadioButtonOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $RadioButtonOptionForm.Text = $Title_x000D__x000A_  #endregion $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionFormKeyDown ********_x000D__x000A_  Function Start-RadioButtonOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the RadioButtonOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the RadioButtonOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$RadioButtonOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $RadioButtonOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$RadioButtonOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionFormKeyDown ********_x000D__x000A_  $RadioButtonOptionForm.add_KeyDown({ Start-RadioButtonOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionFormShown ********_x000D__x000A_  Function Start-RadioButtonOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the RadioButtonOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the RadioButtonOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$RadioButtonOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$RadioButtonOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionFormShown ********_x000D__x000A_  $RadioButtonOptionForm.add_Shown({ Start-RadioButtonOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for RadioButtonOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionForm.Controls.Add($RadioButtonOptionPanel)_x000D__x000A_  $RadioButtonOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RadioButtonOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $RadioButtonOptionPanel.Name = "RadioButtonOptionPanel"_x000D__x000A_  #$RadioButtonOptionPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)_x000D__x000A_  #endregion $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $RadioButtonOptionPanel Controls ********_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $RadioButtonOptionPanel.Controls.Add($RadioButtonOptionLabel)_x000D__x000A_    $RadioButtonOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $RadioButtonOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $RadioButtonOptionLabel.Name = "RadioButtonOptionLabel"_x000D__x000A_    $RadioButtonOptionLabel.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $RadioButtonOptionLabel.Text = $Message_x000D__x000A_    $RadioButtonOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($RadioButtonOptionLabel.Text, [MyConfig]::Font.Regular, $RadioButtonOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $RadioButtonOptionLabel.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $RadioButtonOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempBottom = [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $RadioButtonOptionPanel.Controls.Add($RadioButtonOptionGroupBox)_x000D__x000A_  $RadioButtonOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $RadioButtonOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RadioButtonOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $RadioButtonOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $RadioButtonOptionGroupBox.Name = "RadioButtonOptionGroupBox"_x000D__x000A_  $RadioButtonOptionGroupBox.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_  $RadioButtonOptionGroupBox.Text = $Null_x000D__x000A_  #endregion $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $RadioButtonOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $RadioButtonOptionNumber = 0_x000D__x000A_  $GroupBottom = [MyConfig]::Font.Height_x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    #region $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()_x000D__x000A_    $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()_x000D__x000A_    $RadioButtonOptionGroupBox.Controls.Add($RadioButtonOptionRadioButton)_x000D__x000A_    #$RadioButtonOptionRadioButton.AutoCheck = $True_x000D__x000A_    $RadioButtonOptionRadioButton.AutoSize = $True_x000D__x000A_    $RadioButtonOptionRadioButton.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $RadioButtonOptionRadioButton.Checked = ($OrderedItems[$Key] -eq $Selected)_x000D__x000A_    $RadioButtonOptionRadioButton.Font = [MyConfig]::Font.Regular_x000D__x000A_    $RadioButtonOptionRadioButton.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $RadioButtonOptionRadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)_x000D__x000A_    $RadioButtonOptionRadioButton.Name = "RadioChoice$($RadioButtonOptionNumber)"_x000D__x000A_    $RadioButtonOptionRadioButton.Tag = $OrderedItems[$Key]_x000D__x000A_    $RadioButtonOptionRadioButton.Text = $Key_x000D__x000A_    #endregion $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()_x000D__x000A__x000D__x000A_    $GroupBottom = ($RadioButtonOptionRadioButton.Bottom + [MyConfig]::FormSpacer)_x000D__x000A_    $RadioButtonOptionNumber += 1_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $RadioButtonOptionGroupBox.ClientSize = [System.Drawing.Size]::New($RadioButtonOptionGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $RadioButtonOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** $RadioButtonOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # RadioButtonOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RadioButtonOptionForm.Controls.Add($RadioButtonOptionBtmPanel)_x000D__x000A_  $RadioButtonOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RadioButtonOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $RadioButtonOptionBtmPanel.Name = "RadioButtonOptionBtmPanel"_x000D__x000A_  #endregion $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $RadioButtonOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($RadioButtonOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmLeftButton)_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $RadioButtonOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $RadioButtonOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $RadioButtonOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Name = "RadioButtonOptionBtmLeftButton"_x000D__x000A_  $RadioButtonOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $RadioButtonOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $RadioButtonOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $RadioButtonOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionBtmLeftButtonClick ********_x000D__x000A_  Function Start-RadioButtonOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If (@($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "RadioButton") -and $PSItem.Checked }).Count -eq 1)_x000D__x000A_    {_x000D__x000A_      $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($RadioButtonOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionBtmLeftButtonClick ********_x000D__x000A_  $RadioButtonOptionBtmLeftButton.add_Click({ Start-RadioButtonOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmMidButton)_x000D__x000A_  $RadioButtonOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $RadioButtonOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $RadioButtonOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $RadioButtonOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $RadioButtonOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $RadioButtonOptionBtmMidButton.Location = [System.Drawing.Point]::New(($RadioButtonOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $RadioButtonOptionBtmMidButton.Name = "RadioButtonOptionBtmMidButton"_x000D__x000A_  $RadioButtonOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $RadioButtonOptionBtmMidButton.TabStop = $True_x000D__x000A_  $RadioButtonOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $RadioButtonOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $RadioButtonOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionBtmMidButtonClick ********_x000D__x000A_  Function Start-RadioButtonOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($RadioButton In @($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))_x000D__x000A_    {_x000D__x000A_      $RadioButton.Checked = ($RadioButton.Tag -eq $Selected)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionBtmMidButtonClick ********_x000D__x000A_  $RadioButtonOptionBtmMidButton.add_Click({ Start-RadioButtonOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmRightButton)_x000D__x000A_  $RadioButtonOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $RadioButtonOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $RadioButtonOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $RadioButtonOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $RadioButtonOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $RadioButtonOptionBtmRightButton.Location = [System.Drawing.Point]::New(($RadioButtonOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $RadioButtonOptionBtmRightButton.Name = "RadioButtonOptionBtmRightButton"_x000D__x000A_  $RadioButtonOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $RadioButtonOptionBtmRightButton.TabStop = $True_x000D__x000A_  $RadioButtonOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $RadioButtonOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $RadioButtonOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RadioButtonOptionBtmRightButtonClick ********_x000D__x000A_  Function Start-RadioButtonOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the RadioButtonOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the RadioButtonOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-RadioButtonOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RadioButtonOptionBtmRightButtonClick ********_x000D__x000A_  $RadioButtonOptionBtmRightButton.add_Click({ Start-RadioButtonOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $RadioButtonOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($RadioButtonOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($RadioButtonOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $RadioButtonOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $RadioButtonOptionForm.ClientSize = [System.Drawing.Size]::New($RadioButtonOptionForm.ClientSize.Width, ($RadioButtonOptionGroupBox.Bottom + [MyConfig]::FormSpacer + $RadioButtonOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for RadioButtonOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** RadioButtonOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $RadioButtonOptionForm.ShowDialog($PILForm)_x000D__x000A_  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    $TempItem = @{}_x000D__x000A_    $RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" -and $PSItem.Checked } | ForEach-Object -Process { $TempItem.Add($PSItem.Text, $PSItem.Tag) }_x000D__x000A_    [RadioButtonOption]::New($True, $DialogResult, $TempItem)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [RadioButtonOption]::New($False, $DialogResult)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $RadioButtonOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-RadioButtonOption"_x000D__x000A_}_x000D__x000A_#endregion function Get-RadioButtonOption_x000D__x000A__x000D__x000A_# ------------------------------_x000D__x000A_# Get CheckBoxOption Function_x000D__x000A_# ------------------------------_x000D__x000A_#region CheckBoxOption Result Class_x000D__x000A_Class CheckBoxOption_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [HashTable]$Items = @{}_x000D__x000A__x000D__x000A_  CheckBoxOption ([Bool]$Success, [Object]$DialogResult)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_  }_x000D__x000A__x000D__x000A_  CheckBoxOption ([Bool]$Success, [Object]$DialogResult, [HashTable]$Items)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Items = $Items_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion CheckBoxOption Result Class_x000D__x000A__x000D__x000A_#region function Get-CheckBoxOption_x000D__x000A_Function Get-CheckBoxOption ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-CheckBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-CheckBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-CheckBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Selected Items_x000D__x000A_    .PARAMETER OrderedItems_x000D__x000A_      Ordered List (HashTable) if Names and Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      With of Get-CheckBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4" }_x000D__x000A_      $DialogResult = Get-CheckBoxOption -Title "Get CheckBox Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected @("1", "4") -Required_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [Object[]]$Selected = @(),_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$Required_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-CheckBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** CheckBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $CheckBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $CheckBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $CheckBoxOptionForm.KeyPreview = $True_x000D__x000A_  $CheckBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $CheckBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $CheckBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $CheckBoxOptionForm.Name = "CheckBoxOptionForm"_x000D__x000A_  $CheckBoxOptionForm.Owner = $PILForm_x000D__x000A_  $CheckBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $CheckBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $CheckBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionFormKeyDown ********_x000D__x000A_  Function Start-CheckBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the CheckBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the CheckBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$CheckBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $CheckBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$CheckBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionFormKeyDown ********_x000D__x000A_  $CheckBoxOptionForm.add_KeyDown({ Start-CheckBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionFormShown ********_x000D__x000A_  Function Start-CheckBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the CheckBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the CheckBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$CheckBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$CheckBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionFormShown ********_x000D__x000A_  $CheckBoxOptionForm.add_Shown({ Start-CheckBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for CheckBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionForm.Controls.Add($CheckBoxOptionPanel)_x000D__x000A_  $CheckBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $CheckBoxOptionPanel.Name = "CheckBoxOptionPanel"_x000D__x000A_  #$CheckBoxOptionPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)_x000D__x000A_  #endregion $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckBoxOptionPanel.Controls.Add($CheckBoxOptionLabel)_x000D__x000A_    $CheckBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $CheckBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $CheckBoxOptionLabel.Name = "CheckBoxOptionLabel"_x000D__x000A_    $CheckBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $CheckBoxOptionLabel.Text = $Message_x000D__x000A_    $CheckBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($CheckBoxOptionLabel.Text, [MyConfig]::Font.Regular, $CheckBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $CheckBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $CheckBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempBottom = [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $CheckBoxOptionPanel.Controls.Add($CheckBoxOptionGroupBox)_x000D__x000A_  $CheckBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $CheckBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $CheckBoxOptionGroupBox.Name = "CheckBoxOptionGroupBox"_x000D__x000A_  $CheckBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_  $CheckBoxOptionGroupBox.Text = $Null_x000D__x000A_  #endregion $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $CheckBoxOptionNumber = 0_x000D__x000A_  $GroupBottom = [MyConfig]::Font.Height_x000D__x000A_  ForEach ($Key In $OrderedItems.Keys)_x000D__x000A_  {_x000D__x000A_    #region $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()_x000D__x000A_    $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()_x000D__x000A_    $CheckBoxOptionGroupBox.Controls.Add($CheckBoxOptionCheckBox)_x000D__x000A_    #$CheckBoxOptionCheckBox.AutoCheck = $True_x000D__x000A_    $CheckBoxOptionCheckBox.AutoSize = $True_x000D__x000A_    $CheckBoxOptionCheckBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $CheckBoxOptionCheckBox.Checked = ($OrderedItems[$Key] -in $Selected)_x000D__x000A_    $CheckBoxOptionCheckBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $CheckBoxOptionCheckBox.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $CheckBoxOptionCheckBox.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)_x000D__x000A_    $CheckBoxOptionCheckBox.Name = "CheckBox$($CheckBoxOptionNumber)"_x000D__x000A_    $CheckBoxOptionCheckBox.Tag = $OrderedItems[$Key]_x000D__x000A_    $CheckBoxOptionCheckBox.Text = $Key_x000D__x000A_    #endregion $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()_x000D__x000A__x000D__x000A_    $GroupBottom = ($CheckBoxOptionCheckBox.Bottom + [MyConfig]::FormSpacer)_x000D__x000A_    $CheckBoxOptionNumber += 1_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $CheckBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($CheckBoxOptionGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** $CheckBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckBoxOptionForm.Controls.Add($CheckBoxOptionBtmPanel)_x000D__x000A_  $CheckBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $CheckBoxOptionBtmPanel.Name = "CheckBoxOptionBtmPanel"_x000D__x000A_  #endregion $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($CheckBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmLeftButton)_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $CheckBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Name = "CheckBoxOptionBtmLeftButton"_x000D__x000A_  $CheckBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $CheckBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $CheckBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionBtmLeftButtonClick ********_x000D__x000A_  Function Start-CheckBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($Required.IsPresent)_x000D__x000A_    {_x000D__x000A_      If (@($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "CheckBox") -and $PSItem.Checked }).Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        [Void][System.Windows.Forms.MessageBox]::Show($CheckBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $CheckBoxOptionBtmLeftButton.add_Click({ Start-CheckBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmMidButton)_x000D__x000A_  $CheckBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $CheckBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($CheckBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckBoxOptionBtmMidButton.Name = "CheckBoxOptionBtmMidButton"_x000D__x000A_  $CheckBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $CheckBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $CheckBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $CheckBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $CheckBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionBtmMidButtonClick ********_x000D__x000A_  Function Start-CheckBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($CheckBox In @($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))_x000D__x000A_    {_x000D__x000A_      $CheckBox.Checked = ($CheckBox.Tag -in $Selected)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionBtmMidButtonClick ********_x000D__x000A_  $CheckBoxOptionBtmMidButton.add_Click({ Start-CheckBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmRightButton)_x000D__x000A_  $CheckBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $CheckBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($CheckBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckBoxOptionBtmRightButton.Name = "CheckBoxOptionBtmRightButton"_x000D__x000A_  $CheckBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $CheckBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $CheckBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $CheckBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckBoxOptionBtmRightButtonClick ********_x000D__x000A_  Function Start-CheckBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By CDUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckBoxOptionBtmRightButtonClick ********_x000D__x000A_  $CheckBoxOptionBtmRightButton.add_Click({ Start-CheckBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $CheckBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($CheckBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($CheckBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $CheckBoxOptionForm.ClientSize = [System.Drawing.Size]::New($CheckBoxOptionForm.ClientSize.Width, ($CheckBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer + $CheckBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for CheckBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** CheckBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $CheckBoxOptionForm.ShowDialog($PILForm)_x000D__x000A_  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    $TempItems = @{}_x000D__x000A_    $CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "CheckBox*" -and $PSItem.Checked } | ForEach-Object -Process { $TempItems.Add($PSItem.Text, $PSItem.Tag) }_x000D__x000A_    [CheckBoxOption]::New($True, $DialogResult, $TempItems)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [CheckBoxOption]::New($False, $DialogResult)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $CheckBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-CheckBoxOption"_x000D__x000A_}_x000D__x000A_#endregion function Get-CheckBoxOption_x000D__x000A__x000D__x000A_# ------------------------------_x000D__x000A_# Get ListBoxOption Function_x000D__x000A_# ------------------------------_x000D__x000A_#region ListBoxOption Result Class_x000D__x000A_Class ListBoxOption_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [Object[]]$Items_x000D__x000A__x000D__x000A_  ListBoxOption ([Bool]$Success, [Object]$DialogResult, [Object[]]$Items)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Items = $Items_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ListBoxOption Result Class_x000D__x000A__x000D__x000A_#region function Get-ListBoxOption_x000D__x000A_function Get-ListBoxOption ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ListBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ListBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ListView_x000D__x000A_    .PARAMETER Sorted_x000D__x000A_      Sort ListView_x000D__x000A_    .PARAMETER Multi_x000D__x000A_      Allow Selecting Multiple Items_x000D__x000A_    .PARAMETER DisplayMember_x000D__x000A_      Name of the Property to Display in the ListBox_x000D__x000A_    .PARAMETER ValueMember_x000D__x000A_      Name of the Property for the Value_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected ListBox Items_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Get-ListBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Middle Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Items = Get-Service_x000D__x000A_      $DialogResult = Get-ListBoxOption -Title "Get ListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7] -Multi_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [Switch]$Sorted,_x000D__x000A_    [Switch]$Multi,_x000D__x000A_    [String]$DisplayMember = "Text",_x000D__x000A_    [String]$ValueMember = "Value",_x000D__x000A_    [Object[]]$Selected,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [Int]$Height = 20,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$Required_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ListBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ListBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ListBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ListBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ListBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $ListBoxOptionForm.KeyPreview = $True_x000D__x000A_  $ListBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $ListBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $ListBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ListBoxOptionForm.Name = "ListBoxOptionForm"_x000D__x000A_  $ListBoxOptionForm.Owner = $PILForm_x000D__x000A_  $ListBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $ListBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ListBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $ListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionFormKeyDown ********_x000D__x000A_  function Start-ListBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionFormKeyDown ********_x000D__x000A_  $ListBoxOptionForm.add_KeyDown({ Start-ListBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionFormShown ********_x000D__x000A_  function Start-ListBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionFormShown ********_x000D__x000A_  $ListBoxOptionForm.add_Shown({ Start-ListBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ListBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionForm.Controls.Add($ListBoxOptionPanel)_x000D__x000A_  $ListBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ListBoxOptionPanel.Name = "ListBoxOptionPanel"_x000D__x000A_  #endregion $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListBoxOptionPanel.Controls.Add($ListBoxOptionLabel)_x000D__x000A_    $ListBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $ListBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $ListBoxOptionLabel.Name = "ListBoxOptionLabel"_x000D__x000A_    $ListBoxOptionLabel.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $ListBoxOptionLabel.Text = $Message_x000D__x000A_    $ListBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ListBoxOptionLabel.Text, [MyConfig]::Font.Regular, $ListBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $ListBoxOptionLabel.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $ListBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ListBoxOptionPanel.Controls.Add($ListBoxOptionGroupBox)_x000D__x000A_  $ListBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ListBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $ListBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ListBoxOptionGroupBox.Name = "ListBoxOptionGroupBox"_x000D__x000A_  $ListBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), ($ListBoxOptionPanel.Height - ($ListBoxOptionGroupBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  #endregion $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $ListBoxOptionGroupBox.Controls.Add($ListBoxOptionListBox)_x000D__x000A_  $ListBoxOptionListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $ListBoxOptionListBox.AutoSize = $True_x000D__x000A_  $ListBoxOptionListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ListBoxOptionListBox.DisplayMember = $DisplayMember_x000D__x000A_  $ListBoxOptionListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ListBoxOptionListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ListBoxOptionListBox.Name = "ListBoxOptionListBox"_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One_x000D__x000A_  }_x000D__x000A_  $ListBoxOptionListBox.Sorted = $Sorted.IsPresent_x000D__x000A_  $ListBoxOptionListBox.TabIndex = 0_x000D__x000A_  $ListBoxOptionListBox.TabStop = $True_x000D__x000A_  $ListBoxOptionListBox.Tag = $Null_x000D__x000A_  $ListBoxOptionListBox.ValueMember = $ValueMember_x000D__x000A_  #endregion $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A__x000D__x000A_  $ListBoxOptionListBox.Items.AddRange($Items)_x000D__x000A_  if ($PSBoundParameters.ContainsKey("Selected"))_x000D__x000A_  {_x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag = @($Items | Where-Object -FilterScript { $PSItem -in $Selected} )_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag = @($Items | Select-Object -First 1 )_x000D__x000A_    }_x000D__x000A_    $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_    $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.Tag = @()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-ListBoxOptionListBoxMouseDown ********_x000D__x000A_  function Start-ListBoxOptionListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$ListBoxOptionListBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($ListBoxOptionListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $ListBoxOptionContextMenuStrip.Show($ListBoxOptionListBox, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$ListBoxOptionListBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionListBoxMouseDown ********_x000D__x000A_  if ($Multi.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListBoxOptionListBox.add_MouseDown({ Start-ListBoxOptionListBoxMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  $ListBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($ListBoxOptionGroupBox.ClientSize.Width, ($ListBoxOptionListBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOption ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$ListBoxOptionListView.Controls.Add($ListBoxOptionContextMenuStrip)_x000D__x000A_  $ListBoxOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$ListBoxOptionContextMenuStrip.Enabled = $True_x000D__x000A_  $ListBoxOptionContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListBoxOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ListBoxOptionContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $ListBoxOptionContextMenuStrip.Name = "ListBoxOptionContextMenuStrip"_x000D__x000A_  #endregion $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionContextMenuStripOpening ********_x000D__x000A_  function Start-ListBoxOptionContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the ListBoxOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the ListBoxOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$ListBoxOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$ListBoxOptionContextMenuStrip"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionContextMenuStripOpening ********_x000D__x000A_  $ListBoxOptionContextMenuStrip.add_Opening({Start-ListBoxOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionContextMenuStripItemClick ********_x000D__x000A_  function Start-ListBoxOptionContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "SelectAll"_x000D__x000A_      {_x000D__x000A_        @($ListBoxOptionListBox.Items) | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnSelectAll"_x000D__x000A_      {_x000D__x000A_        $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionContextMenuStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $ListBoxOptionContextMenuStrip -Text "Select All" -Name "SelectAll" -Tag "SelectAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-ListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $ListBoxOptionContextMenuStrip -Text "Unselect All" -Name "UnSelectAll" -Tag "UnSelectAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-ListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $ListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($ListBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($ListBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListBoxOptionForm.Controls.Add($ListBoxOptionBtmPanel)_x000D__x000A_  $ListBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ListBoxOptionBtmPanel.Name = "ListBoxOptionBtmPanel"_x000D__x000A_  #endregion $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ListBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmLeftButton)_x000D__x000A_  $ListBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ListBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ListBoxOptionBtmLeftButton.Name = "ListBoxOptionBtmLeftButton"_x000D__x000A_  $ListBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $ListBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $ListBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ListBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ListBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-ListBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($ListBoxOptionListBox.SelectedIndex -gt 0)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $ListBoxOptionBtmLeftButton.add_Click({ Start-ListBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmMidButton)_x000D__x000A_  $ListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ListBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ListBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListBoxOptionBtmMidButton.Name = "ListBoxOptionBtmMidButton"_x000D__x000A_  $ListBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $ListBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $ListBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ListBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ListBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionBtmMidButtonClick ********_x000D__x000A_  function Start-ListBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ListBoxOptionListBox.SelectedItems.Clear()_x000D__x000A_    if ($ListBoxOptionListBox.Tag.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionBtmMidButtonClick ********_x000D__x000A_  $ListBoxOptionBtmMidButton.add_Click({ Start-ListBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmRightButton)_x000D__x000A_  $ListBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ListBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ListBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListBoxOptionBtmRightButton.Name = "ListBoxOptionBtmRightButton"_x000D__x000A_  $ListBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $ListBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $ListBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ListBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ListBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListBoxOptionBtmRightButtonClick ********_x000D__x000A_  function Start-ListBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListBoxOptionBtmRightButtonClick ********_x000D__x000A_  $ListBoxOptionBtmRightButton.add_Click({ Start-ListBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ListBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ListBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ListBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ListBoxOptionForm.ClientSize = [System.Drawing.Size]::New($ListBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $ListBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ListBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ListBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ListBoxOptionForm.ShowDialog()_x000D__x000A_  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    [ListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $ListBoxOptionListBox.SelectedItems)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [ListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @())_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ListBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ListBoxOption"_x000D__x000A_}_x000D__x000A_#endregion function Get-ListBoxOption_x000D__x000A__x000D__x000A_# --------------------------------_x000D__x000A_# Get CheckedListBoxOption Function_x000D__x000A_# --------------------------------_x000D__x000A_#region CheckedListBoxOption Result Class_x000D__x000A_Class CheckedListBoxOption_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [Object[]]$Items_x000D__x000A__x000D__x000A_  CheckedListBoxOption ([Bool]$Success, [Object]$DialogResult, [Object[]]$Items)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Items = $Items_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion CheckedListBoxOption Result Class_x000D__x000A__x000D__x000A_#region function Get-CheckedListBoxOption_x000D__x000A_function Get-CheckedListBoxOption ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-CheckedListBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-CheckedListBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-CheckedListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ListView_x000D__x000A_    .PARAMETER Sorted_x000D__x000A_      Sort ListView_x000D__x000A_    .PARAMETER DisplayMember_x000D__x000A_      Name of the Property to Display in the CheckedListBox_x000D__x000A_    .PARAMETER ValueMember_x000D__x000A_      Name of the Property for the Value_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected CheckedListBox Items_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-CheckedListBoxOption Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Get-CheckedListBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Items = Get-Service_x000D__x000A_      $DialogResult = CheckedGet-CheckedListBoxOption -Title "Get CheckListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7]_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [Switch]$Sorted,_x000D__x000A_    [String]$DisplayMember = "Text",_x000D__x000A_    [String]$ValueMember = "Value",_x000D__x000A_    [Object[]]$Selected,_x000D__x000A_    [Int]$Width = 25,_x000D__x000A_    [Int]$Height = 20,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel",_x000D__x000A_    [Switch]$Required_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-CheckedListBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** CheckedListBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $CheckedListBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckedListBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $CheckedListBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $CheckedListBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $CheckedListBoxOptionForm.KeyPreview = $True_x000D__x000A_  $CheckedListBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $CheckedListBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $CheckedListBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $CheckedListBoxOptionForm.Name = "CheckedListBoxOptionForm"_x000D__x000A_  $CheckedListBoxOptionForm.Owner = $PILForm_x000D__x000A_  $CheckedListBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $CheckedListBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $CheckedListBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionFormKeyDown ********_x000D__x000A_  function Start-CheckedListBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$CheckedListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$CheckedListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionFormKeyDown ********_x000D__x000A_  $CheckedListBoxOptionForm.add_KeyDown({ Start-CheckedListBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionFormShown ********_x000D__x000A_  function Start-CheckedListBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the CheckedListBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$CheckedListBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$CheckedListBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionFormShown ********_x000D__x000A_  $CheckedListBoxOptionForm.add_Shown({ Start-CheckedListBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for CheckedListBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionForm.Controls.Add($CheckedListBoxOptionPanel)_x000D__x000A_  $CheckedListBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckedListBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $CheckedListBoxOptionPanel.Name = "CheckedListBoxOptionPanel"_x000D__x000A_  #endregion $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckedListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $CheckedListBoxOptionPanel.Controls.Add($CheckedListBoxOptionLabel)_x000D__x000A_    $CheckedListBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $CheckedListBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $CheckedListBoxOptionLabel.Name = "CheckedListBoxOptionLabel"_x000D__x000A_    $CheckedListBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $CheckedListBoxOptionLabel.Text = $Message_x000D__x000A_    $CheckedListBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($CheckedListBoxOptionLabel.Text, [MyConfig]::Font.Regular, $CheckedListBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $CheckedListBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $CheckedListBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $CheckedListBoxOptionPanel.Controls.Add($CheckedListBoxOptionGroupBox)_x000D__x000A_  $CheckedListBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $CheckedListBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $CheckedListBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $CheckedListBoxOptionGroupBox.Name = "CheckedListBoxOptionGroupBox"_x000D__x000A_  $CheckedListBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), ($CheckedListBoxOptionPanel.Height - ($CheckedListBoxOptionGroupBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  #endregion $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckedListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()_x000D__x000A_  $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()_x000D__x000A_  $CheckedListBoxOptionGroupBox.Controls.Add($CheckedListBoxOptionCheckedListBox)_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.AutoSize = $True_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.CheckOnClick = $True_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.DisplayMember = $DisplayMember_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Name = "CheckedListBoxOptionCheckedListBox"_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Sorted = $Sorted.IsPresent_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.TabIndex = 0_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Tag = $Null_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.ValueMember = $ValueMember_x000D__x000A_  #endregion $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionCheckedListBox.Items.AddRange($Items)_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Selected"))_x000D__x000A_  {_x000D__x000A_    $CheckedListBoxOptionCheckedListBox.Tag = @($Items | Where-Object -FilterScript { $PSItem -in $Selected})_x000D__x000A_    $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $CheckedListBoxOptionCheckedListBox.Tag = @()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionCheckedListBoxMouseDown ********_x000D__x000A_  function Start-CheckedListBoxOptionCheckedListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.CheckedListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$CheckedListBoxOptionCheckedListBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($CheckedListBoxOptionCheckedListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $CheckedListBoxOptionContextMenuStrip.Show($CheckedListBoxOptionCheckedListBox, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$CheckedListBoxOptionCheckedListBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionCheckedListBoxMouseDown ********_x000D__x000A_  $CheckedListBoxOptionCheckedListBox.add_MouseDown({ Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($CheckedListBoxOptionGroupBox.ClientSize.Width, ($CheckedListBoxOptionCheckedListBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOption ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$CheckedListBoxOptionListView.Controls.Add($CheckedListBoxOptionContextMenuStrip)_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$CheckedListBoxOptionContextMenuStrip.Enabled = $True_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.Name = "CheckedListBoxOptionContextMenuStrip"_x000D__x000A_  #endregion $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionContextMenuStripOpening ********_x000D__x000A_  function Start-CheckedListBoxOptionContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the CheckedListBoxOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the CheckedListBoxOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$CheckedListBoxOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$CheckedListBoxOptionContextMenuStrip"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionContextMenuStripOpening ********_x000D__x000A_  $CheckedListBoxOptionContextMenuStrip.add_Opening({Start-CheckedListBoxOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionContextMenuStripItemClick ********_x000D__x000A_  function Start-CheckedListBoxOptionContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "CheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_        (0..$($CheckedListBoxOptionCheckedListBox.Items.Count - 1)) | Where-Object -FilterScript { $PSItem -notin $TmpCheckedItems } | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $True) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnCheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_        $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionContextMenuStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $CheckedListBoxOptionContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $CheckedListBoxOptionContextMenuStrip -Text "Uncheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $CheckedListBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($CheckedListBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($CheckedListBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckedListBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # CheckedListBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $CheckedListBoxOptionForm.Controls.Add($CheckedListBoxOptionBtmPanel)_x000D__x000A_  $CheckedListBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Name = "CheckedListBoxOptionBtmPanel"_x000D__x000A_  #endregion $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $CheckedListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($CheckedListBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmLeftButton)_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Name = "CheckedListBoxOptionBtmLeftButton"_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckedListBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-CheckedListBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($CheckedListBoxOptionCheckedListBox.CheckedItems.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($CheckedListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $CheckedListBoxOptionBtmLeftButton.add_Click({ Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmMidButton)_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($CheckedListBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Name = "CheckedListBoxOptionBtmMidButton"_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $CheckedListBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionBtmMidButtonClick ********_x000D__x000A_  function Start-CheckedListBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)_x000D__x000A_    $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }_x000D__x000A_    if ($CheckedListBoxOptionCheckedListBox.Tag.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionBtmMidButtonClick ********_x000D__x000A_  $CheckedListBoxOptionBtmMidButton.add_Click({ Start-CheckedListBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmRightButton)_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($CheckedListBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Name = "CheckedListBoxOptionBtmRightButton"_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckedListBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-CheckedListBoxOptionBtmRightButtonClick ********_x000D__x000A_  function Start-CheckedListBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the CheckedListBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-CheckedListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-CheckedListBoxOptionBtmRightButtonClick ********_x000D__x000A_  $CheckedListBoxOptionBtmRightButton.add_Click({ Start-CheckedListBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($CheckedListBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($CheckedListBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $CheckedListBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionForm.ClientSize = [System.Drawing.Size]::New($CheckedListBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $CheckedListBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for CheckedListBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** CheckedListBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $CheckedListBoxOptionForm.ShowDialog()_x000D__x000A_  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    [CheckedListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $CheckedListBoxOptionCheckedListBox.CheckedItems)_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [CheckedListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @())_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $CheckedListBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-CheckedListBoxOption"_x000D__x000A_}_x000D__x000A_#endregion function Get-CheckedListBoxOption_x000D__x000A__x000D__x000A_# --------------------------------_x000D__x000A_# Get ComboBoxOption Function_x000D__x000A_# --------------------------------_x000D__x000A_#region ComboBoxOption Result Class_x000D__x000A_Class ComboBoxOption_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [Object]$Item_x000D__x000A__x000D__x000A_  ComboBoxOption ([Bool]$Success, [Object]$DialogResult, [Object]$Item)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Item = $Item_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ComboBoxOption Result Class_x000D__x000A__x000D__x000A_#region function Get-ComboBoxOption_x000D__x000A_function Get-ComboBoxOption ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ComboBoxOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ComboBoxOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ComboBoxOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ComboBox_x000D__x000A_    .PARAMETER Sorted_x000D__x000A_      Sort ComboBox_x000D__x000A_    .PARAMETER SelectText_x000D__x000A_      The Default Selected Item when no Value is Selected_x000D__x000A_    .PARAMETER DisplayMember_x000D__x000A_      Name of the Property to Display in the CheckedListBox_x000D__x000A_    .PARAMETER ValueMember_x000D__x000A_      Name of the Property for the Value_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected ComboBox Item_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ComboBoxOption Dialog Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Variables = @(Get-ChildItem -Path "Variable:\")_x000D__x000A_      $DialogResult = Get-ComboBoxOption -Title "Combo Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Variables -DisplayMember "Name" -ValueMember "Value" -Selected ($Variables[4])_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [Switch]$Sorted,_x000D__x000A_    [String]$SelectText = "Select Value",_x000D__x000A_    [String]$DisplayMember = "Text",_x000D__x000A_    [String]$ValueMember = "Value",_x000D__x000A_    [Object]$Selected,_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ComboBoxOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ComboBoxOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ComboBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ComboBoxOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $ComboBoxOptionForm.KeyPreview = $True_x000D__x000A_  $ComboBoxOptionForm.MaximizeBox = $False_x000D__x000A_  $ComboBoxOptionForm.MinimizeBox = $False_x000D__x000A_  $ComboBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $ComboBoxOptionForm.Name = "ComboBoxOptionForm"_x000D__x000A_  $ComboBoxOptionForm.Owner = $PILForm_x000D__x000A_  $ComboBoxOptionForm.ShowInTaskbar = $False_x000D__x000A_  $ComboBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ComboBoxOptionForm.Text = $Title_x000D__x000A_  #endregion $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionFormKeyDown ********_x000D__x000A_  function Start-ComboBoxOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ComboBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ComboBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ComboBoxOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionFormKeyDown ********_x000D__x000A_  $ComboBoxOptionForm.add_KeyDown({ Start-ComboBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionFormShown ********_x000D__x000A_  function Start-ComboBoxOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ComboBoxOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ComboBoxOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ComboBoxOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ComboBoxOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionFormShown ********_x000D__x000A_  $ComboBoxOptionForm.add_Shown({ Start-ComboBoxOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ComboBoxOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionForm.Controls.Add($ComboBoxOptionPanel)_x000D__x000A_  $ComboBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ComboBoxOptionPanel.Name = "ComboBoxOptionPanel"_x000D__x000A_  #endregion $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ComboBoxOptionPanel.Controls.Add($ComboBoxOptionLabel)_x000D__x000A_    $ComboBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $ComboBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $ComboBoxOptionLabel.Name = "ComboBoxOptionLabel"_x000D__x000A_    $ComboBoxOptionLabel.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $ComboBoxOptionLabel.Text = $Message_x000D__x000A_    $ComboBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ComboBoxOptionLabel.Text, [MyConfig]::Font.Regular, $ComboBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $ComboBoxOptionLabel.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TmpBottom = $ComboBoxOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TmpBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOption GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ComboBoxOptionPanel.Controls.Add($ComboBoxOptionGroupBox)_x000D__x000A_  $ComboBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxOptionGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $ComboBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ComboBoxOptionGroupBox.Name = "ComboBoxOptionGroupBox"_x000D__x000A_  $ComboBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)_x000D__x000A_  #endregion $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_  $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_  $ComboBoxOptionGroupBox.Controls.Add($GetComboChoiceComboBox)_x000D__x000A_  $GetComboChoiceComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $GetComboChoiceComboBox.AutoSize = $True_x000D__x000A_  $GetComboChoiceComboBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $GetComboChoiceComboBox.DisplayMember = $DisplayMember_x000D__x000A_  $GetComboChoiceComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList_x000D__x000A_  $GetComboChoiceComboBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $GetComboChoiceComboBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  [void]$GetComboChoiceComboBox.Items.Add([PSCustomObject]@{ $DisplayMember = " - $($SelectText) - "; $ValueMember = " - $($SelectText) - "})_x000D__x000A_  $GetComboChoiceComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $GetComboChoiceComboBox.Name = "GetComboChoiceComboBox"_x000D__x000A_  $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_  $GetComboChoiceComboBox.Size = [System.Drawing.Size]::New(($ComboBoxOptionGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $GetComboChoiceComboBox.PreferredHeight)_x000D__x000A_  $GetComboChoiceComboBox.Sorted = $Sorted.IsPresent_x000D__x000A_  $GetComboChoiceComboBox.TabIndex = 0_x000D__x000A_  $GetComboChoiceComboBox.TabStop = $True_x000D__x000A_  $GetComboChoiceComboBox.Tag = $Null_x000D__x000A_  $GetComboChoiceComboBox.ValueMember = $ValueMember_x000D__x000A_  #endregion $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A__x000D__x000A_  $GetComboChoiceComboBox.Items.AddRange($Items)_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Selected"))_x000D__x000A_  {_x000D__x000A_    $GetComboChoiceComboBox.Tag = $Items | Where-Object -FilterScript { $PSItem -eq $Selected}_x000D__x000A_    $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ComboBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($ComboBoxOptionGroupBox.ClientSize.Width, ($GetComboChoiceComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxOptionGroupBox Controls ********_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($ComboBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($ComboBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxOptionForm.Controls.Add($ComboBoxOptionBtmPanel)_x000D__x000A_  $ComboBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ComboBoxOptionBtmPanel.Name = "ComboBoxOptionBtmPanel"_x000D__x000A_  #endregion $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ComboBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmLeftButton)_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ComboBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Name = "ComboBoxOptionBtmLeftButton"_x000D__x000A_  $ComboBoxOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $ComboBoxOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ComboBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-ComboBoxOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ComboBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($GetComboChoiceComboBox.SelectedIndex -gt 0)_x000D__x000A_    {_x000D__x000A_      $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionBtmLeftButtonClick ********_x000D__x000A_  $ComboBoxOptionBtmLeftButton.add_Click({ Start-ComboBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmMidButton)_x000D__x000A_  $ComboBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ComboBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ComboBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ComboBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxOptionBtmMidButton.Name = "ComboBoxOptionBtmMidButton"_x000D__x000A_  $ComboBoxOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $ComboBoxOptionBtmMidButton.TabStop = $True_x000D__x000A_  $ComboBoxOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ComboBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ComboBoxOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionBtmMidButtonClick ********_x000D__x000A_  function Start-ComboBoxOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ([String]::IsNullOrEmpty($GetComboChoiceComboBox.Tag))_x000D__x000A_    {_x000D__x000A_      $GetComboChoiceComboBox.SelectedIndex = 0_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionBtmMidButtonClick ********_x000D__x000A_  $ComboBoxOptionBtmMidButton.add_Click({ Start-ComboBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmRightButton)_x000D__x000A_  $ComboBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ComboBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ComboBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxOptionBtmRightButton.Name = "ComboBoxOptionBtmRightButton"_x000D__x000A_  $ComboBoxOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $ComboBoxOptionBtmRightButton.TabStop = $True_x000D__x000A_  $ComboBoxOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ComboBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxOptionBtmRightButtonClick ********_x000D__x000A_  function Start-ComboBoxOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxOptionBtmRightButtonClick ********_x000D__x000A_  $ComboBoxOptionBtmRightButton.add_Click({ Start-ComboBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ComboBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ComboBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ComboBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ComboBoxOptionForm.ClientSize = [System.Drawing.Size]::New($ComboBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $ComboBoxOptionBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ComboBoxOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ComboBoxOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ComboBoxOptionForm.ShowDialog()_x000D__x000A_  [ComboBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $GetComboChoiceComboBox.SelectedItem)_x000D__x000A__x000D__x000A_  $ComboBoxOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ComboBoxOption"_x000D__x000A_}_x000D__x000A_#endregion function Get-ComboBoxOption_x000D__x000A__x000D__x000A__x000D__x000A_# --------------------------------_x000D__x000A_# Get ComboBoxFilter Function_x000D__x000A_# --------------------------------_x000D__x000A_#region ComboBoxFilterItem Class_x000D__x000A_Class ComboBoxFilterItem_x000D__x000A_{_x000D__x000A_  [String]$Text_x000D__x000A_  [Object]$Value_x000D__x000A_  _x000D__x000A_  ComboBoxFilterItem ([String]$Text, [Object]$Value)_x000D__x000A_  {_x000D__x000A_    $This.Text = $Text_x000D__x000A_    $This.Value = $Value_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ComboBoxFilterItem Class_x000D__x000A__x000D__x000A_#region ComboBoxFilter Result Class_x000D__x000A_Class ComboBoxFilter_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [HashTable]$Values_x000D__x000A__x000D__x000A_  ComboBoxFilter ([Bool]$Success, [Object]$DialogResult, [HashTable]$Values)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Values = $Values_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ComboBoxFilter Result Class_x000D__x000A__x000D__x000A_#region function Get-ComboBoxFilter_x000D__x000A_Function Get-ComboBoxFilter ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ComboBoxFilter_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ComboBoxFilter_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ComboBoxFilter Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ComboBox_x000D__x000A_    .PARAMETER Properties_x000D__x000A_      Name of the Properties to Filter On_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Default Selected ComboBox Values_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ComboBoxFilter Dialog Window_x000D__x000A_    .PARAMETER NoFilter_x000D__x000A_      Do Not Filter ComBox Items from other Selected ComboBox Items_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)_x000D__x000A_      $DialogResult = Get-ComboBoxFilter -Title "Combo Filter Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $ServiceList -Properties Status, Name, StartType_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [String[]]$Properties,_x000D__x000A_    [HashTable]$Selected = @{},_x000D__x000A_    [Int]$Width = 35,_x000D__x000A_    [Switch]$NoFilter,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ComboBoxFilter"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ComboBoxFilter **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilter Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ComboBoxFilterForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxFilterForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxFilterForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ComboBoxFilterForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ComboBoxFilterForm.Icon = $PILForm.Icon_x000D__x000A_  $ComboBoxFilterForm.KeyPreview = $True_x000D__x000A_  $ComboBoxFilterForm.MaximizeBox = $False_x000D__x000A_  $ComboBoxFilterForm.MinimizeBox = $False_x000D__x000A_  $ComboBoxFilterForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $ComboBoxFilterForm.Name = "ComboBoxFilterForm"_x000D__x000A_  $ComboBoxFilterForm.Owner = $PILForm_x000D__x000A_  $ComboBoxFilterForm.ShowInTaskbar = $False_x000D__x000A_  $ComboBoxFilterForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ComboBoxFilterForm.Text = $Title_x000D__x000A_  #endregion $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterFormKeyDown ********_x000D__x000A_  Function Start-ComboBoxFilterFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ComboBoxFilter Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ComboBoxFilter Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxFilterForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxFilterForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterFormKeyDown ********_x000D__x000A_  $ComboBoxFilterForm.add_KeyDown({ Start-ComboBoxFilterFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterFormShown ********_x000D__x000A_  Function Start-ComboBoxFilterFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ComboBoxFilter Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ComboBoxFilter Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ComboBoxFilterForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ComboBoxFilterForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterFormShown ********_x000D__x000A_  $ComboBoxFilterForm.add_Shown({ Start-ComboBoxFilterFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ComboBoxFilter Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilter Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterForm.Controls.Add($ComboBoxFilterPanel)_x000D__x000A_  $ComboBoxFilterPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxFilterPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ComboBoxFilterPanel.Name = "ComboBoxFilterPanel"_x000D__x000A_  #endregion $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxFilterPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ComboBoxFilterPanel.Controls.Add($ComboBoxFilterLabel)_x000D__x000A_  $ComboBoxFilterLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_  $ComboBoxFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_  $ComboBoxFilterLabel.Name = "ComboBoxFilterLabel"_x000D__x000A_  $ComboBoxFilterLabel.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_  $ComboBoxFilterLabel.Text = $Message_x000D__x000A_  $ComboBoxFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_  #endregion $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  # Returns the minimum size required to display the text_x000D__x000A_  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ComboBoxFilterLabel.Text, [MyConfig]::Font.Regular, $ComboBoxFilterLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_  $ComboBoxFilterLabel.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_  If ($PSBoundParameters.ContainsKey("Properties"))_x000D__x000A_  {_x000D__x000A_    $FilterOptionNames = $Properties_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $FilterOptionNames = ($Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilter GroupBox_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ComboBoxFilterPanel.Controls.Add($ComboBoxFilterGroupBox)_x000D__x000A_  $ComboBoxFilterGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ComboBoxFilterGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ComboBoxFilterGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $ComboBoxFilterGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ComboBoxFilterLabel.Bottom + ([MyConfig]::FormSpacer * 2)))_x000D__x000A_  $ComboBoxFilterGroupBox.Name = "ComboBoxFilterGroupBox"_x000D__x000A_  $ComboBoxFilterGroupBox.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)_x000D__x000A_  #endregion $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxFilterGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********_x000D__x000A_  Function Start-GetComboFilterComboBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ComboBox Control that fired the SelectedIndexChanged Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ComboBox SelectedIndexChanged Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ComboBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ValidItems = @($Items)_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidItems = @($ValidItems | Where-Object -FilterScript { $PSItem.($FilterOptionName) -like $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidItemNames = @($ValidItems | Select-Object -ExpandProperty $FilterOptionName -Unique)_x000D__x000A_      If ($FilterOptionName -ne $Sender.Name)_x000D__x000A_      {_x000D__x000A_        $RemoveList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { ($PSItem.Text -notin $ValidItemNames) -and ($PSItem.Value -ne "*") })_x000D__x000A_        ForEach ($RemoveItem In $RemoveList)_x000D__x000A_        {_x000D__x000A_          $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.Remove($RemoveItem)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_      $HaveItemNames = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)_x000D__x000A_      $AddList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.Items | Where-Object -FilterScript { ($PSItem.Text -in $ValidItemNames) -and ($PSItem.Text -notin $HaveItemNames) })_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.AddRange($AddList)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********_x000D__x000A__x000D__x000A_  $GroupBottom = [MyConfig]::Font.Height_x000D__x000A_  ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_  {_x000D__x000A_    #region $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_    $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A_    $ComboBoxFilterGroupBox.Controls.Add($TmpFilterComboBox)_x000D__x000A_    $TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_    $TmpFilterComboBox.AutoSize = $True_x000D__x000A_    $TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_    $TmpFilterComboBox.DisplayMember = "Text"_x000D__x000A_    $TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList_x000D__x000A_    $TmpFilterComboBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    [void]$TmpFilterComboBox.Items.Add([PSCustomObject]@{ "Text" = " - Return All $($FilterOptionName) Values - "; "Value" = "*" })_x000D__x000A_    $TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $GroupBottom)_x000D__x000A_    $TmpFilterComboBox.Name = $FilterOptionName_x000D__x000A_    $TmpFilterComboBox.SelectedIndex = 0_x000D__x000A_    $TmpFilterComboBox.Size = [System.Drawing.Size]::New(($ComboBoxFilterGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TmpFilterComboBox.PreferredHeight)_x000D__x000A_    $TmpFilterComboBox.Sorted = $True_x000D__x000A_    $TmpFilterComboBox.TabIndex = 0_x000D__x000A_    $TmpFilterComboBox.TabStop = $True_x000D__x000A_    $TmpFilterComboBox.Tag = $Null_x000D__x000A_    $TmpFilterComboBox.ValueMember = "Value"_x000D__x000A_    #endregion $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()_x000D__x000A__x000D__x000A_    $TmpFilterComboBox.SelectedIndex = 0_x000D__x000A_    $TmpFilterComboBox.Items.AddRange(@($Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty($PSITem.($FilterOptionName)) } | Sort-Object -Property $FilterOptionName -Unique | ForEach-Object -Process { [ComboBoxFilterItem]::New($PSITem.($FilterOptionName), $PSITem.($FilterOptionName)) }))_x000D__x000A_    $TmpFilterComboBox.Tag = @{ "Items" = @($TmpFilterComboBox.Items); "SelectedItem" = $Null }_x000D__x000A__x000D__x000A_    if (-not $NoFilter.IsPresent)_x000D__x000A_    {_x000D__x000A_      $TmpFilterComboBox.add_SelectedIndexChanged({ Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $This -EventArg $PSItem })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $GroupBottom = ($TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ComboBoxFilterGroupBox.ClientSize = [System.Drawing.Size]::New($ComboBoxFilterGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxFilterGroupBox Controls ********_x000D__x000A__x000D__x000A_  ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_  {_x000D__x000A_    # $Sender_x000D__x000A_    If ($Selected.ContainsKey($FilterOptionName))_x000D__x000A_    {_x000D__x000A_      $TmpItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { $PSItem.Value -eq $Selected.($FilterOptionName) }_x000D__x000A_      If (-not [String]::IsNullOrEmpty($TmpItem.Text))_x000D__x000A_      {_x000D__x000A_        $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $TmpItem_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $TempClientSize = [System.Drawing.Size]::New(($ComboBoxFilterGroupBox.Right + [MyConfig]::FormSpacer), ($ComboBoxFilterGroupBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxFilterPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ComboBoxFilterBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ComboBoxFilterForm.Controls.Add($ComboBoxFilterBtmPanel)_x000D__x000A_  $ComboBoxFilterBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ComboBoxFilterBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ComboBoxFilterBtmPanel.Name = "ComboBoxFilterBtmPanel"_x000D__x000A_  #endregion $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ComboBoxFilterBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ComboBoxFilterBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmLeftButton)_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ComboBoxFilterBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxFilterBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxFilterBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Name = "ComboBoxFilterBtmLeftButton"_x000D__x000A_  $ComboBoxFilterBtmLeftButton.TabIndex = 1_x000D__x000A_  $ComboBoxFilterBtmLeftButton.TabStop = $True_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ComboBoxFilterBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxFilterBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterBtmLeftButtonClick ********_x000D__x000A_  Function Start-ComboBoxFilterBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ComboBoxFilterBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ValidateClick = 0_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ValidateClick = $ValidateClick + $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex_x000D__x000A_    }_x000D__x000A_    If ($ValidateClick -eq 0)_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxFilterForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterBtmLeftButtonClick ********_x000D__x000A_  $ComboBoxFilterBtmLeftButton.add_Click({ Start-ComboBoxFilterBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmMidButton)_x000D__x000A_  $ComboBoxFilterBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ComboBoxFilterBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ComboBoxFilterBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxFilterBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxFilterBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxFilterBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxFilterBtmMidButton.Location = [System.Drawing.Point]::New(($ComboBoxFilterBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxFilterBtmMidButton.Name = "ComboBoxFilterBtmMidButton"_x000D__x000A_  $ComboBoxFilterBtmMidButton.TabIndex = 2_x000D__x000A_  $ComboBoxFilterBtmMidButton.TabStop = $True_x000D__x000A_  $ComboBoxFilterBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ComboBoxFilterBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ComboBoxFilterBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterBtmMidButtonClick ********_x000D__x000A_  Function Start-ComboBoxFilterBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex = 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterBtmMidButtonClick ********_x000D__x000A_  $ComboBoxFilterBtmMidButton.add_Click({ Start-ComboBoxFilterBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmRightButton)_x000D__x000A_  $ComboBoxFilterBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ComboBoxFilterBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ComboBoxFilterBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ComboBoxFilterBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ComboBoxFilterBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ComboBoxFilterBtmRightButton.Location = [System.Drawing.Point]::New(($ComboBoxFilterBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ComboBoxFilterBtmRightButton.Name = "ComboBoxFilterBtmRightButton"_x000D__x000A_  $ComboBoxFilterBtmRightButton.TabIndex = 3_x000D__x000A_  $ComboBoxFilterBtmRightButton.TabStop = $True_x000D__x000A_  $ComboBoxFilterBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ComboBoxFilterBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxFilterBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ComboBoxFilterBtmRightButtonClick ********_x000D__x000A_  Function Start-ComboBoxFilterBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ComboBoxFilterBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ComboBoxFilterBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ComboBoxFilterBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ComboBoxFilterBtmRightButtonClick ********_x000D__x000A_  $ComboBoxFilterBtmRightButton.add_Click({ Start-ComboBoxFilterBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ComboBoxFilterBtmPanel.ClientSize = [System.Drawing.Size]::New(($ComboBoxFilterBtmRightButton.Right + [MyConfig]::FormSpacer), ($ComboBoxFilterBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ComboBoxFilterBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ComboBoxFilterForm.ClientSize = [System.Drawing.Size]::New($ComboBoxFilterForm.ClientSize.Width, ($TempClientSize.Height + $ComboBoxFilterBtmPanel.Height))_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ComboBoxFilter Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ComboBoxFilter **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ComboBoxFilterForm.ShowDialog()_x000D__x000A_  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    $TmpHash = [HashTable]::New()_x000D__x000A_    ForEach ($FilterOptionName In $FilterOptionNames)_x000D__x000A_    {_x000D__x000A_      [Void]$TmpHash.Add($FilterOptionName, $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value)_x000D__x000A_    }_x000D__x000A_    [ComboBoxFilter]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpHash)_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    [ComboBoxFilter]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @{ })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ComboBoxFilterForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ComboBoxFilter"_x000D__x000A_}_x000D__x000A_#endregion function Get-ComboBoxFilter_x000D__x000A__x000D__x000A_# --------------------------------_x000D__x000A_# Get ListViewOption Function_x000D__x000A_# --------------------------------_x000D__x000A_#region ListViewOption Result Class_x000D__x000A_Class ListViewOption_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  [Object]$Item_x000D__x000A__x000D__x000A_  ListViewOption ([Bool]$Success, [Object]$DialogResult, [Object]$Item)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_    $This.Item = $Item_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ListViewOption Result Class_x000D__x000A__x000D__x000A_#region function Get-ListViewOption_x000D__x000A_function Get-ListViewOption ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Get-ListViewOption_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Get-ListViewOption_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Get-ListViewOption Dialog Window_x000D__x000A_    .PARAMETER Message_x000D__x000A_      Message to Show_x000D__x000A_    .PARAMETER Items_x000D__x000A_      Items to show in the ListVieww_x000D__x000A_    .PARAMETER Property_x000D__x000A_      Name of the Properties to Display_x000D__x000A_    .PARAMETER Tooltip_x000D__x000A_      ToolTip to Displays_x000D__x000A_    .PARAMETER SelectText_x000D__x000A_      Selected Text_x000D__x000A_    .PARAMETER Selected_x000D__x000A_      Selected ListView Items_x000D__x000A_    .PARAMETER Multi_x000D__x000A_      Allow Select Multiple Rows_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of Get-ListViewOption Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of Get-ListViewOption Dialog Window_x000D__x000A_    .PARAMETER Filter_x000D__x000A_      Show Filter TextBox_x000D__x000A_    .PARAMETER Resize_x000D__x000A_      Make Get-ListViewOption Dialog Window ReSixeable_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      Left Button DaialogResult_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      Missing Button DaialogResult_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      Right Button DaialogResult_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Functions = @(Get-ChildItem -Path "Function:\")_x000D__x000A_      $DialogResult = Get-ListViewOption -Title "ListView Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Functions -Property "Name", "Version", "Source" -Selected ($Functions[2]) -Tooltip "Show this ToolTip" -Resize -Multi_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$Message = "Status Message",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object[]]$Items = @(),_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String[]]$Property,_x000D__x000A_    [String]$Tooltip,_x000D__x000A_    [Object[]]$Selected = "xX NONE Xx",_x000D__x000A_    [Switch]$Multi,_x000D__x000A_    [Int]$Width = 50,_x000D__x000A_    [Int]$Height = 12,_x000D__x000A_    [Switch]$Filter,_x000D__x000A_    [Switch]$Resize,_x000D__x000A_    [Switch]$Required,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Get-ListViewOption"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ListViewOption **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOption Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListViewOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ListViewOptionForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ListViewOptionForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListViewOptionForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  if ($Resize.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListViewOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $ListViewOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  }_x000D__x000A_  $ListViewOptionForm.Icon = $PILForm.Icon_x000D__x000A_  $ListViewOptionForm.KeyPreview = $True_x000D__x000A_  $ListViewOptionForm.MaximizeBox = $False_x000D__x000A_  $ListViewOptionForm.MinimizeBox = $False_x000D__x000A_  $ListViewOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)_x000D__x000A_  $ListViewOptionForm.Name = "ListViewOptionForm"_x000D__x000A_  $ListViewOptionForm.Owner = $PILForm_x000D__x000A_  $ListViewOptionForm.ShowInTaskbar = $False_x000D__x000A_  $ListViewOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ListViewOptionForm.Text = $Title_x000D__x000A_  #endregion $ListViewOptionForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionFormKeyDown ********_x000D__x000A_  function Start-ListViewOptionFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ListViewOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ListViewOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ListViewOptionForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionFormKeyDown ********_x000D__x000A_  $ListViewOptionForm.add_KeyDown({ Start-ListViewOptionFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionFormShown ********_x000D__x000A_  function Start-ListViewOptionFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ListViewOption Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ListViewOption Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ListViewOptionForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ListViewOptionForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionFormShown ********_x000D__x000A_  $ListViewOptionForm.add_Shown({ Start-ListViewOptionFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ListViewOption Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOption Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionForm.Controls.Add($ListViewOptionPanel)_x000D__x000A_  $ListViewOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListViewOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ListViewOptionPanel.Name = "ListViewOptionPanel"_x000D__x000A_  $ListViewOptionPanel.Text = "ListViewOptionPanel"_x000D__x000A_  #endregion $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListViewOptionPanel Controls ********_x000D__x000A__x000D__x000A_  if ($PSBoundParameters.ContainsKey("Message"))_x000D__x000A_  {_x000D__x000A_    #region $ListViewOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionPanel.Controls.Add($ListViewOptionLabel)_x000D__x000A_    $ListViewOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_    $ListViewOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))_x000D__x000A_    $ListViewOptionLabel.Name = "ListViewOptionLabel"_x000D__x000A_    $ListViewOptionLabel.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)_x000D__x000A_    $ListViewOptionLabel.Text = $Message_x000D__x000A_    $ListViewOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft_x000D__x000A_    #endregion $ListViewOptionLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    # Returns the minimum size required to display the text_x000D__x000A_    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ListViewOptionLabel.Text, [MyConfig]::Font.Regular, $ListViewOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))_x000D__x000A_    $ListViewOptionLabel.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))_x000D__x000A__x000D__x000A_    $TempBottom = $ListViewOptionLabel.Bottom + [MyConfig]::FormSpacer_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    $TempBottom = 0_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region $ListViewOptionListView = [System.Windows.Forms.ListView]::New()_x000D__x000A_  $ListViewOptionListView = [System.Windows.Forms.ListView]::New()_x000D__x000A_  $ListViewOptionPanel.Controls.Add($ListViewOptionListView)_x000D__x000A_  $ListViewOptionListView.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ListViewOptionListView.CheckBoxes = $Multi.IsPresent_x000D__x000A_  $ListViewOptionListView.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionListView.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ListViewOptionListView.FullRowSelect = $True_x000D__x000A_  $ListViewOptionListView.GridLines = $True_x000D__x000A_  $ListViewOptionListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable_x000D__x000A_  $ListViewOptionListView.HideSelection = $False_x000D__x000A_  $ListViewOptionListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ListViewOptionListView.MultiSelect = $Multi.IsPresent_x000D__x000A_  $ListViewOptionListView.Name = "LAUListViewOptionListView"_x000D__x000A_  $ListViewOptionListView.OwnerDraw = $True_x000D__x000A_  $ListViewOptionListView.ShowGroups = $False_x000D__x000A_  $ListViewOptionListView.ShowItemToolTips = $PSBoundParameters.ContainsKey("ToolTip")_x000D__x000A_  $ListViewOptionListView.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ListViewOptionListView.Text = "LAUListViewOptionListView"_x000D__x000A_  $ListViewOptionListView.View = [System.Windows.Forms.View]::Details_x000D__x000A_  #endregion $ListViewOptionListView = [System.Windows.Forms.ListView]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewDrawColumnHeader ********_x000D__x000A_  function Start-ListViewOptionListViewDrawColumnHeader_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawColumnHeader Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawColumnHeader Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawColumnHeader Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawColumnHeader Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawColumnHeader Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)_x000D__x000A_    $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))_x000D__x000A_    $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawColumnHeader Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewDrawColumnHeader ********_x000D__x000A_  $ListViewOptionListView.add_DrawColumnHeader({Start-ListViewOptionListViewDrawColumnHeader -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewDrawItem ********_x000D__x000A_  function Start-ListViewOptionListViewDrawItem_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawItem Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawItem Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawItem Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawItem Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawItem -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawItem Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Return to Default Draw_x000D__x000A_    $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawItem Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewDrawItem ********_x000D__x000A_  $ListViewOptionListView.add_DrawItem({Start-ListViewOptionListViewDrawItem -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewDrawSubItem ********_x000D__x000A_  function Start-ListViewOptionListViewDrawSubItem_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        DrawSubItem Event for the ListViewOption ListView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        DrawSubItem Event for the ListViewOption ListView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ListView Control that fired the DrawSubItem Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ListView DrawSubItem Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewDrawSubItem -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter DrawSubItem Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Return to Default Draw_x000D__x000A_    $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit DrawSubItem Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewDrawSubItem ********_x000D__x000A_  $ListViewOptionListView.add_DrawSubItem({Start-ListViewOptionListViewDrawSubItem -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionListViewMouseDown ********_x000D__x000A_  function Start-ListViewOptionListViewMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the IDP TreeView Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TreeView Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TreeView MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionListViewMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListView]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$ListViewOptionListView"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      if ($ListViewOptionListView.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $ListViewOptionContextMenuStrip.Show($ListViewOptionListView, $EventArg.Location)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$ListViewOptionListView"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionListViewMouseDown ********_x000D__x000A_  $ListViewOptionListView.add_MouseDown({ Start-ListViewOptionListViewMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A__x000D__x000A_  foreach ($PropName in $Property)_x000D__x000A_  {_x000D__x000A_    [Void]$ListViewOptionListView.Columns.Add($PropName, -2)_x000D__x000A_  }_x000D__x000A_  [Void]$ListViewOptionListView.Columns.Add(" ", ($ListViewOptionForm.Width * 2))_x000D__x000A__x000D__x000A_  ForEach ($Item in $Items)_x000D__x000A_  {_x000D__x000A_    ($ListViewOptionListView.Items.Add(($ListViewItem = [System.Windows.Forms.ListViewItem]::New("$($Item.($Property[0]))")))).SubItems.AddRange(@($Property[1..99] | ForEach-Object -Process { "$($Item.($PSItem))" }))_x000D__x000A_    $ListViewItem.Name = "$($Item.($Property[0]))"_x000D__x000A_    $ListViewItem.Tag = $Item_x000D__x000A_    $ListViewItem.Tooltiptext = "$($Item.($Tooltip))"_x000D__x000A_    $ListViewItem.Selected = ($Item -in $Selected)_x000D__x000A_    $ListViewItem.Checked = ($Multi.IsPresent -and $ListViewItem.Selected)_x000D__x000A_    $ListViewItem.Font = [MyConfig]::Font.Regular_x000D__x000A_  }_x000D__x000A_  $ListViewOptionListView.Tag = @($ListViewOptionListView.Items)_x000D__x000A__x000D__x000A_  If ($Filter.IsPresent)_x000D__x000A_  {_x000D__x000A_    #region $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_    $ListViewOptionPanel.Controls.Add($ListViewOptionFilterLabel)_x000D__x000A_    $ListViewOptionFilterLabel.AutoSize = $True_x000D__x000A_    $ListViewOptionFilterLabel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_    $ListViewOptionFilterLabel.Font = [MyConfig]::Font.Regular_x000D__x000A_    $ListViewOptionFilterLabel.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_    $ListViewOptionFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ListViewOptionListView.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_    $ListViewOptionFilterLabel.Name = "ListViewOptionFilterLabel"_x000D__x000A_    $ListViewOptionFilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), $ListViewOptionFilterLabel.PreferredHeight)_x000D__x000A_    $ListViewOptionFilterLabel.Text = "Filter List:"_x000D__x000A_    $ListViewOptionFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight_x000D__x000A_    #endregion $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_    #region $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_    $ListViewOptionPanel.Controls.Add($ListViewOptionTextBox)_x000D__x000A_    $ListViewOptionTextBox.AutoSize = $False_x000D__x000A_    $ListViewOptionTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_    $ListViewOptionTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_    $ListViewOptionTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_    $ListViewOptionTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_    $ListViewOptionTextBox.Location = [System.Drawing.Point]::New(($ListViewOptionFilterLabel.Right + [MyConfig]::FormSpacer), $ListViewOptionFilterLabel.Top)_x000D__x000A_    $ListViewOptionTextBox.MaxLength = 100_x000D__x000A_    $ListViewOptionTextBox.Name = "ListViewOptionTextBox"_x000D__x000A_    $ListViewOptionTextBox.Size = [System.Drawing.Size]::New(($ListViewOptionListView.Right - $ListViewOptionTextBox.Left), $ListViewOptionFilterLabel.Height)_x000D__x000A_    #$ListViewOptionTextBox.TabIndex = 0_x000D__x000A_    $ListViewOptionTextBox.TabStop = $False_x000D__x000A_    $ListViewOptionTextBox.Tag = @{ "HintText" = "Enter Text and Press [Enter] to Filter List Items."; "HintEnabled" = $True }_x000D__x000A_    $ListViewOptionTextBox.Text = ""_x000D__x000A_    $ListViewOptionTextBox.WordWrap = $False_x000D__x000A_    #endregion $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_    #region ******** Function Start-ListViewOptionTextBoxGotFocus ********_x000D__x000A_    Function Start-ListViewOptionTextBoxGotFocus_x000D__x000A_    {_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          GotFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          GotFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the GotFocus Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox GotFocus Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxGotFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter GotFocus Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_      If ($Sender.Tag.HintEnabled)_x000D__x000A_      {_x000D__x000A_        $Sender.Text = ""_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit GotFocus Event for `$ListViewOptionTextBox"_x000D__x000A_    }_x000D__x000A_    #endregion ******** Function Start-ListViewOptionTextBoxGotFocus ********_x000D__x000A_    $ListViewOptionTextBox.add_GotFocus({ Start-ListViewOptionTextBoxGotFocus -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_    #region ******** Function Start-ListViewOptionTextBoxKeyDown ********_x000D__x000A_    Function Start-ListViewOptionTextBoxKeyDown_x000D__x000A_    {_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          KeyDown Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          KeyDown Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the KeyDown Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox KeyDown Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)_x000D__x000A_      {_x000D__x000A_        # Suppress KeyPress_x000D__x000A_        $EventArg.SuppressKeyPress = $True_x000D__x000A__x000D__x000A_        If ([String]::IsNullOrEmpty($Sender.Text.Trim()))_x000D__x000A_        {_x000D__x000A_          $ListViewOptionListView.Items.Clear()_x000D__x000A_          $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_          $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $Sender.Text) -or ($PSItem.SubItems[1].Text -Match $Sender.Text) })_x000D__x000A_          $ListViewOptionListView.Items.Clear()_x000D__x000A_          $ListViewOptionListView.Items.AddRange($TmpNewList)_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionTextBox"_x000D__x000A_    }_x000D__x000A_    #endregion ******** Function Start-ListViewOptionTextBoxKeyDown ********_x000D__x000A_    $ListViewOptionTextBox.add_KeyDown({ Start-ListViewOptionTextBoxKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_    #region ******** Function Start-ListViewOptionTextBoxLostFocus ********_x000D__x000A_    Function Start-ListViewOptionTextBoxLostFocus_x000D__x000A_    {_x000D__x000A_      &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_          LostFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .DESCRIPTION_x000D__x000A_          LostFocus Event for the ListViewOption TextBox Control_x000D__x000A_        .PARAMETER Sender_x000D__x000A_           The TextBox Control that fired the LostFocus Event_x000D__x000A_        .PARAMETER EventArg_x000D__x000A_           The Event Arguments for the TextBox LostFocus Event_x000D__x000A_        .EXAMPLE_x000D__x000A_           Start-ListViewOptionTextBoxLostFocus -Sender $Sender -EventArg $EventArg_x000D__x000A_        .NOTES_x000D__x000A_          Original Function By ken.sweet_x000D__x000A_      #&gt;_x000D__x000A_      [CmdletBinding()]_x000D__x000A_      Param (_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_        [parameter(Mandatory = $True)]_x000D__x000A_        [Object]$EventArg_x000D__x000A_      )_x000D__x000A_      Write-Verbose -Message "Enter LostFocus Event for `$ListViewOptionTextBox"_x000D__x000A__x000D__x000A_      [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }_x000D__x000A_      If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))_x000D__x000A_      {_x000D__x000A_        $Sender.Text = $Sender.Tag.HintText_x000D__x000A_        $Sender.Tag.HintEnabled = $True_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Hint_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextHint_x000D__x000A__x000D__x000A_        $ListViewOptionListView.Items.Clear()_x000D__x000A_        $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $Sender.Tag.HintEnabled = $False_x000D__x000A_        $Sender.Font = [MyConfig]::Font.Regular_x000D__x000A_        $Sender.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A__x000D__x000A_        $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $ListViewOptionTextBox.Text) -or ($PSItem.SubItems[1].Text -Match $ListViewOptionTextBox.Text) })_x000D__x000A_        $ListViewOptionListView.Items.Clear()_x000D__x000A_        $ListViewOptionListView.Items.AddRange($TmpNewList)_x000D__x000A_      }_x000D__x000A__x000D__x000A_      Write-Verbose -Message "Exit LostFocus Event for `$ListViewOptionTextBox"_x000D__x000A_    }_x000D__x000A_    #endregion ******** Function Start-ListViewOptionTextBoxLostFocus ********_x000D__x000A_    $ListViewOptionTextBox.add_LostFocus({ Start-ListViewOptionTextBoxLostFocus -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_    Start-ListViewOptionTextBoxLostFocus -Sender $ListViewOptionTextBox -EventArg "Lost Focus"_x000D__x000A__x000D__x000A_    $TempClientSize = [System.Drawing.Size]::New(($ListViewOptionTextBox.Right + [MyConfig]::FormSpacer), ($ListViewOptionTextBox.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TempClientSize = [System.Drawing.Size]::New(($ListViewOptionListView.Right + [MyConfig]::FormSpacer), ($ListViewOptionListView.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOption ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$ListViewOptionListView.Controls.Add($ListViewOptionContextMenuStrip)_x000D__x000A_  $ListViewOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$ListViewOptionContextMenuStrip.Enabled = $True_x000D__x000A_  $ListViewOptionContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ListViewOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ListViewOptionContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $ListViewOptionContextMenuStrip.Name = "ListViewOptionContextMenuStrip"_x000D__x000A_  #endregion $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionContextMenuStripOpening ********_x000D__x000A_  function Start-ListViewOptionContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the ListViewOption ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the ListViewOption ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ContextMenuStrip Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ContextMenuStrip Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for `$ListViewOptionContextMenuStrip"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for `$ListViewOptionContextMenuStrip"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionContextMenuStripOpening ********_x000D__x000A_  $ListViewOptionContextMenuStrip.add_Opening({Start-ListViewOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionContextMenuStripItemClick ********_x000D__x000A_  function Start-ListViewOptionContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOption ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOption ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The ToolStripItem Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the ToolStripItem Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By ken.sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionContextMenuStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "CheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { -not $PSItem.Checked })_x000D__x000A_        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $True }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "UnCheckAll"_x000D__x000A_      {_x000D__x000A_        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { $PSItem.Checked })_x000D__x000A_        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $False }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionContextMenuStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $ListViewOptionContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-ListViewOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $ListViewOptionContextMenuStrip -Text "Uncheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-ListViewOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $ListViewOptionPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ListViewOptionBtm Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ListViewOptionForm.Controls.Add($ListViewOptionBtmPanel)_x000D__x000A_  $ListViewOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ListViewOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ListViewOptionBtmPanel.Name = "ListViewOptionBtmPanel"_x000D__x000A_  #endregion $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ListViewOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ListViewOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmLeftButton)_x000D__x000A_  $ListViewOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ListViewOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListViewOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListViewOptionBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListViewOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ListViewOptionBtmLeftButton.Name = "ListViewOptionBtmLeftButton"_x000D__x000A_  $ListViewOptionBtmLeftButton.TabIndex = 1_x000D__x000A_  $ListViewOptionBtmLeftButton.TabStop = $True_x000D__x000A_  $ListViewOptionBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ListViewOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ListViewOptionBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionBtmLeftButtonClick ********_x000D__x000A_  function Start-ListViewOptionBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ListViewOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ((($ListViewOptionListView.CheckedItems.Count -gt 0) -and ((-not $Multi.IsPresent) -or $Multi.IsPresent)) -or (-not $Required.IsPresent))_x000D__x000A_    {_x000D__x000A_      $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [Void][System.Windows.Forms.MessageBox]::Show($ListViewOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionBtmLeftButtonClick ********_x000D__x000A_  $ListViewOptionBtmLeftButton.add_Click({ Start-ListViewOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmMidButton)_x000D__x000A_  $ListViewOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ListViewOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ListViewOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListViewOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListViewOptionBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListViewOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ListViewOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListViewOptionBtmMidButton.Name = "ListViewOptionBtmMidButton"_x000D__x000A_  $ListViewOptionBtmMidButton.TabIndex = 2_x000D__x000A_  $ListViewOptionBtmMidButton.TabStop = $True_x000D__x000A_  $ListViewOptionBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ListViewOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ListViewOptionBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionBtmMidButtonClick ********_x000D__x000A_  function Start-ListViewOptionBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By MyUserName)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ([String]::IsNullOrEmpty($Selected))_x000D__x000A_    {_x000D__x000A_      $ListViewOptionListView.SelectedItems.Clear()_x000D__x000A_      $ListViewOptionListView.Items | ForEach-Object -Process { $PSItem.Checked = $False }_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      foreach ($Item in $ListViewOptionListView.Items)_x000D__x000A_      {_x000D__x000A_        $Item.Selected = ($Item.Tag -in $Selected)_x000D__x000A_        $Item.Checked = ($Multi.IsPresent -and $Item.Selected)_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    $ListViewOptionListView.Refresh()_x000D__x000A_    $ListViewOptionListView.Select()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionBtmMidButtonClick ********_x000D__x000A_  $ListViewOptionBtmMidButton.add_Click({ Start-ListViewOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmRightButton)_x000D__x000A_  $ListViewOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ListViewOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ListViewOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ListViewOptionBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ListViewOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ListViewOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ListViewOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ListViewOptionBtmRightButton.Name = "ListViewOptionBtmRightButton"_x000D__x000A_  $ListViewOptionBtmRightButton.TabIndex = 3_x000D__x000A_  $ListViewOptionBtmRightButton.TabStop = $True_x000D__x000A_  $ListViewOptionBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ListViewOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ListViewOptionBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ListViewOptionBtmRightButtonClick ********_x000D__x000A_  function Start-ListViewOptionBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ListViewOptionBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ListViewOptionBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ListViewOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By MyUserName)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ListViewOptionBtmRightButtonClick ********_x000D__x000A_  $ListViewOptionBtmRightButton.add_Click({ Start-ListViewOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ListViewOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ListViewOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ListViewOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ListViewOptionBtmPanel Controls ********_x000D__x000A__x000D__x000A_  $ListViewOptionForm.ClientSize = [System.Drawing.Size]::New($ListViewOptionForm.ClientSize.Width, ($TempClientSize.Height + $ListViewOptionBtmPanel.Height))_x000D__x000A_  $ListViewOptionForm.MinimumSize = $ListViewOptionForm.Size_x000D__x000A_  $ListViewOptionListView.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")_x000D__x000A_  If ($Filter.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ListViewOptionFilterLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom")_x000D__x000A_    $ListViewOptionTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom, Right")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ListViewOption Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ListViewOption **** End ********_x000D__x000A__x000D__x000A_  $DialogResult = $ListViewOptionForm.ShowDialog($PILForm)_x000D__x000A_  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_  {_x000D__x000A_    if ($Multi.IsPresent)_x000D__x000A_    {_x000D__x000A_      [ListViewOption]::New($True, $DialogResult, ($ListViewOptionListView.CheckedItems | Select-Object -ExpandProperty "Tag"))_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      [ListViewOption]::New($True, $DialogResult, ($ListViewOptionListView.SelectedItems | Select-Object -ExpandProperty "Tag"))_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [ListViewOption]::New($False, $DialogResult, "")_x000D__x000A_  }_x000D__x000A__x000D__x000A_  $ListViewOptionForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Get-ListViewOption"_x000D__x000A_}_x000D__x000A_#endregion function Get-ListViewOption_x000D__x000A__x000D__x000A_# --------------------------------_x000D__x000A_# Show ScriptInfo Function_x000D__x000A_# --------------------------------_x000D__x000A_#region ScriptInfo Info Topics_x000D__x000A__x000D__x000A_#region $InfoIntro Compressed RTF_x000D__x000A_$InfoIntro = @"_x000D__x000A_77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p_x000D__x000A_bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgSW50b2R1Y3Rpb25ccGFyDQpcYjBc_x000D__x000A_ZjFcZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBJbnRvZHVjdGlvbiFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=_x000D__x000A_"@_x000D__x000A_#endregion $InfoIntro Compressed RTF_x000D__x000A__x000D__x000A_#region $Info01 Compressed RTF_x000D__x000A_$Info01 = @"_x000D__x000A_77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p_x000D__x000A_bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMDFccGFyDQpcYjBcZjFc_x000D__x000A_ZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBUb3BpYyFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=_x000D__x000A_"@_x000D__x000A_#endregion $Info01 Compressed RTF_x000D__x000A__x000D__x000A_#region $Info02 Compressed RTF_x000D__x000A_$Info02 = @"_x000D__x000A_77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p_x000D__x000A_bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAyXGYwXHBhcg0K_x000D__x000A_XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA_x000D__x000A_"@_x000D__x000A_#endregion $Info02 Compressed RTF_x000D__x000A__x000D__x000A_#region $Info03 Compressed RTF_x000D__x000A_$Info03 = @"_x000D__x000A_77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p_x000D__x000A_bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAzXGYwXHBhcg0K_x000D__x000A_XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA_x000D__x000A_"@_x000D__x000A_#endregion $Info03 Compressed RTF_x000D__x000A__x000D__x000A_$ScriptInfoTopics = [Ordered]@{}_x000D__x000A_$ScriptInfoTopics.Add("InfoIntro", @{"Name" = "Info Introduction"; "Data" = $InfoIntro; "Type" = "Base64"})_x000D__x000A_$ScriptInfoTopics.Add("Info01", @{"Name" = "Info Topic 01"; "Data" = $Info01; "Type" = "Base64"})_x000D__x000A_$ScriptInfoTopics.Add("Info02", @{"Name" = "Info Topic 02"; "Data" = $Info02; "Type" = "Base64"})_x000D__x000A_$ScriptInfoTopics.Add("Info03", @{"Name" = "Info Topic 03"; "Data" = $Info03; "Type" = "Base64"})_x000D__x000A__x000D__x000A_$InfoIntro = $Null_x000D__x000A_$Info01 = $Null_x000D__x000A_$Info02 = $Null_x000D__x000A_$Info03 = $Null_x000D__x000A__x000D__x000A_#endregion ScriptInfo Dialog Info Topics_x000D__x000A__x000D__x000A_#region function Show-ScriptInfo_x000D__x000A_function Show-ScriptInfo ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-ScriptInfo_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-ScriptInfo_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Show-ScriptInfo Window Title_x000D__x000A_    .PARAMETER InfoTitle_x000D__x000A_      Title of Into Topics_x000D__x000A_    .PARAMETER Topics_x000D__x000A_      Orders List of Tpoic to Display_x000D__x000A_    .PARAMETER DefInfoTopic_x000D__x000A_      Default Infomration Topic_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Show-ScriptInfo Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Show-ScriptInfo Window_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Return = Show-ScriptInfo -Topics $Topics_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [String]$InfoTitle = " &lt;&lt; FCG Info Topics &gt;&gt; ",_x000D__x000A_    [String]$DefInfoTopic = "InfoIntro",_x000D__x000A_    [System.Collections.Specialized.OrderedDictionary]$Topics = $ScriptInfoTopics,_x000D__x000A_    [Int]$Width = 60,_x000D__x000A_    [Int]$Height = 24_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-ScriptInfo"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ScriptInfo **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfo Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ScriptInfoForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ScriptInfoForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ScriptInfoForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ScriptInfoForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable_x000D__x000A_  $ScriptInfoForm.Icon = $FCGForm.Icon_x000D__x000A_  $ScriptInfoForm.MaximizeBox = $False_x000D__x000A_  $ScriptInfoForm.MinimizeBox = $False_x000D__x000A_  $ScriptInfoForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ScriptInfoForm.Name = "ScriptInfoForm"_x000D__x000A_  $ScriptInfoForm.Owner = $FCGForm_x000D__x000A_  $ScriptInfoForm.ShowInTaskbar = $False_x000D__x000A_  $ScriptInfoForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ScriptInfoForm.Text = $Title_x000D__x000A_  #endregion $ScriptInfoForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoFormMove ********_x000D__x000A_  function Start-ScriptInfoFormMove_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Move Event for the ScriptInfo Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Move Event for the ScriptInfo Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Move Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Move Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ScriptInfoFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Move Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Move Event for `$ScriptInfoForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoFormMove ********_x000D__x000A_  $ScriptInfoForm.add_Move({ Start-ScriptInfoFormMove -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoFormResize ********_x000D__x000A_  function Start-ScriptInfoFormResize_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Resize Event for the ScriptInfo Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Resize Event for the ScriptInfo Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Resize Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Resize Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ScriptInfoFormResize -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Resize Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Resize Event for `$ScriptInfoForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoFormResize ********_x000D__x000A_  $ScriptInfoForm.add_Resize({ Start-ScriptInfoFormResize -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoFormShown ********_x000D__x000A_  function Start-ScriptInfoFormShown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shown Event for the ScriptInfo Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shown Event for the ScriptInfo Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the Shown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form Shown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ScriptInfoFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet)_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ScriptInfoForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    Start-ScriptInfoLeftToolStripItemClick -Sender ($ScriptInfoLeftMenuStrip.Items[$DefInfoTopic]) -EventArg $EventArg_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ScriptInfoForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoFormShown ********_x000D__x000A_  $ScriptInfoForm.add_Shown({ Start-ScriptInfoFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ScriptInfo Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfo Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoPanel)_x000D__x000A_  $ScriptInfoPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ScriptInfoPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ScriptInfoPanel.Name = "ScriptInfoPanel"_x000D__x000A_  #endregion $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ScriptInfoPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $ScriptInfoPanel.Controls.Add($ScriptInfoRichTextBox)_x000D__x000A_  $ScriptInfoRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")_x000D__x000A_  $ScriptInfoRichTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $ScriptInfoRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $ScriptInfoRichTextBox.DetectUrls = $True_x000D__x000A_  $ScriptInfoRichTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoRichTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $ScriptInfoRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ScriptInfoRichTextBox.MaxLength = [Int]::MaxValue_x000D__x000A_  $ScriptInfoRichTextBox.Multiline = $True_x000D__x000A_  $ScriptInfoRichTextBox.Name = "ScriptInfoRichTextBox"_x000D__x000A_  $ScriptInfoRichTextBox.ReadOnly = $True_x000D__x000A_  $ScriptInfoRichTextBox.Rtf = ""_x000D__x000A_  $ScriptInfoRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Vertical_x000D__x000A_  $ScriptInfoRichTextBox.Size = [System.Drawing.Size]::New(($ScriptInfoPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ScriptInfoPanel.ClientSize.Height - ($ScriptInfoRichTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $ScriptInfoRichTextBox.TabStop = $False_x000D__x000A_  $ScriptInfoRichTextBox.Text = ""_x000D__x000A_  $ScriptInfoRichTextBox.WordWrap = $True_x000D__x000A_  #endregion $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A__x000D__x000A_  #endregion ******** $ScriptInfoPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfoLeft MenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A_  $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoLeftMenuStrip)_x000D__x000A_  $ScriptInfoForm.MainMenuStrip = $ScriptInfoLeftMenuStrip_x000D__x000A_  $ScriptInfoLeftMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ScriptInfoLeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left_x000D__x000A_  $ScriptInfoLeftMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoLeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ScriptInfoLeftMenuStrip.ImageList = $FCGSmallImageList_x000D__x000A_  $ScriptInfoLeftMenuStrip.Name = "ScriptInfoLeftMenuStrip"_x000D__x000A_  $ScriptInfoLeftMenuStrip.ShowItemToolTips = $True_x000D__x000A_  $ScriptInfoLeftMenuStrip.Text = "ScriptInfoLeftMenuStrip"_x000D__x000A_  #endregion $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ScriptInfoLeftToolStripItemClick ********_x000D__x000A_  function Start-ScriptInfoLeftToolStripItemClick_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the ScriptInfoLeft ToolStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the ScriptInfoLeft ToolStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ToolStripItem Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ToolStripItem Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ScriptInfoLeftToolStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ScriptInfoLeftToolStripItem"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $ScriptInfoBtmStatusStrip.Items["Status"].Text = "Showing: $($Sender.Text)"_x000D__x000A__x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Exit"_x000D__x000A_      {_x000D__x000A_        $ScriptInfoForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      Default_x000D__x000A_      {_x000D__x000A_        $ScriptInfoRichTextBox.Clear()_x000D__x000A_        $ScriptInfoRichTextBox.Beg_x000D__x000A_        Switch ($Sender.Tag.Type)_x000D__x000A_        {_x000D__x000A_          "None"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = $Sender.Tag.Data_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_          "Base64"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = Encode-MyData -Data ($Sender.Tag.Data) -AsString -Decode_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_          "Compress"_x000D__x000A_          {_x000D__x000A_            $ScriptInfoRichTextBox.Rtf = Compress-MyData -Data ($Sender.Tag.Data) -Decompress -AsString_x000D__x000A_            Break_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        $ScriptInfoRichTextBox.SelectAll()_x000D__x000A_        $ScriptInfoRichTextBox.SelectionIndent = 10_x000D__x000A_        $ScriptInfoRichTextBox.SelectionLength = 0_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [System.GC]::Collect()_x000D__x000A_    [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ScriptInfoLeftToolStripItem"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ScriptInfoLeftToolStripItemClick ********_x000D__x000A__x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A_  New-MenuLabel -Menu $ScriptInfoLeftMenuStrip -Text $InfoTitle -Name "Info Topics" -Tag "Info Topics" -Font ([MyConfig]::Font.Bold)_x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A__x000D__x000A_  forEach ($Key in $Topics.Keys)_x000D__x000A_  {_x000D__x000A_    (New-MenuItem -Menu $ScriptInfoLeftMenuStrip -Text ($Topics[$Key].Name) -Name $Key -Tag @{"Data" = $Topics[$Key].Data; "Type" = $Topics[$Key].Type} -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({ Start-ScriptInfoLeftToolStripItemClick -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A_  (New-MenuItem -Menu $ScriptInfoLeftMenuStrip -Text "E&amp;xit" -Name "Exit" -Tag "Exit" -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({ Start-ScriptInfoLeftToolStripItemClick -Sender $This -EventArg $PSItem })_x000D__x000A_  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip_x000D__x000A__x000D__x000A_  #region $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoTopPanel)_x000D__x000A_  $ScriptInfoTopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ScriptInfoTopPanel.Dock = [System.Windows.Forms.DockStyle]::Top_x000D__x000A_  $ScriptInfoTopPanel.Name = "ScriptInfoTopPanel"_x000D__x000A_  #endregion $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ScriptInfoTopPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ScriptInfoTopPanel.Controls.Add($ScriptInfoTopLabel)_x000D__x000A_  $ScriptInfoTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ScriptInfoTopLabel.BackColor = [MyConfig]::Colors.TitleBack_x000D__x000A_  $ScriptInfoTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle_x000D__x000A_  $ScriptInfoTopLabel.Font = [MyConfig]::Font.Title_x000D__x000A_  $ScriptInfoTopLabel.ForeColor = [MyConfig]::Colors.TitleFore_x000D__x000A_  $ScriptInfoTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ScriptInfoTopLabel.Name = "ScriptInfoTopLabel"_x000D__x000A_  $ScriptInfoTopLabel.Text = $Title_x000D__x000A_  $ScriptInfoTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  $ScriptInfoTopLabel.Size = [System.Drawing.Size]::New(($ScriptInfoTopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $ScriptInfoTopLabel.PreferredHeight)_x000D__x000A_  #endregion $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  $ScriptInfoTopPanel.ClientSize = [System.Drawing.Size]::New($ScriptInfoTopPanel.ClientSize.Width, ($ScriptInfoTopLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ScriptInfoTopPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ScriptInfoBtm StatusStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A_  $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A_  $ScriptInfoForm.Controls.Add($ScriptInfoBtmStatusStrip)_x000D__x000A_  $ScriptInfoBtmStatusStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ScriptInfoBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ScriptInfoBtmStatusStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ScriptInfoBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ScriptInfoBtmStatusStrip.ImageList = $FCGSmallImageList_x000D__x000A_  $ScriptInfoBtmStatusStrip.Name = "ScriptInfoBtmStatusStrip"_x000D__x000A_  $ScriptInfoBtmStatusStrip.ShowItemToolTips = $True_x000D__x000A_  $ScriptInfoBtmStatusStrip.Text = "ScriptInfoBtmStatusStrip"_x000D__x000A_  #endregion $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A__x000D__x000A_  New-MenuLabel -Menu $ScriptInfoBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ScriptInfo Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ScriptInfo **** End ********_x000D__x000A__x000D__x000A_  [Void]$ScriptInfoForm.ShowDialog($FCGForm)_x000D__x000A__x000D__x000A_  $ScriptInfoForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-ScriptInfo"_x000D__x000A_}_x000D__x000A_#endregion function Show-ScriptInfo_x000D__x000A__x000D__x000A_# ---------------------------_x000D__x000A_# Show RichTextStatus Function_x000D__x000A_# ---------------------------_x000D__x000A_#region Function Write-RichTextBox_x000D__x000A_Function Write-RichTextBox_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Write to RichTextBox_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Write to RichTextBox_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER TextFore_x000D__x000A_    .PARAMETER Font_x000D__x000A_    .PARAMETER Alignment_x000D__x000A_    .PARAMETER Text_x000D__x000A_    .PARAMETER BulletFore_x000D__x000A_    .PARAMETER NoNewLine_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox -Text $Text_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "NewLine")]_x000D__x000A_  param (_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox,_x000D__x000A_    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [System.Windows.Forms.HorizontalAlignment]$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,_x000D__x000A_    [String]$Text,_x000D__x000A_    [parameter(Mandatory = $False, ParameterSetName = "NewLine")]_x000D__x000A_    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "NoNewLine")]_x000D__x000A_    [Switch]$NoNewLine_x000D__x000A_  )_x000D__x000A_  $RichTextBox.SelectionLength = 0_x000D__x000A_  $RichTextBox.SelectionStart = $RichTextBox.TextLength_x000D__x000A_  $RichTextBox.SelectionAlignment = $Alignment_x000D__x000A_  $RichTextBox.SelectionFont = $Font_x000D__x000A_  $RichTextBox.SelectionColor = $TextFore_x000D__x000A_  $RichTextBox.AppendText($Text)_x000D__x000A_  if (-not $NoNewLine.IsPresent)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionColor = $BulletFore_x000D__x000A_    $RichTextBox.AppendText("`r`n")_x000D__x000A_  }_x000D__x000A_  $RichTextBox.ScrollToCaret()_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  $RichTextBox.Parent.Parent.Activate()_x000D__x000A_  [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_}_x000D__x000A_#endregion Function Write-RichTextBox_x000D__x000A__x000D__x000A_#region Function Write-RichTextBoxValue_x000D__x000A_Function Write-RichTextBoxValue_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Write Property Value to RichTextBox_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Write Property Value to RichTextBox_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER TextFore_x000D__x000A_    .PARAMETER ValueFore_x000D__x000A_    .PARAMETER BulletFore_x000D__x000A_    .PARAMETER Font_x000D__x000A_    .PARAMETER Text_x000D__x000A_    .PARAMETER Value_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Text -Value $Value_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox,_x000D__x000A_    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Color]$ValueFore = [MyConfig]::Colors.TextInfo,_x000D__x000A_    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,_x000D__x000A_    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [String]$Text,_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [AllowEmptyString()]_x000D__x000A_    [AllowNull()]_x000D__x000A_    [String]$Value_x000D__x000A_  )_x000D__x000A_  $RichTextBox.SelectionLength = 0_x000D__x000A_  $RichTextBox.SelectionStart = $RichTextBox.TextLength_x000D__x000A_  $RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left_x000D__x000A_  $RichTextBox.SelectionFont = $Font_x000D__x000A_  $RichTextBox.SelectionColor = $TextFore_x000D__x000A_  $RichTextBox.AppendText("$($Text)")_x000D__x000A_  $RichTextBox.SelectionColor = $BulletFore_x000D__x000A_  $RichTextBox.AppendText(": ")_x000D__x000A_  $RichTextBox.SelectionColor = $ValueFore_x000D__x000A_  $RichTextBox.AppendText("$($Value)")_x000D__x000A_  $RichTextBox.SelectionColor = $BulletFore_x000D__x000A_  $RichTextBox.AppendText("`r`n")_x000D__x000A_  $RichTextBox.ScrollToCaret()_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  $RichTextBox.Parent.Parent.Activate()_x000D__x000A_  [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_}_x000D__x000A_#endregion Function Write-RichTextBoxValue_x000D__x000A__x000D__x000A_#region Function Write-RichTextBoxError_x000D__x000A_Function Write-RichTextBoxError_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Write Error Message to RichTextBox_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Write Error Message to RichTextBox_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Write-RichTextBoxError -RichTextBox $RichTextBox_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox_x000D__x000A_  )_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value ($($Error[0].Exception.Message)) -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "CODE" -TextFore ([MyConfig]::Colors.TextBad) -Value (($Error[0].InvocationInfo.Line).Trim()) -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "LINE" -TextFore ([MyConfig]::Colors.TextBad) -Value ($Error[0].InvocationInfo.ScriptLineNumber) -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_}_x000D__x000A_#endregion Function Write-RichTextBoxError_x000D__x000A__x000D__x000A_#region RichTextStatus Result Class_x000D__x000A_Class RichTextStatus_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A__x000D__x000A_  RichTextStatus ([Bool]$Success, [Object]$DialogResult)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion RichTextStatus Result Class_x000D__x000A__x000D__x000A_#region function Show-RichTextStatus_x000D__x000A_function Show-RichTextStatus ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-RichTextStatus_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-RichTextStatus_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-RichTextStatus Dialog Window_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      Script Block to Execure_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      HashTable of Paramerts to Pass to the ScriptBlock_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Show-RichTextStatus Dialog Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Show-RichTextStatus Dialog Window_x000D__x000A_    .PARAMETER ButtonDefault_x000D__x000A_      The Default Selected Button_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      The DialogResult of the Left Button_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      The DialogResult of the Middle Button_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      The DialogResult of the Right Button_x000D__x000A_    .PARAMETER AllowControl_x000D__x000A_      Enable Pause and Break out of Script Block_x000D__x000A_    .PARAMETER AutoClose_x000D__x000A_      Auto Close the Status Message Dialog Window_x000D__x000A_    .PARAMETER AutoCloseWait_x000D__x000A_      Number of MilliSeconds to wait Before Auto Closing the Dialog Window_x000D__x000A_    .EXAMPLE_x000D__x000A_      $HashTable = @{"ShowHeader" = $True}_x000D__x000A_      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_      $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding(DefaultParameterSetName = "Zero")]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [ScriptBlock]$ScriptBlock = { },_x000D__x000A_    [HashTable]$HashTable = @{ },_x000D__x000A_    [Int]$Width = 45,_x000D__x000A_    [Int]$Height = 30,_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonLeft,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "One")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonMid,_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Two")]_x000D__x000A_    [parameter(Mandatory = $True, ParameterSetName = "Three")]_x000D__x000A_    [System.Windows.Forms.DialogResult]$ButtonRight,_x000D__x000A_    [Switch]$AllowControl,_x000D__x000A_    [Switch]$AutoClose,_x000D__x000A_    [ValidateRange(0, 60000)]_x000D__x000A_    [int]$AutoCloseWait = 10_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-RichTextStatus"_x000D__x000A__x000D__x000A_  #region ******** Begin **** $Show-RichTextStatus **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $RichTextStatus Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RichTextStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RichTextStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $RichTextStatusForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $RichTextStatusForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RichTextStatusForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $RichTextStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $RichTextStatusForm.Icon = $PILForm.Icon_x000D__x000A_  $RichTextStatusForm.KeyPreview = $AllowControl.IsPresent_x000D__x000A_  $RichTextStatusForm.MaximizeBox = $False_x000D__x000A_  $RichTextStatusForm.MinimizeBox = $False_x000D__x000A_  $RichTextStatusForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $RichTextStatusForm.Name = "RichTextStatusForm"_x000D__x000A_  $RichTextStatusForm.Owner = $PILForm_x000D__x000A_  $RichTextStatusForm.ShowInTaskbar = $False_x000D__x000A_  $RichTextStatusForm.Size = $RichTextStatusForm.MinimumSize_x000D__x000A_  $RichTextStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $RichTextStatusForm.Tag = @{ "Cancel" = $False; "Pause" = $False; "Finished" = $False }_x000D__x000A_  $RichTextStatusForm.Text = $Title_x000D__x000A_  #endregion $RichTextStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RichTextStatusFormKeyDown ********_x000D__x000A_  Function Start-RichTextStatusFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the RichTextStatus Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the RichTextStatus Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-RichTextStatusFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$RichTextStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Cancel = $True_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }_x000D__x000A_        {_x000D__x000A_          if ($Sender.Tag.Finished)_x000D__x000A_          {_x000D__x000A_            $Sender.DialogResult = $ButtonDefault_x000D__x000A_          }_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$RichTextStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RichTextStatusFormKeyDown ********_x000D__x000A_  If ($AllowControl.IsPresent)_x000D__x000A_  {_x000D__x000A_    $RichTextStatusForm.add_KeyDown({ Start-RichTextStatusFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-RichTextStatusFormShown ********_x000D__x000A_  function Start-RichTextStatusFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $RichTextStatus Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $RichTextStatus Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-RichTextStatusFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$RichTextStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Disable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = $False_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PassHashTable)_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox, $HashTable_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox_x000D__x000A_    }_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Re-enable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($RichTextStatusButtons)_x000D__x000A_    {_x000D__x000A_      1_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmMidButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmMidButton.DialogResult = $DialogResult_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      2_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmRightButton.Enabled = $True_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      3_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmMidButton.Enabled = $True_x000D__x000A_        $RichTextStatusBtmRightButton.Enabled = $True_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Sender.Tag.Finished = $True_x000D__x000A__x000D__x000A_    if ((($DialogResult -eq $ButtonDefault) -and $AutoClose.IsPresent) -or ($RichTextStatusButtons -eq 0))_x000D__x000A_    {_x000D__x000A_      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_      while ($StopWatch.Elapsed.TotalMilliseconds -le $AutoCloseWait)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(10)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A__x000D__x000A_      $Sender.DialogResult = $DialogResult_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$RichTextStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RichTextStatusFormShown ********_x000D__x000A_  $RichTextStatusForm.add_Shown({ Start-RichTextStatusFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for $RichTextStatus Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $RichTextStatus Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $RichTextStatusForm.Controls.Add($RichTextStatusPanel)_x000D__x000A_  $RichTextStatusPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RichTextStatusPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $RichTextStatusPanel.Name = "RichTextStatusPanel"_x000D__x000A_  #endregion $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $RichTextStatusPanel Controls ********_x000D__x000A__x000D__x000A_  #region $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A_  $RichTextStatusPanel.Controls.Add($RichTextStatusRichTextBox)_x000D__x000A_  $RichTextStatusRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")_x000D__x000A_  $RichTextStatusRichTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $RichTextStatusRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $RichTextStatusRichTextBox.DetectUrls = $True_x000D__x000A_  $RichTextStatusRichTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $RichTextStatusRichTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $RichTextStatusRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $RichTextStatusRichTextBox.MaxLength = [Int]::MaxValue_x000D__x000A_  $RichTextStatusRichTextBox.Multiline = $True_x000D__x000A_  $RichTextStatusRichTextBox.Name = "RichTextStatusRichTextBox"_x000D__x000A_  $RichTextStatusRichTextBox.ReadOnly = $True_x000D__x000A_  $RichTextStatusRichTextBox.Rtf = ""_x000D__x000A_  $RichTextStatusRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both_x000D__x000A_  $RichTextStatusRichTextBox.Size = [System.Drawing.Size]::New(($RichTextStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($RichTextStatusPanel.ClientSize.Height - ($RichTextStatusRichTextBox.Top + [MyConfig]::FormSpacer)))_x000D__x000A_  $RichTextStatusRichTextBox.TabStop = $False_x000D__x000A_  $RichTextStatusRichTextBox.WordWrap = $False_x000D__x000A_  #endregion $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-RichTextStatusRichTextBoxMouseDown ********_x000D__x000A_  Function Start-RichTextStatusRichTextBoxMouseDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      MouseDown Event for the RichTextStatus RichTextBox Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      MouseDown Event for the RichTextStatus RichTextBox Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The RichTextBox Control that fired the MouseDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the RichTextBox MouseDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-RichTextStatusRichTextBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.RichTextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for `$RichTextStatusRichTextBox"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $RichTextStatusRichTextBox.SelectionLength = 0_x000D__x000A_    $RichTextStatusRichTextBox.SelectionStart = $RichTextStatusRichTextBox.TextLength_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for `$RichTextStatusRichTextBox"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-RichTextStatusRichTextBoxMouseDown ********_x000D__x000A_  $RichTextStatusRichTextBox.add_MouseDown({ Start-RichTextStatusRichTextBoxMouseDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #endregion ******** $RichTextStatusPanel Controls ********_x000D__x000A__x000D__x000A_  switch ($PSCmdlet.ParameterSetName)_x000D__x000A_  {_x000D__x000A_    "Zero"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 0_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "One"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 1_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Two"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 2_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Three"_x000D__x000A_    {_x000D__x000A_      $RichTextStatusButtons = 3_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  if ($RichTextStatusButtons -gt 0)_x000D__x000A_  {_x000D__x000A_    # ************************************************_x000D__x000A_    # $RichTextStatusBtm Panel_x000D__x000A_    # ************************************************_x000D__x000A_    #region $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_    $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_    $RichTextStatusForm.Controls.Add($RichTextStatusBtmPanel)_x000D__x000A_    $RichTextStatusBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_    $RichTextStatusBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_    $RichTextStatusBtmPanel.Name = "RichTextStatusBtmPanel"_x000D__x000A_    #endregion $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_    #region ******** $RichTextStatusBtmPanel Controls ********_x000D__x000A__x000D__x000A_    $NumButtons = 3_x000D__x000A_    $TempSpace = [Math]::Floor($RichTextStatusBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_    $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_    $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_    #region $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    If (($RichTextStatusButtons -eq 2) -or ($RichTextStatusButtons -eq 3))_x000D__x000A_    {_x000D__x000A_      $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmLeftButton)_x000D__x000A_      $RichTextStatusBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_      $RichTextStatusBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_      $RichTextStatusBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_      $RichTextStatusBtmLeftButton.DialogResult = $ButtonLeft_x000D__x000A_      $RichTextStatusBtmLeftButton.Enabled = $False_x000D__x000A_      $RichTextStatusBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_      $RichTextStatusBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_      $RichTextStatusBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_      $RichTextStatusBtmLeftButton.Name = "RichTextStatusBtmLeftButton"_x000D__x000A_      $RichTextStatusBtmLeftButton.TabIndex = 0_x000D__x000A_      $RichTextStatusBtmLeftButton.TabStop = $True_x000D__x000A_      $RichTextStatusBtmLeftButton.Text = "&amp;$($ButtonLeft.ToString())"_x000D__x000A_      $RichTextStatusBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $RichTextStatusBtmLeftButton.PreferredSize.Height)_x000D__x000A_      if ($ButtonLeft -eq $ButtonDefault)_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmLeftButton.Select()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #endregion $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_    #region $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    If (($RichTextStatusButtons -eq 1) -or ($RichTextStatusButtons -eq 3))_x000D__x000A_    {_x000D__x000A_      $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmMidButton)_x000D__x000A_      $RichTextStatusBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_      $RichTextStatusBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_      $RichTextStatusBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_      $RichTextStatusBtmMidButton.DialogResult = $ButtonMid_x000D__x000A_      $RichTextStatusBtmMidButton.Enabled = $False_x000D__x000A_      $RichTextStatusBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_      $RichTextStatusBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_      $RichTextStatusBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_      $RichTextStatusBtmMidButton.Name = "RichTextStatusBtmMidButton"_x000D__x000A_      $RichTextStatusBtmMidButton.TabStop = $True_x000D__x000A_      $RichTextStatusBtmMidButton.Text = "&amp;$($ButtonMid.ToString())"_x000D__x000A_      $RichTextStatusBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $RichTextStatusBtmMidButton.PreferredSize.Height)_x000D__x000A_      if ($ButtonMid -eq $ButtonDefault)_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmMidButton.Select()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #endregion $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_    #region $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_    If (($RichTextStatusButtons -eq 2) -or ($RichTextStatusButtons -eq 3))_x000D__x000A_    {_x000D__x000A_      $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmRightButton)_x000D__x000A_      $RichTextStatusBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_      $RichTextStatusBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_      $RichTextStatusBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_      $RichTextStatusBtmRightButton.DialogResult = $ButtonRight_x000D__x000A_      $RichTextStatusBtmRightButton.Enabled = $False_x000D__x000A_      $RichTextStatusBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_      $RichTextStatusBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_      $RichTextStatusBtmRightButton.Location = [System.Drawing.Point]::New(($RichTextStatusBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)_x000D__x000A_      $RichTextStatusBtmRightButton.Name = "RichTextStatusBtmRightButton"_x000D__x000A_      $RichTextStatusBtmRightButton.TabIndex = 1_x000D__x000A_      $RichTextStatusBtmRightButton.TabStop = $True_x000D__x000A_      $RichTextStatusBtmRightButton.Text = "&amp;$($ButtonRight.ToString())"_x000D__x000A_      $RichTextStatusBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $RichTextStatusBtmRightButton.PreferredSize.Height)_x000D__x000A_      if ($ButtonRight -eq $ButtonDefault)_x000D__x000A_      {_x000D__x000A_        $RichTextStatusBtmRightButton.Select()_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #endregion $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_    $RichTextStatusBtmPanel.ClientSize = [System.Drawing.Size]::New(($RichTextStatusTextBox.Right + [MyConfig]::FormSpacer), (($RichTextStatusBtmPanel.Controls[$RichTextStatusBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_    #endregion ******** $RichTextStatusBtmPanel Controls ********_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #endregion ******** Controls for $RichTextStatus Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** $Show-RichTextStatus **** End ********_x000D__x000A__x000D__x000A_  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")_x000D__x000A_  $DialogResult = $RichTextStatusForm.ShowDialog($PILForm)_x000D__x000A_  [RichTextStatus]::New(($DialogResult -eq $ButtonDefault), $DialogResult)_x000D__x000A__x000D__x000A_  $RichTextStatusForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-RichTextStatus"_x000D__x000A_}_x000D__x000A_#endregion function Show-RichTextStatus_x000D__x000A__x000D__x000A_# ---------------------------------------_x000D__x000A_# Sample Function Display Status Messages_x000D__x000A_# ---------------------------------------_x000D__x000A_#region function Sample-RichTextStatus_x000D__x000A_function Sample-RichTextStatus()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      Passed Paramters HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Sample-RichTextStatus -RichTextBox $RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Sample-RichTextStatus"_x000D__x000A__x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A__x000D__x000A_  # Get Passed Values_x000D__x000A_  If ($HashTable.ContainsKey("ShowHeader"))_x000D__x000A_  {_x000D__x000A_    $ShowHeader = $HashTable.ShowHeader_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $ShowHeader = $True_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # **************_x000D__x000A_  # RFT Formatting_x000D__x000A_  # **************_x000D__x000A_  # Permanate till Changed_x000D__x000A_  #$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left_x000D__x000A_  #$RichTextBox.SelectionBullet = $True_x000D__x000A_  #$RichTextBox.SelectionIndent = 10_x000D__x000A_  # Resets After AppendText_x000D__x000A_  #$RichTextBox.SelectionBackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$RichTextBox.SelectionCharOffset = 0_x000D__x000A_  #$RichTextBox.SelectionColor = [MyConfig]::Colors.TextFore_x000D__x000A_  #$RichTextBox.SelectionFont = [MyConfig]::Font.Bold_x000D__x000A_  # **********************_x000D__x000A_  # Update RichTextBox Text..._x000D__x000A_  # **********************_x000D__x000A__x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A__x000D__x000A_  # Write KPI Event_x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"_x000D__x000A__x000D__x000A_  if ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text_x000D__x000A__x000D__x000A_    # Initialize StopWatch_x000D__x000A_    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Started Proccess List Data Here..." -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A__x000D__x000A_  :UserCancel foreach ($Key in $HashTable.Keys)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Found Key" -TextFore ([MyConfig]::Colors.TextInfo) -Value "$($Key) = $($HashTable[$Key])" -ValueFore ([MyConfig]::Colors.TextGood)_x000D__x000A_    # Check for Fast Exit_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_    If ($RichTextBox.Parent.Parent.Tag.Cancel)_x000D__x000A_    {_x000D__x000A_      $RichTextBox.SelectionIndent = 10_x000D__x000A_      $RichTextBox.SelectionBullet = $False_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort_x000D__x000A_      Break UserCancel_x000D__x000A_    }_x000D__x000A_    # Pause Processing Loop_x000D__x000A_    If ($RichTextBox.Parent.Parent.Tag.Pause)_x000D__x000A_    {_x000D__x000A_      $TmpPause = $RichTextBox.SelectionBullet_x000D__x000A_      $TmpTitle = $RichTextBox.Parent.Parent.Text_x000D__x000A_      $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"_x000D__x000A_      $RichTextBox.SelectionBullet = $False_x000D__x000A_      While ($RichTextBox.Parent.Parent.Tag.Pause)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(100)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A_      $RichTextBox.SelectionBullet = $TmpPause_x000D__x000A_      $RichTextBox.Parent.Parent.Text = $TmpTitle_x000D__x000A_    }_x000D__x000A_    Start-Sleep -Milliseconds 100_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Pause Before Deployment_x000D__x000A_  $RichTextBox.Parent.Parent.Tag.Pause = $True_x000D__x000A_  $TmpPause = $RichTextBox.SelectionBullet_x000D__x000A_  $TmpTitle = $RichTextBox.Parent.Parent.Text_x000D__x000A_  $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A__x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Pause to Review Status" -Font ([MyConfig]::Font.Bold) -Alignment Center_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Press 'Pause' to Continue with the Current Deployment" -Alignment Center_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "or Ctrl-Alt-Backspace to Exit / Cancel" -Alignment Center_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_  While ($RichTextBox.Parent.Parent.Tag.Pause)_x000D__x000A_  {_x000D__x000A_    [System.Threading.Thread]::Sleep(100)_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_    If ($RichTextBox.Parent.Parent.Tag.Cancel)_x000D__x000A_    {_x000D__x000A_      $RichTextBox.Parent.Parent.Tag.Pause = $False_x000D__x000A_      $RichTextBox.SelectionIndent = 10_x000D__x000A_      $RichTextBox.SelectionBullet = $False_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  $RichTextBox.SelectionBullet = $TmpPause_x000D__x000A_  $RichTextBox.Parent.Parent.Text = $TmpTitle_x000D__x000A__x000D__x000A_  # Display an Error Information_x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Show Fake Error Message" -TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  Try_x000D__x000A_  {_x000D__x000A_    Throw "This is a Fake Error!"_x000D__x000A_  }_x000D__x000A_  Catch_x000D__x000A_  {_x000D__x000A_    # Write Error to Status Dialog_x000D__x000A_    Write-RichTextBoxError -RichTextBox $RichTextBox_x000D__x000A_  }_x000D__x000A__x000D__x000A_  if ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionIndent = 10_x000D__x000A_    $RichTextBox.SelectionBullet = $False_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_    # Set Final Status Message_x000D__x000A_    Switch ($DisplayResult)_x000D__x000A_    {_x000D__x000A_      "OK"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Add Success Message Here!"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextGood_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Cancel"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Add Error Message Here!"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextBad_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Abort"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Add Abort Message Here!"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextWarn_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Write Final Status Message_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A__x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $FinalMsg_x000D__x000A_    $StopWatch.Stop()_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Return DialogResult_x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Sample-RichTextStatus"_x000D__x000A_}_x000D__x000A_#endregion function Sample-RichTextStatus_x000D__x000A__x000D__x000A_#$HashTable = @{"ShowHeader" = $True}_x000D__x000A_#$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_#$DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable -AllowControl_x000D__x000A__x000D__x000A_# ---------------------------_x000D__x000A_# Show ProgressBarStatus Function_x000D__x000A_# ---------------------------_x000D__x000A_#region ProgressBarStatus Result Class_x000D__x000A_Class ProgressBarStatus_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A_  ProgressBarStatus ([Bool]$Success, [Object]$DialogResult)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_  }_x000D__x000A_}_x000D__x000A_#endregion ProgressBarStatus Result Class_x000D__x000A__x000D__x000A_#region function Show-ProgressBarStatus_x000D__x000A_Function Show-ProgressBarStatus ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows Show-ProgressBarStatus_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows Show-ProgressBarStatus_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the Show-ProgressBarStatus Dialog Window_x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_      Script Block to Execure_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      HashTable of Paramerts to Pass to the ScriptBlock_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Show-ProgressBarStatus Dialog Window_x000D__x000A_    .PARAMETER AllowControl_x000D__x000A_      Enable Pause and Break out of Script Block_x000D__x000A_    .EXAMPLE_x000D__x000A_      $HashTable = @{"Values" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}_x000D__x000A_      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]$ProgressBar, [System.Windows.Forms.Label]$Label) Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label }_x000D__x000A_      $DialogResult = Show-ProgressBarStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)"_x000D__x000A_      if ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_      }_x000D__x000A_      else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_      }_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [String]$Title = "$([MyConfig]::ScriptName)",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [ScriptBlock]$ScriptBlock = { },_x000D__x000A_    [HashTable]$HashTable = @{ },_x000D__x000A_    [Int]$Width = 45,_x000D__x000A_    [Switch]$AllowControl_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Show-ProgressBarStatus"_x000D__x000A__x000D__x000A_  #region ******** Begin **** $ProgressBarStatus **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $ProgressBarStatus Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ProgressBarStatusForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ProgressBarStatusForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ProgressBarStatusForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ProgressBarStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ProgressBarStatusForm.Icon = $PILForm.Icon_x000D__x000A_  $ProgressBarStatusForm.KeyPreview = $AllowControl.IsPresent_x000D__x000A_  $ProgressBarStatusForm.MaximizeBox = $False_x000D__x000A_  $ProgressBarStatusForm.MinimizeBox = $False_x000D__x000A_  $ProgressBarStatusForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ProgressBarStatusForm.Name = "ProgressBarStatusForm"_x000D__x000A_  $ProgressBarStatusForm.Owner = $PILForm_x000D__x000A_  $ProgressBarStatusForm.ShowInTaskbar = $False_x000D__x000A_  $ProgressBarStatusForm.Size = $ProgressBarStatusForm.MinimumSize_x000D__x000A_  $ProgressBarStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ProgressBarStatusForm.Tag = @{ "Cancel" = $False; "Pause" = $False; "Finished" = $True }_x000D__x000A_  $ProgressBarStatusForm.Text = $Title_x000D__x000A_  #endregion $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ProgressBarStatusFormKeyDown ********_x000D__x000A_  Function Start-ProgressBarStatusFormKeyDown_x000D__x000A_  {_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the ProgressBarStatus Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the ProgressBarStatus Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Form Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Form KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-ProgressBarStatusFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By ken.sweet_x000D__x000A_  #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ProgressBarStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Cancel = $True_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      Switch ($EventArg.KeyCode)_x000D__x000A_      {_x000D__x000A_        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }_x000D__x000A_        {_x000D__x000A_          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }_x000D__x000A_        {_x000D__x000A_          if ($Sender.Tag.Finished)_x000D__x000A_          {_x000D__x000A_            $Sender.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_          }_x000D__x000A_          Break_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ProgressBarStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ProgressBarStatusFormKeyDown ********_x000D__x000A_  If ($AllowControl.IsPresent)_x000D__x000A_  {_x000D__x000A_    $ProgressBarStatusForm.add_KeyDown({ Start-ProgressBarStatusFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #region ******** Function Start-ProgressBarStatusFormShown ********_x000D__x000A_  Function Start-ProgressBarStatusFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the $ProgressBarStatus Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the $ProgressBarStatus Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ProgressBarStatusFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By Ken Sweet)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ProgressBarStatusForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    $Sender.Refresh()_x000D__x000A__x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Disable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = $False_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    if ($PassHashTable)_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel, $HashTable_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    $Sender.Tag.Finished = $True_x000D__x000A_    _x000D__x000A_    If ([MyConfig]::Production)_x000D__x000A_    {_x000D__x000A_      # Re-enable Auto Exit Timer_x000D__x000A_      $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $ProgressBarStatusForm.DialogResult = $DialogResult_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ProgressBarStatusForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ProgressBarStatusFormShown ********_x000D__x000A_  $ProgressBarStatusForm.add_Shown({ Start-ProgressBarStatusFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for $ProgressBarStatus Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # $ProgressBarStatus Panel_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ProgressBarStatusForm.Controls.Add($ProgressBarStatusPanel)_x000D__x000A_  $ProgressBarStatusPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ProgressBarStatusPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ProgressBarStatusPanel.Name = "ProgressBarStatusPanel"_x000D__x000A_  #endregion $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ProgressBarStatusPanel Controls ********_x000D__x000A__x000D__x000A_  #region $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()_x000D__x000A_  $ProgressBarStatusPanel.Controls.Add($ProgressBarStatusLabel)_x000D__x000A_  $ProgressBarStatusLabel.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ProgressBarStatusLabel.ForeColor = [MyConfig]::Colors.LabelFore_x000D__x000A_  $ProgressBarStatusLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ProgressBarStatusLabel.Name = "ProgressBarStatusLabel"_x000D__x000A_  $ProgressBarStatusLabel.Size = [System.Drawing.Size]::New(($ProgressBarStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * 2))_x000D__x000A_  $ProgressBarStatusLabel.Text = $Null_x000D__x000A_  $ProgressBarStatusLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter_x000D__x000A_  #endregion $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()_x000D__x000A__x000D__x000A_  #region $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()_x000D__x000A_  $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()_x000D__x000A_  $ProgressBarStatusPanel.Controls.Add($ProgressBarStatusProgressBar)_x000D__x000A_  #$ProgressBarStatusProgressBar.AutoSize = $False_x000D__x000A_  $ProgressBarStatusProgressBar.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  #$ProgressBarStatusProgressBar.Enabled = $True_x000D__x000A_  $ProgressBarStatusProgressBar.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ProgressBarStatusProgressBar.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ProgressBarStatusProgressBar.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ProgressBarStatusLabel.Bottom + [MyConfig]::FormSpacer))_x000D__x000A_  $ProgressBarStatusProgressBar.Name = "ProgressBarStatusProgressBar"_x000D__x000A_  $ProgressBarStatusProgressBar.TabStop = $False_x000D__x000A_  #$ProgressBarStatusProgressBar.Tag = [System.Object]::New()_x000D__x000A_  #$ProgressBarStatusProgressBar.Value = 0_x000D__x000A_  #$ProgressBarStatusProgressBar.Visible = $True_x000D__x000A_  $ProgressBarStatusProgressBar.Width = ($ProgressBarStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))_x000D__x000A_  #endregion $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()_x000D__x000A__x000D__x000A_  $ProgressBarStatusPanel.ClientSize = [System.Drawing.Size]::New($ProgressBarStatusPanel.ClientSize.Width, ($ProgressBarStatusProgressBar.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ProgressBarStatusPanel Controls ********_x000D__x000A__x000D__x000A_  $ProgressBarStatusForm.ClientSize = [System.Drawing.Size]::New($ProgressBarStatusForm.ClientSize.Width, $ProgressBarStatusPanel.ClientSize.Height)_x000D__x000A__x000D__x000A_  #endregion ******** Controls for $ProgressBarStatus Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** $Show-ProgressBarStatus **** End ********_x000D__x000A_  _x000D__x000A_  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")_x000D__x000A_  $DialogResult = $ProgressBarStatusForm.ShowDialog($PILForm)_x000D__x000A_  [ProgressBarStatus]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult)_x000D__x000A__x000D__x000A_  $ProgressBarStatusForm.Dispose()_x000D__x000A__x000D__x000A_  [System.GC]::Collect()_x000D__x000A_  [System.GC]::WaitForPendingFinalizers()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Show-ProgressBarStatus"_x000D__x000A_}_x000D__x000A_#endregion function Show-ProgressBarStatus_x000D__x000A__x000D__x000A_# ---------------------------------------_x000D__x000A_# Sample Function Display Status Messages_x000D__x000A_# ---------------------------------------_x000D__x000A_#region function Sample-ProgressBarStatus_x000D__x000A_Function Sample-ProgressBarStatus()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .PARAMETER ProgressBar_x000D__x000A_      The Progress Bar_x000D__x000A_    .PARAMETER Label_x000D__x000A_      The Label to Indicate the Current Item being Proccessed_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      Passed Paramters HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ProgressBar]$ProgressBar,_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Label]$Label,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Sample-ProgressBarStatus"_x000D__x000A__x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $ProgressBar.Refresh()_x000D__x000A__x000D__x000A_  # Write KPI Event_x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"_x000D__x000A__x000D__x000A_  # Update Status Message_x000D__x000A_  $PILBtmStatusStrip.Items["Status"].Text = $ProgressBar.Parent.Parent.Text_x000D__x000A__x000D__x000A_  # Month Names_x000D__x000A_  $Values = $HashTable.Values_x000D__x000A__x000D__x000A_  # Set Starting ProgresBar Values_x000D__x000A_  $ProgressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Blocks_x000D__x000A_  $ProgressBar.Maximum = $Values.Count_x000D__x000A_  $ProgressBar.Minimum = 1_x000D__x000A_  $ProgressBar.Step = 1_x000D__x000A_  $ProgressBar.Value = 1_x000D__x000A__x000D__x000A_  :UserCancel ForEach ($Value In $Values)_x000D__x000A_  {_x000D__x000A_    # Update Progress Information_x000D__x000A__x000D__x000A_    $Label.Text = $Value_x000D__x000A_    $Label.Refresh()_x000D__x000A__x000D__x000A_    # Check for Fast Exit_x000D__x000A_    [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_    If ($ProgressBar.Parent.Parent.Tag.Cancel)_x000D__x000A_    {_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort_x000D__x000A_      Break UserCancel_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Pause Processing Loop_x000D__x000A_    If ($ProgressBar.Parent.Parent.Tag.Pause)_x000D__x000A_    {_x000D__x000A_      $TmpTitle = $ProgressBar.Parent.Parent.Text_x000D__x000A_      $ProgressBar.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"_x000D__x000A_      While ($ProgressBar.Parent.Parent.Tag.Pause)_x000D__x000A_      {_x000D__x000A_        [System.Threading.Thread]::Sleep(100)_x000D__x000A_        [System.Windows.Forms.Application]::DoEvents()_x000D__x000A_      }_x000D__x000A_      $ProgressBar.Parent.Parent.Text = $TmpTitle_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $ProgressBar.Increment(1)_x000D__x000A_    $ProgressBar.Refresh()_x000D__x000A_    Start-Sleep -Milliseconds 1000_x000D__x000A_  }_x000D__x000A__x000D__x000A_  # Update Status Message_x000D__x000A_  $PILBtmStatusStrip.Items["Status"].Text = "Completed $($ProgressBar.Parent.Parent.Text)"_x000D__x000A__x000D__x000A_  # Return DialogResult_x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Function Sample-ProgressBarStatus"_x000D__x000A_}_x000D__x000A_#endregion function Sample-ProgressBarStatus_x000D__x000A__x000D__x000A_#$HashTable = @{"Values" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}_x000D__x000A_#$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]$ProgressBar, [System.Windows.Forms.Label]$Label) Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label }_x000D__x000A_#$DialogResult = Show-ProgressBarStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)"_x000D__x000A__x000D__x000A__x000D__x000A_#endregion ******** PIL Common Dialogs ********_x000D__x000A__x000D__x000A_#region ******** PIL Custom Commands ********_x000D__x000A__x000D__x000A_#region function Get-ModuleList_x000D__x000A_Function Get-ModuleList ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Get List of Instaled Modules_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Get List of Instaled Modules_x000D__x000A_    .PARAMETER Location_x000D__x000A_      Location of the Modules_x000D__x000A_    .PARAMETER Path_x000D__x000A_      Location to Search for Modules_x000D__x000A_    .PARAMETER Modules_x000D__x000A_      List to Add Modules to_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Modules = [System.Collections.Generic.List[Modules]]::New()_x000D__x000A_      Get-ModuleList -Modules ([Ref]$Modules) -Location "All Users" -Path "$($ENV:ProgramFiles)\WindowsPowerShell\Modules"_x000D__x000A_      Get-ModuleList -Modules ([Ref]$Modules) -Location "Current User" -Path "$([Environment]::GetFolderPath([System.Environment+SpecialFolder]::MyDocuments))\WindowsPowerShell\Modules"_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By Ken Sweet_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $False)]_x000D__x000A_    [ValidateSet("All Users", "Current User")]_x000D__x000A_    [String]$Location = "All Users",_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [String]$Path_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"_x000D__x000A_  _x000D__x000A_  # Get Installed Modules_x000D__x000A_  $TmpModList = Get-ChildItem -Path $Path_x000D__x000A_  ForEach ($TmpModItem In $TmpModList)_x000D__x000A_  {_x000D__x000A_    # get Module Versions_x000D__x000A_    $TmpVersions = @(Get-ChildItem -Path $TmpModItem.FullName | Where-Object -FilterScript { $PSItem.Name -match "\d+\.\d+\.\d+" } | Sort-Object -Property Name -Descending | Select-Object -First 1)_x000D__x000A_    If ($TmpVersions.Count -eq 0)_x000D__x000A_    {_x000D__x000A_      If (-not [MyRuntime]::Modules.ContainsKey($TmpModItem.Name))_x000D__x000A_      {_x000D__x000A_        # Custom Module_x000D__x000A_        [MyRuntime]::Modules.Add($TmpModItem.Name, [PILModule]::New($Location, $TmpModItem.Name, "0.0.0"))_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      If (-not [MyRuntime]::Modules.ContainsKey($TmpModItem.Name))_x000D__x000A_      {_x000D__x000A_        # Installed Module_x000D__x000A_        ForEach ($TmpVersion In $TmpVersions)_x000D__x000A_        {_x000D__x000A_          [MyRuntime]::Modules.Add($TmpModItem.Name, [PILModule]::New($Location, $TmpModItem.Name, $TmpVersion.Name))_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion function Get-ModuleList_x000D__x000A__x000D__x000A_#endregion ******** PIL Custom Commands ********_x000D__x000A__x000D__x000A_#region ******** PIL Custom Dialogs ********_x000D__x000A__x000D__x000A_# ----------------------------_x000D__x000A_# Sample Initiliaze PILUtility_x000D__x000A_# ----------------------------_x000D__x000A_#region function Display-InitiliazePILUtility_x000D__x000A_Function Display-InitiliazePILUtility()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display PILUtility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display PILUtility Status Sample Function_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Display-InitiliazePILUtility -RichTextBox $RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Display-InitiliazePILUtility -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Display-InitiliazePILUtility"_x000D__x000A_  _x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  _x000D__x000A_  $ShowHeader = $HashTable.ShowHeader_x000D__x000A_  $ConfigFile = $HashTable.ConfigFile_x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  _x000D__x000A_  # Write KPI Event_x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text_x000D__x000A_    _x000D__x000A_    # Initialize StopWatch_x000D__x000A_    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  _x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Validate Runtime Parameters" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  _x000D__x000A_  #region ******** Validating Runtime Parameters ********_x000D__x000A_  _x000D__x000A_  # Script / Utility_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Utility" -Value ([MyConfig]::ScriptName) -ValueFore ([MyConfig]::Colors.TextGood)_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Version" -Value ([MyConfig]::ScriptVersion) -ValueFore ([MyConfig]::Colors.TextGood)_x000D__x000A_  _x000D__x000A_  # Run From/As Info_x000D__x000A_  $TmpRunFrom = Get-WmiObject -Query "Select Name, Domain, PartOfDomain From Win32_ComputerSystem"_x000D__x000A_  If ($TmpRunFrom.PartOfDomain)_x000D__x000A_  {_x000D__x000A_    $TmpRunFromText = "$($TmpRunFrom.Name).$($TmpRunFrom.Domain)"_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TmpRunFromText = "$($TmpRunFrom.Name)"_x000D__x000A_  }_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run From" -Value $TmpRunFromText_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run As" -Value "$([Environment]::UserDomainName)\$([Environment]::UserName)"_x000D__x000A_  _x000D__x000A_  # Microsoft Entra Logon_x000D__x000A_  #Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Microsoft Entra Logon: " -Value ([MyConfig]::AADLogonInfo.Context.Account.Id)_x000D__x000A_  _x000D__x000A_  # Logon Authentication_x000D__x000A_  If ([MyConfig]::CurrentUser.AuthenticationType -eq "CloudAP")_x000D__x000A_  {_x000D__x000A_    $TmpText = "Microsoft Entra"_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TmpText = "Active Directory"_x000D__x000A_  }_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Authentication" -Value "$($TmpText)"_x000D__x000A_  _x000D__x000A_  # Verify OS Architecture_x000D__x000A_  $TempRunOS = Get-WmiObject -Query "Select Caption, Version, OSArchitecture From Win32_OperatingSystem"_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Op Sys" -Value "$($TempRunOS.Caption)"_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Build" -Value "$($TempRunOS.Version)"_x000D__x000A_  _x000D__x000A_  # Verify AC Power_x000D__x000A_  $ChkBattery = (Get-WmiObject -Class Win32_Battery).BatteryStatus_x000D__x000A_  If ([String]::IsNullOrEmpty($ChkBattery) -or ($ChkBattery -eq 2))_x000D__x000A_  {_x000D__x000A_    $TmpText = "Yes"_x000D__x000A_    $TmpColor = [MyConfig]::Colors.TextGood_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    $TmpText = "No"_x000D__x000A_    $TmpColor = [MyConfig]::Colors.TextWarn_x000D__x000A_  }_x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "AC Power" -Value "$($TmpText)" -ValueFore $TmpColor_x000D__x000A_  _x000D__x000A_  # -------------------------_x000D__x000A_  # Display Passed Parameters_x000D__x000A_  # -------------------------_x000D__x000A_  $CheckParams = $Script:PSBoundParameters_x000D__x000A_  If ($CheckParams.Keys.Count)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Text "Runtime Parameters"_x000D__x000A_    ForEach ($Key In $CheckParams.Keys)_x000D__x000A_    {_x000D__x000A_      $RichTextBox.SelectionIndent = 30_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Key -Value $($CheckParams[$Key])_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  #endregion ******** Validating Runtime Parameters ********_x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Begining Initialization" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  # Get All Users Modules_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Getting All Users Modules"_x000D__x000A_  Get-ModuleList -Location "All Users" -Path ([MyRuntime]::AUModules)_x000D__x000A_  # Get Curent User Modules_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Getting Current User Modules"_x000D__x000A_  Get-ModuleList -Location "Current User" -Path ([MyRuntime]::CUModules)_x000D__x000A_  _x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Modules Discovered" -Value ([MyRuntime]::Modules.Count)_x000D__x000A_  _x000D__x000A_  If (-not [String]::IsNullOrEmpty($ConfigFile))_x000D__x000A_  {_x000D__x000A_    $HashTable = @{"ShowHeader" = $False; "ConfigFile" = $ConfigFile }    _x000D__x000A_    $DialogResult = Load-PILConfigFIle -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionIndent = 10_x000D__x000A_    $RichTextBox.SelectionBullet = $False_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    If ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_    {_x000D__x000A_      $FinalMsg = "Initialization was Successful"_x000D__x000A_      $FinalClr = [MyConfig]::Colors.TextGood_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      $FinalMsg = "Initialization Failed"_x000D__x000A_      $FinalClr = [MyConfig]::Colors.TextBad_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $FinalMsg_x000D__x000A_    $StopWatch.Stop()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Display-InitiliazePILUtility"_x000D__x000A_}_x000D__x000A_#endregion function Display-InitiliazePILUtility_x000D__x000A__x000D__x000A__x000D__x000A_#region function Load-PILConfigFIle_x000D__x000A_Function Load-PILConfigFIle()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Display Utility Status Sample Function_x000D__x000A_    .PARAMETER RichTextBox_x000D__x000A_    .PARAMETER HashTable_x000D__x000A_      Passed Paramters HashTable_x000D__x000A_    .EXAMPLE_x000D__x000A_      Load-PILConfigFIle -RichTextBox $RichTextBox_x000D__x000A_    .EXAMPLE_x000D__x000A_      Load-PILConfigFIle -RichTextBox $RichTextBox -HashTable $HashTable_x000D__x000A_    .NOTES_x000D__x000A_      Original Script By Ken Sweet_x000D__x000A_    .LINK_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [Parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.RichTextBox]$RichTextBox,_x000D__x000A_    [HashTable]$HashTable_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Load-PILConfigFIle"_x000D__x000A_  _x000D__x000A_  $DisplayResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_  $RichTextBox.Refresh()_x000D__x000A_  _x000D__x000A_  # Get Passed Values_x000D__x000A_  $ShowHeader = $HashTable.ShowHeader_x000D__x000A_  $ConfigFile = $HashTable.ConfigFile_x000D__x000A_  _x000D__x000A_  _x000D__x000A_  $RichTextBox.SelectionIndent = 10_x000D__x000A_  $RichTextBox.SelectionBullet = $False_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text_x000D__x000A_    _x000D__x000A_    # Initialize StopWatch_x000D__x000A_    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_  Write-RichTextBox -RichTextBox $RichTextBox -Text "Processing PIL Configuration File" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)_x000D__x000A_  $RichTextBox.SelectionIndent = 20_x000D__x000A_  $RichTextBox.SelectionBullet = $True_x000D__x000A_  _x000D__x000A_  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Configuration File" -Value ([System.IO.Path]::GetFileName($ConfigFile)) -Font ([MyConfig]::Font.Bold)_x000D__x000A_  $RichTextBox.SelectionIndent = 30_x000D__x000A_  _x000D__x000A_  If ([System.IO.File]::Exists($ConfigFile))_x000D__x000A_  {_x000D__x000A_    Try_x000D__x000A_    {_x000D__x000A_      # Load Configuration_x000D__x000A_      $TmpConfig = Import-Clixml -LiteralPath $ConfigFile_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "SUCCESS" -TextFore ([MyConfig]::Colors.TextGood) -Value "Found PIL Config File" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_      _x000D__x000A_      # Add / Update PIL Columns_x000D__x000A_      $RichTextBox.SelectionIndent = 20_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Number of Columns" -Value ($TmpConfig.ColumnNames.Count)_x000D__x000A_      [MyRuntime]::UpdateTotalColumn($TmpConfig.ColumnNames.Count)_x000D__x000A_      $RichTextBox.SelectionIndent = 30_x000D__x000A_      $PILItemListListView.BeginUpdate()_x000D__x000A_      $PILItemListListView.Columns.Clear()_x000D__x000A_      $PILItemListListView.Items.Clear()_x000D__x000A_      [MyRuntime]::ThreadConfig.ColumnNames = $TmpConfig.ColumnNames_x000D__x000A_      For ($I = 0; $I -lt ([MyRuntime]::MaxColumns); $I++)_x000D__x000A_      {_x000D__x000A_        New-ColumnHeader -ListView $PILItemListListView -Text ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Name ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Tag ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Width -2_x000D__x000A_      }_x000D__x000A_      $PILItemListListView.AutoResizeColumns([System.Windows.Forms.ColumnHeaderAutoResizeStyle]::HeaderSize)_x000D__x000A_      New-ColumnHeader -ListView $PILItemListListView -Text " " -Name "Blank" -Tag " " -Width ($PILForm.Width * 4)_x000D__x000A_      $PILItemListListView.EndUpdate()_x000D__x000A_      _x000D__x000A_      # Update Thread Script_x000D__x000A_      $RichTextBox.SelectionIndent = 20_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Runspace Pool Threads" -Value ($TmpConfig.ThreadCount)_x000D__x000A_      [MyRuntime]::ThreadConfig.UpdateThreadInfo($TmpConfig.ThreadCount, $TmpConfig.ThreadScript)_x000D__x000A_      _x000D__x000A_      # Add / Update Common Modules_x000D__x000A_      $RichTextBox.SelectionIndent = 20_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Common Runspace Pool Modules" -Value ($TmpConfig.Modules.Count)_x000D__x000A_      _x000D__x000A_      # Install Modules Message_x000D__x000A_      If ([MyConfig]::IsLocalAdmin)_x000D__x000A_      {_x000D__x000A_        $TmpInallMsg = "the System Module Folder"_x000D__x000A_        $TmpScope = "AllUsers"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $TmpInallMsg = "Your User Profile Module Folder"_x000D__x000A_        $TmpScope = "CurrentUser"_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Modules.Clear()_x000D__x000A_      :LoadMods ForEach ($Key In $TmpConfig.Modules.Keys)_x000D__x000A_      {_x000D__x000A_        $Module = $TmpConfig.Modules[$Key]_x000D__x000A_        $RichTextBox.SelectionIndent = 30_x000D__x000A_        Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Module.Name -Value $Module.Version_x000D__x000A_        $RichTextBox.SelectionIndent = 40_x000D__x000A_        _x000D__x000A_        If ([MyRuntime]::Modules.ContainsKey($Module.Name))_x000D__x000A_        {_x000D__x000A_          If ([Version]::New([MyRuntime]::Modules[$Module.Name].Version) -lt [Version]::New($Module.Version))_x000D__x000A_          {_x000D__x000A_            $DialogResult = Get-UserResponse -Title "Incorrect Module Version" -Message "The Module $($Module.Name) Version $($Module.Version) was not Found would you like to Install it to $($TmpInallMsg)?" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes -Icon ([System.Drawing.SystemIcons]::Question)_x000D__x000A_            If ($DialogResult.Success)_x000D__x000A_            {_x000D__x000A_              $ChkInstall = Install-MyModule -Name $Module.Name -Version $Module.Version -Scope $TmpScope -Install -NoImport_x000D__x000A_              If ($ChkInstall.Success)_x000D__x000A_              {_x000D__x000A_                Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "SUCCESS" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation was Successful" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_              }_x000D__x000A_              Else_x000D__x000A_              {_x000D__x000A_                Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_                $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_                Break LoadMods_x000D__x000A_              }_x000D__x000A_            }_x000D__x000A_            Else_x000D__x000A_            {_x000D__x000A_              Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_              $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_              Break LoadMods_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-UserResponse -Title "Module Not Instaled" -Message "The Module $($Module.Name) Version $($Module.Version) was not Found would you like to Install it to $($TmpInallMsg)?" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes -Icon ([System.Drawing.SystemIcons]::Question)_x000D__x000A_          If ($DialogResult.Success)_x000D__x000A_          {_x000D__x000A_            $ChkInstall = Install-MyModule -Name $Module.Name -Version $Module.Version -Scope $TmpScope -Install -NoImport_x000D__x000A_            If ($ChkInstall.Success)_x000D__x000A_            {_x000D__x000A_              Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "SUCCESS" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation was Successful" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_            }_x000D__x000A_            Else_x000D__x000A_            {_x000D__x000A_              Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_              $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_              Break LoadMods_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "FAILED" -TextFore ([MyConfig]::Colors.TextBad) -Value "Module $($Module.Name) Installation Failed" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_            $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_            Break LoadMods_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Add Module to List_x000D__x000A_        [Void][MyRuntime]::ThreadConfig.Modules.Add($Module.Name, [PILModule]::New($Module.Location, $Module.Name, $Module.Version))_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      If ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        # Add / Update Common Functions_x000D__x000A_        $RichTextBox.SelectionIndent = 20_x000D__x000A_        Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Common Runspace Pool Functions" -Value ($TmpConfig.Functions.Count)_x000D__x000A_        [MyRuntime]::ThreadConfig.Functions.Clear()_x000D__x000A_        $RichTextBox.SelectionIndent = 30_x000D__x000A_        ForEach ($Key In $TmpConfig.Functions.Keys)_x000D__x000A_        {_x000D__x000A_          Write-RichTextBox -RichTextBox $RichTextBox -Text $Key_x000D__x000A_          [Void][MyRuntime]::ThreadConfig.Functions.Add($Key, [PILFunction]::New($Key, $TmpConfig.Functions[$Key].ScriptBlock))_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Add / Update Common Variables_x000D__x000A_        $RichTextBox.SelectionIndent = 20_x000D__x000A_        Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Common Runspace Pool Variables" -Value ($TmpConfig.Variables.Count)_x000D__x000A_        [MyRuntime]::ThreadConfig.Variables.Clear()_x000D__x000A_        $RichTextBox.SelectionIndent = 30_x000D__x000A_        ForEach ($Key In $TmpConfig.Variables.Keys)_x000D__x000A_        {_x000D__x000A_          Write-RichTextBox -RichTextBox $RichTextBox -Text $Key_x000D__x000A_          [Void][MyRuntime]::ThreadConfig.Variables.Add($Key, [PILVariable]::New($Key, $TmpConfig.Variables[$Key].Value))_x000D__x000A_        }_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    Catch_x000D__x000A_    {_x000D__x000A_      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value "PIL Config File was not Loaded" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_      Write-RichTextBoxError -RichTextBox $RichTextBox_x000D__x000A_      $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value "PIL Config File not Found" -ValueFore ([MyConfig]::Colors.TextFore)_x000D__x000A_    $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  If ($ShowHeader)_x000D__x000A_  {_x000D__x000A_    $RichTextBox.SelectionIndent = 10_x000D__x000A_    $RichTextBox.SelectionBullet = $False_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Set Final Status Message_x000D__x000A_    Switch ($DisplayResult)_x000D__x000A_    {_x000D__x000A_      "OK"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Successfully Imported PIL Configuration"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextGood_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Cancel"_x000D__x000A_      {_x000D__x000A_        $FinalMsg = "Errors Importing PIL Configuration"_x000D__x000A_        $FinalClr = [MyConfig]::Colors.TextBad_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Write Final Status Message_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())_x000D__x000A_    Write-RichTextBox -RichTextBox $RichTextBox_x000D__x000A_    _x000D__x000A_    # Update Status Message_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = $FinalMsg_x000D__x000A_    $StopWatch.Stop()_x000D__x000A_  }_x000D__x000A_    _x000D__x000A_  # Return DialogResult_x000D__x000A_  $DisplayResult_x000D__x000A_  $DisplayResult = $Null_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Load-PILConfigFIle"_x000D__x000A_}_x000D__x000A_#endregion function Load-PILConfigFIle_x000D__x000A__x000D__x000A__x000D__x000A_#region ThreadConfiguration Result Class_x000D__x000A_Class ThreadConfiguration_x000D__x000A_{_x000D__x000A_  [Bool]$Success_x000D__x000A_  [Object]$DialogResult_x000D__x000A__x000D__x000A_  ThreadConfiguration ([Bool]$Success, [Object]$DialogResult)_x000D__x000A_  {_x000D__x000A_    $This.Success = $Success_x000D__x000A_    $This.DialogResult = $DialogResult_x000D__x000A_  }_x000D__x000A__x000D__x000A_}_x000D__x000A_#endregion ThreadConfiguration Result Class_x000D__x000A__x000D__x000A_#region function Update-ThreadConfiguration_x000D__x000A_function Update-ThreadConfiguration ()_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shows ThreadConfiguration_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shows ThreadConfiguration_x000D__x000A_    .PARAMETER Title_x000D__x000A_      Title of the ThreadConfiguration Window_x000D__x000A_    .PARAMETER Width_x000D__x000A_      Width of the Statts ThreadConfiguration Window_x000D__x000A_    .PARAMETER Height_x000D__x000A_      Height of the Status ThreadConfiguration Window_x000D__x000A_    .PARAMETER ButtonLeft_x000D__x000A_      The DialogResult of the Left Button_x000D__x000A_    .PARAMETER ButtonMid_x000D__x000A_      The DialogResult of the Middle Button_x000D__x000A_    .PARAMETER ButtonRight_x000D__x000A_      The DialogResult of the Right Button_x000D__x000A_    .EXAMPLE_x000D__x000A_      $Return = ThreadConfiguration -Title $Title_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [String]$Title = "Update PIL Threads Configuration",_x000D__x000A_    [Int]$Width = 70,_x000D__x000A_    [Int]$Height = 33,_x000D__x000A_    [String]$ButtonLeft = "&amp;OK",_x000D__x000A_    [String]$ButtonMid = "&amp;Reset",_x000D__x000A_    [String]$ButtonRight = "&amp;Cancel"_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Function Update-ThreadConfiguration"_x000D__x000A__x000D__x000A_  #region ******** Begin **** ThreadConfiguration **** Begin ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ThreadConfiguration Form_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ThreadConfigurationForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ThreadConfigurationForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  $ThreadConfigurationForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ThreadConfigurationForm.Font = [MyConfig]::Font.Regular_x000D__x000A_  $ThreadConfigurationForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $ThreadConfigurationForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D_x000D__x000A_  $ThreadConfigurationForm.Icon = $PILForm.Icon_x000D__x000A_  $ThreadConfigurationForm.KeyPreview = $True_x000D__x000A_  $ThreadConfigurationForm.MaximizeBox = $False_x000D__x000A_  $ThreadConfigurationForm.MinimizeBox = $False_x000D__x000A_  $ThreadConfigurationForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))_x000D__x000A_  $ThreadConfigurationForm.Name = "ThreadConfigurationForm"_x000D__x000A_  $ThreadConfigurationForm.Owner = $PILForm_x000D__x000A_  $ThreadConfigurationForm.ShowInTaskbar = $False_x000D__x000A_  $ThreadConfigurationForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent_x000D__x000A_  $ThreadConfigurationForm.Text = $Title_x000D__x000A_  #endregion $ThreadConfigurationForm = [System.Windows.Forms.Form]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormKeyDown ********_x000D__x000A_  function Start-ThreadConfigurationFormKeyDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        KeyDown Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        KeyDown Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The Form Control that fired the KeyDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the Form KeyDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-ThreadConfigurationFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter KeyDown Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)_x000D__x000A_    {_x000D__x000A_      $ThreadConfigurationForm.Close()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit KeyDown Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormKeyDown ********_x000D__x000A_  $ThreadConfigurationForm.add_KeyDown({ Start-ThreadConfigurationFormKeyDown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormLoad ********_x000D__x000A_  function Start-ThreadConfigurationFormLoad_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Load Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Load Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Load Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Load Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormLoad -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Load Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Load Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormLoad ********_x000D__x000A_  $ThreadConfigurationForm.add_Load({ Start-ThreadConfigurationFormLoad -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormMove ********_x000D__x000A_  function Start-ThreadConfigurationFormMove_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Move Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Move Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Move Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Move Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Move Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Move Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormMove ********_x000D__x000A_  $ThreadConfigurationForm.add_Move({ Start-ThreadConfigurationFormMove -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationFormShown ********_x000D__x000A_  function Start-ThreadConfigurationFormShown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Shown Event for the ThreadConfiguration Form Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Shown Event for the ThreadConfiguration Form Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Form Control that fired the Shown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Form Shown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Form]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Shown Event for `$ThreadConfigurationForm"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $Sender.Refresh()_x000D__x000A_    Start-ThreadConfigurationBtmMidButtonClick -Sender $ThreadConfigurationBtmMidButton -EventArg "Reset"_x000D__x000A_    $ThreadConfigurationBtmLeftButton.Select()_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Shown Event for `$ThreadConfigurationForm"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationFormShown ********_x000D__x000A_  $ThreadConfigurationForm.add_Shown({ Start-ThreadConfigurationFormShown -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region ******** Controls for ThreadConfiguration Form ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ThreadConfiguration Panel - Fill_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ThreadConfigurationPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationForm.Controls.Add($ThreadConfigurationPanel)_x000D__x000A_  #$ThreadConfigurationPanel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ThreadConfigurationPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ThreadConfigurationPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $ThreadConfigurationPanel.Name = "ThreadConfigurationPanel"_x000D__x000A_  $ThreadConfigurationPanel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)_x000D__x000A_  $ThreadConfigurationPanel.Text = "ThreadConfigurationPanel"_x000D__x000A_  #endregion $ThreadConfigurationPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ThreadConfigurationPanel Controls ********_x000D__x000A_  _x000D__x000A_  $TmpValue = (($ThreadConfigurationPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 5)) / 3)_x000D__x000A_  $TmpWidth = [Math]::Floor($TmpValue)_x000D__x000A_  $TmpMod = ($TmpValue % 2)_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCFunctions GroupBox - Fill_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCFunctionsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCFunctionsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCFunctionsGroupBox)_x000D__x000A_  $PILTCFunctionsGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCFunctionsGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCFunctionsGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCFunctionsGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $PILTCFunctionsGroupBox.Height = 100_x000D__x000A_  $PILTCFunctionsGroupBox.Margin = [System.Windows.Forms.Padding]::New(50, 3, 10, 50)_x000D__x000A_  $PILTCFunctionsGroupBox.Name = "PILTCFunctionsGroupBox"_x000D__x000A_  $PILTCFunctionsGroupBox.Text = "Common Functions"_x000D__x000A_  #$PILTCFunctionsGroupBox.Width = 200_x000D__x000A_  #endregion $PILTCFunctionsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCFunctionsGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCFunctionsListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCFunctionsListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCFunctionsGroupBox.Controls.Add($PILTCFunctionsListBox)_x000D__x000A_  $PILTCFunctionsListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$PILTCFunctionsListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCFunctionsListBox.DisplayMember = "Name"_x000D__x000A_  $PILTCFunctionsListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCFunctionsListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCFunctionsListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCFunctionsListBox.IntegralHeight = $False_x000D__x000A_  $PILTCFunctionsListBox.ItemHeight = [MyConfig]::Font.Height_x000D__x000A_  $PILTCFunctionsListBox.Name = "PILTCFunctionsListBox"_x000D__x000A_  $PILTCFunctionsListBox.Sorted = $True_x000D__x000A_  #$PILTCFunctionsListBox.TabIndex = 0_x000D__x000A_  #$PILTCFunctionsListBox.TabStop = $True_x000D__x000A_  #$PILTCFunctionsListBox.Tag = [System.Object]::New()_x000D__x000A_  $PILTCFunctionsListBox.ValueMember = "ScriptBlock"_x000D__x000A_  #endregion $PILTCFunctionsListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_    _x000D__x000A_  #region ******** Function Start-PILTCFunctionsListBoxMouseDown ********_x000D__x000A_  function Start-PILTCFunctionsListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCFunctions ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCFunctions ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCFunctionsContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCFunctionsContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCFunctionsContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsListBoxMouseDown ********_x000D__x000A_  $PILTCFunctionsListBox.add_MouseDown({Start-PILTCFunctionsListBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCFunctionsListBoxSelectedIndexChanged ********_x000D__x000A_  function Start-PILTCFunctionsListBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCFunctions ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCFunctions ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsListBoxSelectedIndexChanged ********_x000D__x000A_  $PILTCFunctionsListBox.add_SelectedIndexChanged({Start-PILTCFunctionsListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCFunctions ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCFunctionsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCFunctionsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCFunctionsListBox.ContextMenuStrip = $PILTCFunctionsContextMenuStrip_x000D__x000A_  $PILTCFunctionsContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCFunctionsContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCFunctionsContextMenuStrip.Name = "PILTCFunctionsContextMenuStrip"_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCFunctionsContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCFunctionsContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCFunctionsContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCFunctionsContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCFunctionsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCFunctionsContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCFunctionsContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCFunctions ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCFunctions ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsContextMenuStripOpening ********_x000D__x000A_  $PILTCFunctionsContextMenuStrip.add_Opening({Start-PILTCFunctionsContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A_    _x000D__x000A_  #region ******** Function Start-PILTCFunctionsContextMenuStripItemClick ********_x000D__x000A_  Function Start-PILTCFunctionsContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ItemClicked Event for the PILTCFunctions ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ItemClicked Event for the PILTCFunctions ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCFunctions Control that fired the ItemClicked Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCFunctions ItemClicked Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCFunctionsContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $PILOpenFileDialog.FileName = ""_x000D__x000A_        $PILOpenFileDialog.Filter = "PowerShell Scripts|*.PS1|All Files (*.*)|*.*"_x000D__x000A_        $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_        $PILOpenFileDialog.Multiselect = $False_x000D__x000A_        $PILOpenFileDialog.Title = "Load PIL Thread Script"_x000D__x000A_        $PILOpenFileDialog.Tag = $Null_x000D__x000A_        $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_        If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_        {_x000D__x000A_          $TmpFunctions = Get-Content -Path $PILOpenFileDialog.FileName -Raw_x000D__x000A_          $AST = [System.Management.Automation.Language.Parser]::ParseInput($TmpFunctions, [ref]$Null, [ref]$Null)_x000D__x000A_          $Functions = @($AST.FindAll({ Param ($Node) ($Node -is [System.Management.Automation.Language.FunctionDefinitionAst] -and (-not ($node.Parent -is [System.Management.Automation.Language.FunctionMemberAst]))) }, $True))_x000D__x000A_          If ($Functions.Count -gt 0)_x000D__x000A_          {_x000D__x000A_            ForEach ($Function In $Functions)_x000D__x000A_            {_x000D__x000A_              [Void]$PILTCFunctionsListBox.Items.Add([PILFunction]::New($Function.Name, $Function.Body.Extent.Text))_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items.RemoveAt($PILTCFunctionsListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCFunctionsContextMenuStripItemClick ********_x000D__x000A_  _x000D__x000A_  (New-MenuItem -Menu $PILTCFunctionsContextMenuStrip -Text "Add Functions" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCFunctionsContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCFunctionsContextMenuStrip -Text "Remove Function" -Name "Remove" -Tag "Remove" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCFunctionsContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCFunctionsContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCFunctionsContextMenuStrip -Text "Clear All" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -PassThru).add_Click({ Start-PILTCFunctionsContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  $PILTCFunctionsGroupBox.ClientSize = [System.Drawing.Size]::New($PILTCFunctionsGroupBox.ClientSize.Width, ([MyConfig]::Font.Height * 10))_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCFunctionsGroupBox Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCVariables GroupBox - Right_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCVariablesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCVariablesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCVariablesGroupBox)_x000D__x000A_  $PILTCVariablesGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCVariablesGroupBox.Dock = [System.Windows.Forms.DockStyle]::Right_x000D__x000A_  $PILTCVariablesGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCVariablesGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $PILTCVariablesGroupBox.Name = "PILTCVariablesGroupBox"_x000D__x000A_  $PILTCVariablesGroupBox.Text = "Common Variables"_x000D__x000A_  $PILTCVariablesGroupBox.Width = $TmpWidth_x000D__x000A_  #endregion $PILTCVariablesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCVariablesGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCVariablesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCVariablesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCVariablesGroupBox.Controls.Add($PILTCVariablesListBox)_x000D__x000A_  $PILTCVariablesListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$PILTCVariablesListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCVariablesListBox.DisplayMember = "Name"_x000D__x000A_  $PILTCVariablesListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCVariablesListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCVariablesListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCVariablesListBox.IntegralHeight = $False_x000D__x000A_  $PILTCVariablesListBox.ItemHeight = [MyConfig]::Font.Height_x000D__x000A_  $PILTCVariablesListBox.Name = "PILTCVariablesListBox"_x000D__x000A_  $PILTCVariablesListBox.Sorted = $True_x000D__x000A_  #$PILTCVariablesListBox.TabIndex = 0_x000D__x000A_  #$PILTCVariablesListBox.TabStop = $True_x000D__x000A_  #$PILTCVariablesListBox.Tag = [System.Object]::New()_x000D__x000A_  $PILTCVariablesListBox.ValueMember = "Value"_x000D__x000A_  #endregion $PILTCVariablesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_   _x000D__x000A_  #region ******** Function Start-PILTCVariablesListBoxMouseDown ********_x000D__x000A_  function Start-PILTCVariablesListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCVariables ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCVariables ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Edit"].Enabled = $True_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_        $PILTCVariablesContextMenuStrip.Items["Edit"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCVariablesContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCVariablesContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesListBoxMouseDown ********_x000D__x000A_  $PILTCVariablesListBox.add_MouseDown({Start-PILTCVariablesListBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCVariablesListBoxSelectedIndexChanged ********_x000D__x000A_  function Start-PILTCVariablesListBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCVariables ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCVariables ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesListBoxSelectedIndexChanged ********_x000D__x000A_  $PILTCVariablesListBox.add_SelectedIndexChanged({Start-PILTCVariablesListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCVariables ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCVariablesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCVariablesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCVariablesListBox.ContextMenuStrip = $PILTCVariablesContextMenuStrip_x000D__x000A_  $PILTCVariablesContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCVariablesContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCVariablesContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCVariablesContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCVariablesContextMenuStrip.Name = "PILTCVariablesContextMenuStrip"_x000D__x000A_  $PILTCVariablesContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCVariablesContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCVariablesContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCVariablesContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCVariablesContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCVariablesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCVariablesContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCVariablesContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCVariables ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCVariables ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesContextMenuStripOpening ********_x000D__x000A_  $PILTCVariablesContextMenuStrip.add_Opening({Start-PILTCVariablesContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCVariablesContextMenuStripItemClick ********_x000D__x000A_  Function Start-PILTCVariablesContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ItemClicked Event for the PILTCVariables ToolStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ItemClicked Event for the PILTCVariables ToolStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCVariables Control that fired the ItemClicked Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCVariables ItemClicked Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCVariablesContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    Param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_    _x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $OrderedItems = [Ordered]@{ "Variable Name"= ""; "Variable Value" = "" }_x000D__x000A_        $DialogResult = Get-MultiTextBoxInput -Title "Add Variable" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          [Void]$PILTCVariablesListBox.Items.Add([PILVariable]::New($DialogResult.OrderedItems["Variable Name"], $DialogResult.OrderedItems["Variable Value"]))_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Edit"_x000D__x000A_      {_x000D__x000A_        $OrderedItems = [Ordered]@{ "Variable Name" = $PILTCVariablesListBox.SelectedItem.Name; "Variable Value" = $PILTCVariablesListBox.SelectedItem.Value }_x000D__x000A_        $DialogResult = Get-MultiTextBoxInput -Title "Edit Variable" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          $PILTCVariablesListBox.Items.RemoveAt($PILTCVariablesListBox.SelectedIndex)_x000D__x000A_          [Void]$PILTCVariablesListBox.Items.Add([PILVariable]::New($DialogResult.OrderedItems["Variable Name"], $DialogResult.OrderedItems["Variable Value"]))_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items.RemoveAt($PILTCVariablesListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCVariablesContextMenuStripItemClick ********_x000D__x000A_  _x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Add Variable" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Edit Variable" -Name "Edit" -Tag "Edit" -DisplayStyle "ImageAndText" -ImageKey "Edit16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Remove Variable" -Name "Remove" -Tag "Remove" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCVariablesContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCVariablesContextMenuStrip -Text "Clear All" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -PassThru).add_Click({Start-PILTCVariablesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCVariablesGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCModules GroupBox - Left_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCModulesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCModulesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCModulesGroupBox)_x000D__x000A_  $PILTCModulesGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCModulesGroupBox.Dock = [System.Windows.Forms.DockStyle]::Left_x000D__x000A_  $PILTCModulesGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCModulesGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  $PILTCModulesGroupBox.Name = "PILTCModulesGroupBox"_x000D__x000A_  $PILTCModulesGroupBox.Text = "Common Modules"_x000D__x000A_  $PILTCModulesGroupBox.Width = $TmpWidth_x000D__x000A_  #endregion $PILTCModulesGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCModulesGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCModulesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCModulesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  $PILTCModulesGroupBox.Controls.Add($PILTCModulesListBox)_x000D__x000A_  $PILTCModulesListBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  #$PILTCModulesListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCModulesListBox.DisplayMember = "Name"_x000D__x000A_  $PILTCModulesListBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCModulesListBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCModulesListBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCModulesListBox.IntegralHeight = $False_x000D__x000A_  $PILTCModulesListBox.ItemHeight = [MyConfig]::Font.Height_x000D__x000A_  $PILTCModulesListBox.Name = "PILTCModulesListBox"_x000D__x000A_  $PILTCModulesListBox.Sorted = $False_x000D__x000A_  #$PILTCModulesListBox.TabIndex = 0_x000D__x000A_  #$PILTCModulesListBox.TabStop = $True_x000D__x000A_  #$PILTCModulesListBox.Tag = [System.Object]::New()_x000D__x000A_  $PILTCModulesListBox.ValueMember = "Version"_x000D__x000A_  #endregion $PILTCModulesListBox = [System.Windows.Forms.ListBox]::New()_x000D__x000A_  _x000D__x000A_  # Add Current Modules_x000D__x000A_  If ([MyRuntime]::ThreadConfig.Modules.Count -gt 0)_x000D__x000A_  {_x000D__x000A_    #$PILTCModulesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Modules.Values))_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCModulesListBoxMouseDown ********_x000D__x000A_  function Start-PILTCModulesListBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCModules ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCModules ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesListBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_    {_x000D__x000A_      $TempIndex = $Sender.IndexFromPoint($EventArg.location)_x000D__x000A_      If ($TempIndex -gt -1)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndex = $TempIndex_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Remove"].Enabled = $True_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Up"].Enabled = ($TempIndex -gt 0)_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Down"].Enabled = ($TempIndex -lt ($Sender.Items.Count - 1))_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Remove"].Enabled = $False_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Up"].Enabled = $False_x000D__x000A_        $PILTCModulesContextMenuStrip.Items["Down"].Enabled = $False_x000D__x000A_      }_x000D__x000A_      $PILTCModulesContextMenuStrip.Items["Clear"].Enabled = ($Sender.Items.Count -gt 0)_x000D__x000A_      $PILTCModulesContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesListBoxMouseDown ********_x000D__x000A_  $PILTCModulesListBox.add_MouseDown({Start-PILTCModulesListBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCModulesListBoxSelectedIndexChanged ********_x000D__x000A_  function Start-PILTCModulesListBoxSelectedIndexChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        SelectedIndexChanged Event for the PILTCModules ListBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        SelectedIndexChanged Event for the PILTCModules ListBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the SelectedIndexChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules SelectedIndexChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ListBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit SelectedIndexChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesListBoxSelectedIndexChanged ********_x000D__x000A_  $PILTCModulesListBox.add_SelectedIndexChanged({Start-PILTCModulesListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCModules ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCModulesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCModulesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCModulesListBox.ContextMenuStrip = $PILTCModulesContextMenuStrip_x000D__x000A_  $PILTCModulesContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCModulesContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCModulesContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCModulesContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCModulesContextMenuStrip.Name = "PILTCModulesContextMenuStrip"_x000D__x000A_  $PILTCModulesContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCModulesContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCModulesContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCModulesContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCModulesContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCModulesContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_ _x000D__x000A_  #region ******** Function Start-PILTCModulesContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCModulesContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCModules ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCModules ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesContextMenuStripOpening ********_x000D__x000A_  $PILTCModulesContextMenuStrip.add_Opening({Start-PILTCModulesContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCModulesContextMenuStripItemClick ********_x000D__x000A_  function Start-PILTCModulesContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the PILTCModules ContextMenuStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the PILTCModules ContextMenuStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCModulesContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $TmpCurMods = @($PILTCModulesListBox.Items | Select-Object -ExpandProperty Name)_x000D__x000A_        $TmpNewMods = @([MyRuntime]::Modules.Values | Where-Object { $PSItem.Name -notin $TmpCurMods } | Sort-Object -Property Location, Name)_x000D__x000A_        If ($TmpNewMods.Count -eq 0)_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-UserResponse -Title "No More Modules" -Message "No New Modules are Avaible for to Add to the PIL Thread Configuration." -ButtonMid OK -ButtonDefault OK -Icon ([System.Drawing.SystemIcons]::Information)_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $DialogResult = Get-ListViewOption -Title "Select Modules" -Message "Select The Modules to Add to the PIL Thread Configuration." -Items $TmpNewMods -Property "Location", "Name", "Version" -Resize -Multi_x000D__x000A_          If ($DialogResult.Success)_x000D__x000A_          {_x000D__x000A_            $PILTCModulesListBox.Items.AddRange($DialogResult.item)_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Remove"_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items.Clear()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Up"_x000D__x000A_      {_x000D__x000A_        $TmpItem = $PILTCModulesListBox.SelectedItem_x000D__x000A_        $TmpIndex = $PILTCModulesListBox.SelectedIndex_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        $PILTCModulesListBox.Items.Insert(($TmpIndex - 1), $TmpItem)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Down"_x000D__x000A_      {_x000D__x000A_        $TmpItem = $PILTCModulesListBox.SelectedItem_x000D__x000A_        $TmpIndex = $PILTCModulesListBox.SelectedIndex_x000D__x000A_        $PILTCModulesListBox.Items.RemoveAt($PILTCModulesListBox.SelectedIndex)_x000D__x000A_        $PILTCModulesListBox.Items.Insert(($TmpIndex + 1), $TmpItem)_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A_    _x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCModulesContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Add Module" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Remove Module" -Name "Remove" -Tag "Remove" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCModulesContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Clear All" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -PassThru).add_Click({ Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  New-MenuSeparator -Menu $PILTCModulesContextMenuStrip_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Move Up" -Name "Up" -Tag "Up" -DisplayStyle "ImageAndText" -ImageKey "Up16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCModulesContextMenuStrip -Text "Move Down" -Name "Down" -Tag "Down" -DisplayStyle "ImageAndText" -ImageKey "Down16Icon" -PassThru).add_Click({Start-PILTCModulesContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCModulesGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCScript GroupBox - Bottom_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCScriptGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCScriptGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCScriptGroupBox)_x000D__x000A_  $PILTCScriptGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCScriptGroupBox.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $PILTCScriptGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  #$PILTCScriptGroupBox.Height = 100_x000D__x000A_  #$PILTCScriptGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $PILTCScriptGroupBox.Name = "PILTCScriptGroupBox"_x000D__x000A_  $PILTCScriptGroupBox.Text = "Thread Script"_x000D__x000A_  $PILTCScriptGroupBox.Size = [System.Drawing.Size]::New($TmpWidth, $TmpWidth)_x000D__x000A_  #$PILTCScriptGroupBox.Width = 200_x000D__x000A_  #endregion $PILTCScriptGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCScriptGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCScriptTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $PILTCScriptTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A_  $PILTCScriptGroupBox.Controls.Add($PILTCScriptTextBox)_x000D__x000A_  $PILTCScriptTextBox.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_  $PILTCScriptTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_  $PILTCScriptTextBox.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCScriptTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptTextBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptTextBox.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_  $PILTCScriptTextBox.Multiline = $True_x000D__x000A_  $PILTCScriptTextBox.Name = "PILTCScriptTextBox"_x000D__x000A_  $PILTCScriptTextBox.ReadOnly = $True_x000D__x000A_  $PILTCScriptTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both_x000D__x000A_  $PILTCScriptTextBox.ShortcutsEnabled = $False_x000D__x000A_  #$PILTCScriptTextBox.TabIndex = 0_x000D__x000A_  #$PILTCScriptTextBox.TabStop = $True_x000D__x000A_  #$PILTCScriptTextBox.Tag = @{ "HintText" = "Double Click to Load Thread Script."; "HintEnabled" = $True }_x000D__x000A_  $PILTCScriptTextBox.Text = $Null_x000D__x000A_  $PILTCScriptTextBox.WordWrap = $False_x000D__x000A_  #endregion $PILTCScriptTextBox = [System.Windows.Forms.TextBox]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCScriptTextBoxMouseDown ********_x000D__x000A_  function Start-PILTCScriptTextBoxMouseDown_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        MouseDown Event for the PILTCScript TextBox Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        MouseDown Event for the PILTCScript TextBox Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the MouseDown Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript MouseDown Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptTextBoxMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TextBox]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $PILTCScriptContextMenuStrip.Items["Clear"].Enabled = ($PILTCScriptTextBox.Text.Length -gt 0)_x000D__x000A_    $PILTCScriptContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCScriptTextBoxMouseDown ********_x000D__x000A_  $PILTCScriptTextBox.add_MouseDown({Start-PILTCScriptTextBoxMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCScript ContextMenuStrip_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCScriptContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  $PILTCScriptContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_  #$PILTCScriptListBox.ContextMenuStrip = $PILTCScriptContextMenuStrip_x000D__x000A_  $PILTCScriptContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCScriptContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCScriptContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCScriptContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_  $PILTCScriptContextMenuStrip.Name = "PILTCScriptContextMenuStrip"_x000D__x000A_  $PILTCScriptContextMenuStrip.ShowImageMargin = $True_x000D__x000A_  $PILTCScriptContextMenuStrip.ShowItemToolTips = $True_x000D__x000A_  #$PILTCScriptContextMenuStrip.TabIndex = 0_x000D__x000A_  #$PILTCScriptContextMenuStrip.TabStop = $False_x000D__x000A_  #$PILTCScriptContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_  #endregion $PILTCScriptContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCScriptContextMenuStripOpening ********_x000D__x000A_  function Start-PILTCScriptContextMenuStripOpening_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Opening Event for the PILTCScript ContextMenuStrip Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Opening Event for the PILTCScript ContextMenuStrip Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the Opening Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript Opening Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCScriptContextMenuStripOpening ********_x000D__x000A_  $PILTCScriptContextMenuStrip.add_Opening({Start-PILTCScriptContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_  #region ******** Function Start-PILTCScriptContextMenuStripItemClick ********_x000D__x000A_  function Start-PILTCScriptContextMenuStripItemClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the PILTCScript ContextMenuStripItem Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the PILTCScript ContextMenuStripItem Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCScript Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCScript Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCScriptContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Add"_x000D__x000A_      {_x000D__x000A_        $PILOpenFileDialog.FileName = ""_x000D__x000A_        $PILOpenFileDialog.Filter = "PowerShell Scripts|*.PS1|All Files (*.*)|*.*"_x000D__x000A_        $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_        $PILOpenFileDialog.Multiselect = $False_x000D__x000A_        $PILOpenFileDialog.Title = "Load PIL Thread Script"_x000D__x000A_        $PILOpenFileDialog.Tag = $Null_x000D__x000A_        $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_        If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_        {_x000D__x000A_          $PILTCScriptTextBox.Text = Get-Content -Path $PILOpenFileDialog.FileName -Raw_x000D__x000A_        }_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Clear"_x000D__x000A_      {_x000D__x000A_        $PILTCScriptTextBox.Text = $Null_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCScriptContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_  (New-MenuItem -Menu $PILTCScriptContextMenuStrip -Text "Load Script" -Name "Add" -Tag "Add" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -PassThru).add_Click({Start-PILTCScriptContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  (New-MenuItem -Menu $PILTCScriptContextMenuStrip -Text "Clear Script" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "Delete16Icon" -PassThru).add_Click({Start-PILTCScriptContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  $PILTCScriptGroupBox.ClientSize = [System.Drawing.Size]::New(($PILTCScriptGroupBox.ClientSize.Width), (([MyConfig]::Font.Height * 10) + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $PILTCScriptGroupBox Controls ********_x000D__x000A_  _x000D__x000A_  # ************************************************_x000D__x000A_  # PILTCThreads GroupBox - Bottom_x000D__x000A_  # ************************************************_x000D__x000A_  #region $PILTCThreadsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  $PILTCThreadsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A_  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)_x000D__x000A_  $ThreadConfigurationPanel.Controls.Add($PILTCThreadsGroupBox)_x000D__x000A_  $PILTCThreadsGroupBox.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCThreadsGroupBox.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $PILTCThreadsGroupBox.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCThreadsGroupBox.ForeColor = [MyConfig]::Colors.GroupFore_x000D__x000A_  #$PILTCThreadsGroupBox.Height = 100_x000D__x000A_  #$PILTCThreadsGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $PILTCThreadsGroupBox.Name = "PILTCThreadsGroupBox"_x000D__x000A_  $PILTCThreadsGroupBox.Text = "Maximun Number of Processing Threads"_x000D__x000A_  $PILTCThreadsGroupBox.Size = [System.Drawing.Size]::New($TmpWidth, $TmpWidth)_x000D__x000A_  #$PILTCThreadsGroupBox.Width = 200_x000D__x000A_  #endregion $PILTCThreadsGroupBox = [System.Windows.Forms.GroupBox]::New()_x000D__x000A__x000D__x000A_  #region ******** $PILTCThreadsGroupBox Controls ********_x000D__x000A__x000D__x000A_  #region $PILTCThreadsTrackBar = [System.Windows.Forms.TrackBar]::New()_x000D__x000A_  $PILTCThreadsTrackBar = [System.Windows.Forms.TrackBar]::New()_x000D__x000A_  $PILTCThreadsGroupBox.Controls.Add($PILTCThreadsTrackBar)_x000D__x000A_  $PILTCThreadsTrackBar.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $PILTCThreadsTrackBar.AutoSize = $False_x000D__x000A_  $PILTCThreadsTrackBar.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $PILTCThreadsTrackBar.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_  $PILTCThreadsTrackBar.Font = [MyConfig]::Font.Regular_x000D__x000A_  $PILTCThreadsTrackBar.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_  $PILTCThreadsTrackBar.Height = (3 * [MyConfig]::Font.Height)_x000D__x000A_  $PILTCThreadsTrackBar.LargeChange = 2_x000D__x000A_  $PILTCThreadsTrackBar.Maximum = 16_x000D__x000A_  $PILTCThreadsTrackBar.MinimumSize = [System.Drawing.Size]::New(0, $PILTCThreadsTrackBar.PreferredSize.Height)_x000D__x000A_  $PILTCThreadsTrackBar.Minimum = 1_x000D__x000A_  $PILTCThreadsTrackBar.Name = "PILTCThreadsTrackBar"_x000D__x000A_  $PILTCThreadsTrackBar.Orientation = [System.Windows.Forms.Orientation]::Horizontal_x000D__x000A_  $PILTCThreadsTrackBar.SmallChange = 1_x000D__x000A_  #$PILTCThreadsTrackBar.TabIndex = 0_x000D__x000A_  #$PILTCThreadsTrackBar.TabStop = $True_x000D__x000A_  #$PILTCThreadsTrackBar.Tag = [System.Object]::New()_x000D__x000A_  $PILTCThreadsTrackBar.TickFrequency = 1_x000D__x000A_  $PILTCThreadsTrackBar.TickStyle = [System.Windows.Forms.TickStyle]::Both_x000D__x000A_  $PILTCThreadsTrackBar.Value = [MyRuntime]::ThreadConfig.ThreadCount_x000D__x000A_  #endregion $PILTCThreadsTrackBar = [System.Windows.Forms.TrackBar]::New()_x000D__x000A_  $PILToolTip.SetToolTip($PILTCThreadsTrackBar, $PILTCThreadsTrackBar.Value)_x000D__x000A_  _x000D__x000A_  #region ******** Function Start-PILTCThreadsTrackBarValueChanged ********_x000D__x000A_  function Start-PILTCThreadsTrackBarValueChanged_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        ValueChanged Event for the PILTCModules TrackBar Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        ValueChanged Event for the PILTCModules TrackBar Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_         The TCModules Control that fired the ValueChanged Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_         The Event Arguments for the TCModules ValueChanged Event_x000D__x000A_      .EXAMPLE_x000D__x000A_         Start-PILTCThreadsTrackBarValueChanged -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.TrackBar]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter ValueChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    $PILToolTip.SetToolTip($PILTCThreadsTrackBar, $PILTCThreadsTrackBar.Value)_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit ValueChanged Event for $($MyInvocation.MyCommand)"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-PILTCThreadsTrackBarValueChanged ********_x000D__x000A_  $PILTCThreadsTrackBar.add_ValueChanged({Start-PILTCThreadsTrackBarValueChanged -Sender $This -EventArg $PSItem})_x000D__x000A_  _x000D__x000A_  $PILTCThreadsGroupBox.ClientSize = [System.Drawing.Size]::New(($PILTCThreadsGroupBox.ClientSize.Width), ($PILTCThreadsTrackBar.PreferredSize.Height + $PILTCThreadsTrackBar.Top + [MyConfig]::FormSpacer))_x000D__x000A_  _x000D__x000A_  #endregion ******** $PILTCThreadsGroupBox Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** $ThreadConfigurationPanel Controls ********_x000D__x000A__x000D__x000A_  # ************************************************_x000D__x000A_  # ThreadConfigurationBtm Panel - Bottom_x000D__x000A_  # ************************************************_x000D__x000A_  #region $ThreadConfigurationBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_  $ThreadConfigurationForm.Controls.Add($ThreadConfigurationBtmPanel)_x000D__x000A_  #$ThreadConfigurationBtmPanel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_  $ThreadConfigurationBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_  $ThreadConfigurationBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_  $ThreadConfigurationBtmPanel.Name = "ThreadConfigurationBtmPanel"_x000D__x000A_  $ThreadConfigurationBtmPanel.Text = "ThreadConfigurationBtmPanel"_x000D__x000A_  #endregion $ThreadConfigurationBtmPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_  #region ******** $ThreadConfigurationBtmPanel Controls ********_x000D__x000A__x000D__x000A_  # Evenly Space Buttons - Move Size to after Text_x000D__x000A_  $NumButtons = 3_x000D__x000A_  $TempSpace = [Math]::Floor($ThreadConfigurationBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))_x000D__x000A_  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)_x000D__x000A_  $TempMod = $TempSpace % $NumButtons_x000D__x000A__x000D__x000A_  #region $ThreadConfigurationBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel.Controls.Add($ThreadConfigurationBtmLeftButton)_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")_x000D__x000A_  $ThreadConfigurationBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ThreadConfigurationBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ThreadConfigurationBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Name = "ThreadConfigurationBtmLeftButton"_x000D__x000A_  #$ThreadConfigurationBtmLeftButton.TabIndex = 0_x000D__x000A_  #$ThreadConfigurationBtmLeftButton.TabStop = $True_x000D__x000A_  #$ThreadConfigurationBtmLeftButton.Tag = [System.Object]::New()_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Text = $ButtonLeft_x000D__x000A_  $ThreadConfigurationBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ThreadConfigurationBtmLeftButton.PreferredSize.Height)_x000D__x000A_  #endregion $ThreadConfigurationBtmLeftButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationBtmLeftButtonClick ********_x000D__x000A_  function Start-ThreadConfigurationBtmLeftButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmLeft Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmLeft Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmLeftButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmLeftButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    If ([String]::IsNullOrEmpty($PILTCScriptTextBox.Text))_x000D__x000A_    {_x000D__x000A_      $Result = Get-UserResponse -Title "Missing or Invalid PIL Configuration" -Icon ([System.Drawing.SystemIcons]::Error) -Message "No Thread Script was Selected."_x000D__x000A_    }_x000D__x000A_    Else_x000D__x000A_    {_x000D__x000A_      [MyRuntime]::ThreadConfig.UpdateThreadInfo($PILTCThreadsTrackBar.Value, $PILTCScriptTextBox.Text)_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Modules.Clear()_x000D__x000A_      If ($PILTCModulesListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCModulesListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Modules.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Functions.Clear()_x000D__x000A_      If ($PILTCFunctionsListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCFunctionsListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Functions.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      [MyRuntime]::ThreadConfig.Variables.Clear()_x000D__x000A_      If ($PILTCVariablesListBox.Items.Count -gt 0)_x000D__x000A_      {_x000D__x000A_        $PILTCVariablesListBox.Items | Select-Object -Property * -Unique | ForEach-Object -Process { [Void][MyRuntime]::ThreadConfig.Variables.Add($PSItem.Name, $PSItem) }_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      $ThreadConfigurationForm.DialogResult = [System.Windows.Forms.DialogResult]::OK_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmLeftButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationBtmLeftButtonClick ********_x000D__x000A_  $ThreadConfigurationBtmLeftButton.add_Click({ Start-ThreadConfigurationBtmLeftButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  #region $ThreadConfigurationBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel.Controls.Add($ThreadConfigurationBtmMidButton)_x000D__x000A_  #$ThreadConfigurationBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")_x000D__x000A_  $ThreadConfigurationBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_  $ThreadConfigurationBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ThreadConfigurationBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ThreadConfigurationBtmMidButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ThreadConfigurationBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ThreadConfigurationBtmMidButton.Location = [System.Drawing.Point]::New(($ThreadConfigurationBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ThreadConfigurationBtmMidButton.Name = "ThreadConfigurationBtmMidButton"_x000D__x000A_  #$ThreadConfigurationBtmMidButton.TabIndex = 0_x000D__x000A_  #$ThreadConfigurationBtmMidButton.TabStop = $True_x000D__x000A_  #$ThreadConfigurationBtmMidButton.Tag = [System.Object]::New()_x000D__x000A_  $ThreadConfigurationBtmMidButton.Text = $ButtonMid_x000D__x000A_  $ThreadConfigurationBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ThreadConfigurationBtmMidButton.PreferredSize.Height)_x000D__x000A_  #endregion $ThreadConfigurationBtmMidButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationBtmMidButtonClick ********_x000D__x000A_  function Start-ThreadConfigurationBtmMidButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmMid Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmMid Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmMidButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmMidButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A_    _x000D__x000A_    # Add Current Modules_x000D__x000A_    $PILTCModulesListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Modules.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCModulesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Modules.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Add Current Functions_x000D__x000A_    $PILTCFunctionsListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Functions.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCFunctionsListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Functions.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Add Current Variables_x000D__x000A_    $PILTCVariablesListBox.Items.Clear()_x000D__x000A_    If ([MyRuntime]::ThreadConfig.Variables.Count -gt 0)_x000D__x000A_    {_x000D__x000A_      $PILTCVariablesListBox.Items.AddRange(@([MyRuntime]::ThreadConfig.Variables.Values))_x000D__x000A_    }_x000D__x000A_    _x000D__x000A_    # Thread Config_x000D__x000A_    $PILTCScriptTextBox.Text = [MyRuntime]::ThreadConfig.ThreadScript_x000D__x000A_    $PILTCThreadsTrackBar.Value = [MyRuntime]::ThreadConfig.ThreadCount_x000D__x000A_    _x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmMidButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationBtmMidButtonClick ********_x000D__x000A_  $ThreadConfigurationBtmMidButton.add_Click({ Start-ThreadConfigurationBtmMidButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A_  _x000D__x000A_  #region $ThreadConfigurationBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A_  $ThreadConfigurationBtmPanel.Controls.Add($ThreadConfigurationBtmRightButton)_x000D__x000A_  $ThreadConfigurationBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")_x000D__x000A_  $ThreadConfigurationBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink_x000D__x000A_  $ThreadConfigurationBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack_x000D__x000A_  $ThreadConfigurationBtmRightButton.Font = [MyConfig]::Font.Bold_x000D__x000A_  $ThreadConfigurationBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore_x000D__x000A_  $ThreadConfigurationBtmRightButton.Location = [System.Drawing.Point]::New(($ThreadConfigurationBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)_x000D__x000A_  $ThreadConfigurationBtmRightButton.Name = "ThreadConfigurationBtmRightButton"_x000D__x000A_  #$ThreadConfigurationBtmRightButton.TabIndex = 0_x000D__x000A_  #$ThreadConfigurationBtmRightButton.TabStop = $True_x000D__x000A_  #$ThreadConfigurationBtmRightButton.Tag = [System.Object]::New()_x000D__x000A_  $ThreadConfigurationBtmRightButton.Text = $ButtonRight_x000D__x000A_  $ThreadConfigurationBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ThreadConfigurationBtmRightButton.PreferredSize.Height)_x000D__x000A_  #endregion $ThreadConfigurationBtmRightButton = [System.Windows.Forms.Button]::New()_x000D__x000A__x000D__x000A_  #region ******** Function Start-ThreadConfigurationBtmRightButtonClick ********_x000D__x000A_  function Start-ThreadConfigurationBtmRightButtonClick_x000D__x000A_  {_x000D__x000A_    &lt;#_x000D__x000A_      .SYNOPSIS_x000D__x000A_        Click Event for the ThreadConfigurationBtmRight Button Control_x000D__x000A_      .DESCRIPTION_x000D__x000A_        Click Event for the ThreadConfigurationBtmRight Button Control_x000D__x000A_      .PARAMETER Sender_x000D__x000A_        The Button Control that fired the Click Event_x000D__x000A_      .PARAMETER EventArg_x000D__x000A_        The Event Arguments for the Button Click Event_x000D__x000A_      .EXAMPLE_x000D__x000A_        Start-ThreadConfigurationBtmRightButtonClick -Sender $Sender -EventArg $EventArg_x000D__x000A_      .NOTES_x000D__x000A_        Original Function By kensw)_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [System.Windows.Forms.Button]$Sender,_x000D__x000A_      [parameter(Mandatory = $True)]_x000D__x000A_      [Object]$EventArg_x000D__x000A_    )_x000D__x000A_    Write-Verbose -Message "Enter Click Event for `$ThreadConfigurationBtmRightButton"_x000D__x000A__x000D__x000A_    [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_    # Cancel Code Goes here_x000D__x000A__x000D__x000A_    $ThreadConfigurationForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel_x000D__x000A__x000D__x000A_    Write-Verbose -Message "Exit Click Event for `$ThreadConfigurationBtmRightButton"_x000D__x000A_  }_x000D__x000A_  #endregion ******** Function Start-ThreadConfigurationBtmRightButtonClick ********_x000D__x000A_  $ThreadConfigurationBtmRightButton.add_Click({ Start-ThreadConfigurationBtmRightButtonClick -Sender $This -EventArg $PSItem })_x000D__x000A__x000D__x000A_  $ThreadConfigurationBtmPanel.ClientSize = [System.Drawing.Size]::New(($ThreadConfigurationBtmRightButton.Right + [MyConfig]::FormSpacer), ($ThreadConfigurationBtmRightButton.Bottom + [MyConfig]::FormSpacer))_x000D__x000A__x000D__x000A_  #endregion ******** $ThreadConfigurationBtmPanel Controls ********_x000D__x000A__x000D__x000A_  #endregion ******** Controls for ThreadConfiguration Form ********_x000D__x000A__x000D__x000A_  #endregion ******** End **** ThreadConfiguration **** End ********_x000D__x000A_  _x000D__x000A_  # Display Config Form_x000D__x000A_  $DialogResult = $ThreadConfigurationForm.ShowDialog($PILForm)_x000D__x000A_  _x000D__x000A_  # Return Succes / Cancel Status_x000D__x000A_  [ThreadConfiguration]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult)_x000D__x000A_  _x000D__x000A_  $ThreadConfigurationForm.Dispose()_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit Function Update-ThreadConfiguration"_x000D__x000A_}_x000D__x000A_#endregion function Update-ThreadConfiguration_x000D__x000A__x000D__x000A_#endregion ******** PIL Custom Dialogs ********_x000D__x000A__x000D__x000A_#region ******** Begin **** PIL **** Begin ********_x000D__x000A__x000D__x000A_#$Result = [System.Windows.Forms.MessageBox]::Show($PILForm, "Message Text", [MyConfig]::ScriptName, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)_x000D__x000A__x000D__x000A_$PILFormComponents = [System.ComponentModel.Container]::New()_x000D__x000A__x000D__x000A_#region $PILOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()_x000D__x000A_$PILOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()_x000D__x000A_$PILOpenFileDialog.InitialDirectory = [MyConfig]::ScriptRoot_x000D__x000A_$PILOpenFileDialog.Multiselect = $False_x000D__x000A_$PILOpenFileDialog.ShowHelp = $False_x000D__x000A_$PILOpenFileDialog.ValidateNames = $True_x000D__x000A_#endregion $PILOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()_x000D__x000A__x000D__x000A_#region $PILSaveFileDialog = [System.Windows.Forms.SaveFileDialog]::New()_x000D__x000A_$PILSaveFileDialog = [System.Windows.Forms.SaveFileDialog]::New()_x000D__x000A_$PILSaveFileDialog.AddExtension = $True_x000D__x000A_$PILSaveFileDialog.CheckFileExists = $False_x000D__x000A_$PILSaveFileDialog.CreatePrompt = $False_x000D__x000A_$PILSaveFileDialog.InitialDirectory = [MyConfig]::ScriptRoot_x000D__x000A_$PILSaveFileDialog.OverwritePrompt = $True_x000D__x000A_$PILSaveFileDialog.ShowHelp = $False_x000D__x000A_$PILSaveFileDialog.ValidateNames = $True_x000D__x000A_#endregion $PILSaveFileDialog = [System.Windows.Forms.SaveFileDialog]::New()_x000D__x000A__x000D__x000A_#region $PILToolTip = [System.Windows.Forms.ToolTip]::New()_x000D__x000A_$PILToolTip = [System.Windows.Forms.ToolTip]::New($PILFormComponents)_x000D__x000A_#$PILToolTip.Active = $True_x000D__x000A_#$PILToolTip.AutomaticDelay = 500_x000D__x000A_#$PILToolTip.AutoPopDelay = 5000_x000D__x000A_$PILToolTip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_$PILToolTip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_#$PILToolTip.InitialDelay = 500_x000D__x000A_#$PILToolTip.IsBalloon = $False_x000D__x000A_#$PILToolTip.OwnerDraw = $False_x000D__x000A_#$PILToolTip.ReshowDelay = 100_x000D__x000A_#$PILToolTip.ShowAlways = $False_x000D__x000A_#$PILToolTip.StripAmpersands = $False_x000D__x000A_#$PILToolTip.Tag = [System.Object]::New()_x000D__x000A_#$PILToolTip.ToolTipIcon = [System.Windows.Forms.ToolTipIcon]::None_x000D__x000A_#$PILToolTip.ToolTipTitle = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_#$PILToolTip.UseAnimation = $True_x000D__x000A_#$PILToolTip.UseFading = $True_x000D__x000A_#endregion $PILToolTip = [System.Windows.Forms.ToolTip]::New()_x000D__x000A__x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILSmall ImageList_x000D__x000A_# ************************************************_x000D__x000A_#region $PILSmallImageList = [System.Windows.Forms.ImageList]::New()_x000D__x000A_$PILSmallImageList = [System.Windows.Forms.ImageList]::New($PILFormComponents)_x000D__x000A_$PILSmallImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit_x000D__x000A_$PILSmallImageList.ImageSize = [System.Drawing.Size]::New(16, 16)_x000D__x000A_#endregion $PILSmallImageList = [System.Windows.Forms.ImageList]::New()_x000D__x000A__x000D__x000A_#region ******** PIL Small Image Icons ********_x000D__x000A__x000D__x000A_#region ******** $PILFormIcon ********_x000D__x000A_# Icons for Forms are 16x16_x000D__x000A_$PILFormIcon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJdlMgGlbDlhwXpHu6NrOIUAAAAAAAAAAJpmMxyscD2Hp206dqBqN0qXZTIEAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAJlmMxmuc0KztXVBqrx4Rc2eaDVhAAAAAAAAAAClbDlepGw5daJrOFuycj+Uv3lGyp5oNT4AAAAAAAAAAJlmNBWweky8qnNDbJJiLhupcUDAqHI/g6BsOFyXZTJppGs4r5toNWCkc0Y1pWw6nbBy_x000D__x000A_P6qcaDYwAAAAAAAAAACXYy8SrHpMpqRzRmK1hmCKvYtj0bOOd4lsYl3MJz5Vt55oNo6kbDautoFV37qJY62bajl1pnVICQAAAAAAAAAAAAAAAKl4TH23i2Tg3K+XX7qUd8s0Y4vfDkFyrjtunN5+XD2ki2A6joFg_x000D__x000A_QJLImXWHzqOHgah3S5Ggbj4fAAAAAK9/VSW7jGiLyZ5+nLyMZK2piWvlqcPX/6rD2P+Srsj/MmCH/xg+ZcsMMlkfkWQ3cs+hgoXVqpF7oXBAmKBuPg2hb0Bw2ayQedyynFWVemfF2puD/ba2uf9XtfH/U6vn/z+i_x000D__x000A_5/9nmsT/Gkh4cFNHOgWweUae3LOdY8WYeZahbj5jsoBVlryekmhcc47DaJm7+OnHs/+QqLf/VbLv/4/R/f9JqOj/esf5/7LN4/83VXZrf1kyYc+ggIrcsp1spHNFm7eGXaG9oJVhYHSMtTeY2vx8veT/XbXu/1q4_x000D__x000A_9/9fuPP/T6/v/9ju/v+35P//lbTN9ktNS3vBjmaW4rilXLGCWaGyg1us5bmibt+vk19XaHjVVZzR/3i55/8tgsD0DFGMxzeGwfz8////veH7/0aw4f9BaXjFsX9YoeS5pWW3iGGkqHdKhtuwm2zmt51mlHpoqhM8_x000D__x000A_ZHAAM2tUAC9kKQApXQMSRXhsqLrL9Mjm+f9FneH/PWWC5baFX6Dht6Jkrn1UnptoNlXPo4hz4bikXs2fgIakeVREAAAAAAAAAAAAAAAAAAAAAAU2aS8kWId4OmSWlFBSVZTGlG992K6WXZ9sO36WYy8VsoNbkd+1_x000D__x000A_oWXetJ5juolhhLyIXSsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZbUN82aySdrmKZZ+XYy8wAAAAAJhlMTrBk3GL4LaiYdyxnGO5imWBrHpNPK55SAQAAAAAAAAAAAAAAACyf1FCvo5omb6Rb4iZZTNFAAAAAAAA_x000D__x000A_AAAAAAAAmWYzO7yNaYPbsZt04bekY8yghHe6jGZoqXhLQZ9qNT2cZzBYpHJCqKl5TXGXZDAjAAAAAAAAAAAAAAAAAAAAAAAAAACWYy8ZpHNFVruNaY3JnH51xJd3Z7KDXJKjckOFmWYyPJhkMQ4AAAAAAAAAAAAA_x000D__x000A_AAAAAAAAwwesQYMDrEEAA6xBAAOsQYABrEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEHgKxBA/CsQYDhrEHAA6xB4A+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $PILFormIcon ********_x000D__x000A_$PILSmallImageList.Images.Add("PILFormIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($PILFormIcon))))_x000D__x000A__x000D__x000A_#region ******** $ExitIcon ********_x000D__x000A_$ExitIcon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1ToVAgWar/F0B5/wAAAFcAAABNAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAABxQnCIfWKjvI1+x/xY8cv8AAABDAAAAPgAAADoAAAAmAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcUp/TIV6x/ylktP8VOW3/AAAALgAAACkAAAAjAAAAHgAAABgAAAAFAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAjYLP/HlSg/yVkt/8ybrz/FDhq/wAAADgAAAAuAAAAJAAAABgAAAAJI2Cz/wAAAAAAAAAAAAAAAAAAAAAAAAAAJWS3/yFZpv8par3/O3fC/xM1Zf8AAAA4AAAALgAAACQAAAAYAAAACQ6F_x000D__x000A_RP8AcwD/AAAAAAAAAAAAAAAAAAAAAGRziP8kXqr/LG/C/0Bup/85SmL/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AHMA/wAAAAAAAAAAAAAAAAAAAAAqar7/J2Ov/y90yP9adpb/Tl93/wAAADgAAAAuAAAAJACE_x000D__x000A_AG8AmQD/a8lw/wBzAP8AcwD/AHMA/wBzAP8AcwD/LG3B/ylmtP8yec3/VJHV/xQ2Z/8AAAA4AAAALgB7AHcAmQD/V8Bb/0q8T/9Yw17/X8Zm/2bKbv910H3/AHMA/y1ww/8rarf/NH3Q/1yZ2/8UNmf/AAAAOAAA_x000D__x000A_AC4AmQD/fs6A/0K4Rv82tDv/PrhE/0a8TP9QwVf/Zspu/wBzAP8vcsb/LWy6/zeA0/9koOD/FDZn/wAAADgAAAAuAHsAdwCZAP+Az4L/ccp0/2zIcP93zXz/ftCC/2jJbv8AcwD/MHTI/y5uvP84gtb/YaDh/xQ2_x000D__x000A_Z/8AAAA4AAAALgAAACQAhABvAJkA/4TQhv8AmQD/AJkA/wCZAP8AmQD/AJkA/2Z2i/8vcL7/P4jZ/4m/7v8vYpa/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AJkA/wAAAAAAAAAAAAAAAAAAAAAxdsr/M3TA/3ey_x000D__x000A_6P9xnsO/AAMFRgAAADgAAAAuAAAAJAAAABgAAAAJEoxM/wCZAP8AAAAAAAAAAAAAAAAAAAAAMnfL/0yMz/9FgsDeAAMFRgADBUYAAAA4AAAALgAAACQAAAAYAAAACTJ3y/8AAAAAAAAAAAAAAAAAAAAAAAAAADJ3_x000D__x000A_y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAwP+sQYA/rEGAH6xBAB+sQQAPrEEAD6xBAACsQQAArEEAAKxBAACsQQAArEEAD6xBAA+sQQAfrEEAH6xB//+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $ExitIcon ********_x000D__x000A_$PILSmallImageList.Images.Add("ExitIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExitIcon))))_x000D__x000A__x000D__x000A_#region ******** $HelpIcon ********_x000D__x000A_$HelpIcon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6XSwQvF8sgMFiLd/IZzH/0nI7/9Z7Q//UeD7/0W8yz9VyM2AAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAC2Wiswulwr38lgKP/WaCv/2nE1/998P//jiUr/6Jlb/+ypbv/kl1r/23s7z9x3NRAAAAAAAAAAAAAAAACyVykwuVkr78xbKf/SYSX/1mkq/+CPXv/w4t7/8NrM/+uWUv/vnFL/9bRu//W9_x000D__x000A_f//ffj3P23Y1EAAAAAAAAAAAs1cqz8heMf/OWiL/0mEk/9ZpKv/lrIz/8Ojo//Do6P/spnD/75pO//SlVv/5uG//8bZ3/9h0NK8AAAAArlMoYLxeM//LWyj/zlke/9FgJP/VZyn/23c7/+rFsf/qvJ3/6IxE/+yV_x000D__x000A_S//xnVH/9KNV//S2df/fjVD/03AzMKxSKK/Ia0L/ylMb/81XHf/QXiL/1GUn/+Sri//x6ur/8enp/+WGQP/pjkb/7JRK/+6YTf/unFP/56Bm/9BuMo+yWzP/0XhP/8tUHf/MVRz/z1sg/9NiJf/gmXL/8uvr//Lq_x000D__x000A_6v/mm2f/5YY//+eLQ//pjkX/6Y5F/+eZXv/MazG/tWA5/9J4Tv/QZTL/zVgh/85YHv/RXiP/1GUn/+7UyP/z7Oz/79bK/+GERP/igTz/44M+/+ODPv/iilD/yWkwv7VhO//Vflb/0GY0/9FnNP/RYy3/z10j/9Jg_x000D__x000A_JP/YdkD/8uXi//Pt7f/sx7P/3Xc1/955Nv/eeTb/3ntD/8VmL7+qUyzf2o5s/9BlNP/RZjT/0mg0/9NrNf/UajL/1Ggu/9+Saf/17+//9O7u/91/R//acDD/2nAw/9hwOP/CYy6vpUwmj9GKav/TckX/0GY0/9Fn_x000D__x000A_NP/puaL/7su7/96PZv/rwq3/9vLy//Xw8P/ei1z/2nU7/9p1O//PbTX/v2AtYKRMJSC0Yj7/3ZNy/9BlNP/WeU3//v39//z7+//7+Pj/+fb2//j19f/z4tv/1m83/9dwOP/Vbzf/v2Au77xeLBAAAAAApEslgMd9_x000D__x000A_XP/bjGn/0Gg4/9mCWv/wzr///fz8//z6+v/uy7r/2oVZ/9RrNv/UbDn/wmEv/7hbK1AAAAAAAAAAAAAAAACjSyWfw3dV/96Xd//UeE7/0Gg4/9BmNP/RZjT/0Wk4/9JuQP/QbUP/vV4x/7RZKmAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAKNLJXCtWDLvxntZ/86DYv/XjGv/1Ihl/8h1T/+9ZTz/slcr37FWKVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApEwlEKVMJmCmTiaPqE8mv6lQJ7+rUSeArFIoUAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA4A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQcADrEHgB6xB8B+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $HelpIcon ********_x000D__x000A_$PILSmallImageList.Images.Add("HelpIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($HelpIcon))))_x000D__x000A__x000D__x000A_#region ******** $CheckIcon ********_x000D__x000A_$CheckIcon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKyN4A5tT7vP7hF30K6SDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAACasKp9Eu0r/qe6y/5Dimf8+uETPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqmHJ84tT3/oOip/6DurP+19b//ctN6/z24Q4AAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gDp9Gu0v/oOap/47lmv+E5pH/ne+p/6/zuf9KvlD/O7dBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKaAp87tT//mOCh/4Tdj/963of/qOyy/5nspf+s87f/l+af/zi1_x000D__x000A_Pc8AAAAAAAAAAAAAAAAAAAAAAAAAAACYAI80sTj/kNuZ/3nWhf9/2ov/n+ao/3nUgP+p7bP/keue/7LzvP9s0HT/N7U8gAAAAAAAAAAAAAAAAAAAAAAAlwD/idaS/3DPe/9104D/l+Cg/0K5R/8ToxX/gtiJ/53q_x000D__x000A_qP+S6p//p+2x/0O7SP81tDowAAAAAAAAAAAAAAAAAJYA/37Qhv+F1Y//htaO/y+vMv8HnAefEKESQCWrKP+j6Kz/h+SU/6HrrP+M35T/MrI33zSzORAAAAAAAAAAAACVAI8hpST/RLZJ/xGgE/8AmQCPAAAAAAAA_x000D__x000A_AAAPoBCfWMRe/5zlpv963oj/pequ/2LJaf8xsjaPAAAAAAAAAAAAAAAAAJUAMACXAGAAmAAwAAAAAAAAAAAAAAAADJ8NEA6gD++J2pL/h96T/4DdjP+Y4qH/O7ZA/zCxNEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAJngpgL68y/5fgoP9r1Hj/jN2W/33Uhf8srzDfLrAyEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAidCb9nyW7/idqT/1rLaP+U3p3/V8Jd/yuuL48AAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEmwUwD6AQ/4XVjf9mzHL/Zsxy/4fXkP8mrCr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOaA4A/tUP/iNWR/2/Nef+J1pH/JKwq/wAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAQApoC30y6Uv9mxW3/TLpR/xqmHL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZACACmgKfCJ0Ivw6g_x000D__x000A_D58ToxUQ+H+sQfB/rEHgP6xBwB+sQYAfrEEAD6xBAAesQQADrEEGA6xBjgGsQf8ArEH/gKxB/4CsQf/ArEH/wKxB/+CsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $CheckIcon ********_x000D__x000A_$PILSmallImageList.Images.Add("CheckIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($CheckIcon))))_x000D__x000A__x000D__x000A_#region ******** $UncheckIcon ********_x000D__x000A_$UncheckIcon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ps48SErOvGhqtEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eqRAqKsmvLy/TjwAA_x000D__x000A_AAAAAAAAAAAAAA0Nsp8GBrf/CQm6/xQUtM8bG60QAAAAAAAAAAAAAAAAAAAAAB0dqhAnJ8bPODju/0BA9/81NdqfAAAAADc3v48HB7X/Bga3/wkJuv8MDL3/FRW1zxsbrBAAAAAAAAAAAB0dqhAjI8LPLy/k/zY2_x000D__x000A_7P87O/L/PT30/y4u0I9ERMSvVFTO/wkJt/8ICLn/Cwu8/w4OwP8WFrfPHBysEBwcqxAfH77PJiba/yws4P8xMeb/NTXr/zY27P8pKcevGRmvEEVFxM9VVc//Cwu5/woKu/8NDb//ERHD/xgYuM8bG7vPHh7R/yMj_x000D__x000A_1v8nJ9v/Kyvg/y4u4/8mJsXPHh6pEAAAAAAZGa8QRUXEz1VV0P8MDLv/DAy+/w8Pwf8TE8X/FxfJ/xsbzv8fH9L/IiLW/yUl2f8iIsHPHR2qEAAAAAAAAAAAAAAAABkZrhBGRsTPVlbQ/w4OvP8ODr//ERHD/xQU_x000D__x000A_xv8XF8r/GhrN/x4e0f8eHr7PHR2qEAAAAAAAAAAAAAAAAAAAAAAAAAAAGhquEEZGxc9NTc//DAy9/w4OwP8REcP/FBTG/xYWyf8bG7rPHByrEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrhAlJbjPLi7E/x0d_x000D__x000A_wf8ODr7/Dg7A/xAQwv8TE8X/GBi4zxwcrBAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxAmJrnPNDTE/zIyxf8wMMX/Ly/G/ygoxf8gIMT/Hx/F/x8fxv8jI7rPGxusEAAAAAAAAAAAAAAAABgYsBAoKLnPOTnE/zY2_x000D__x000A_xP80NMT/MjLF/zAwxf9oaNf/MTHH/y4ux/8uLsj/LS3J/yMjuc8bG60QAAAAABcXsRArK7rPPj7F/zs7xf85OcT/NjbE/zQ0xP8lJbjPT0/Hz3Bw2f8yMsb/Ly/G/y4uxv8uLsf/JCS5zxoarRBTU8qvVFTM/0FB_x000D__x000A_xv8+PsX/OzvF/zk5xP8mJrnPGRmuEBoarhBQUMfPcXHY/zMzxf8wMMX/MDDF/zAwxf8kJLivY2PQj5iY5v9TU8z/QUHG/z4+xf8oKLnPGRmvEAAAAAAAAAAAGhquEFBQx89yctj/NTXF/zIyxP8yMsT/Jye6jwAA_x000D__x000A_AABpadOfmJjm/1RUzP8rK7rPGBiwEAAAAAAAAAAAAAAAAAAAAAAZGa8QUFDIz3R02P84OMT/KSm7nwAAAAAAAAAAAAAAAGNj0I9TU8qvFxewEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxBQUMivSkrFjwAA_x000D__x000A_AAAAAAAAx+OsQYPBrEEBgKxBAACsQQAArEGAAaxBwAOsQeAHrEHgB6xBwAOsQYABrEEAAKxBAACsQQGArEGDwaxBx+OsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $UncheckIcon ********_x000D__x000A_$PILSmallImageList.Images.Add("UnCheckIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($UncheckIcon))))_x000D__x000A__x000D__x000A_#region ******** $FavoriteIcon ********_x000D__x000A_$FavoriteIcon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmk9lALofTfDp3xcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ52WApdde/LHHTcAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAJpfeAHLb6/xSn9P8RmO6vFJTrEAAAAAAAAAAAIILfECJ/3a8ukuP/PK7t/yxx058AAAAAAAAAAAAAAAAAAAAACaT2QBWu+P8lxv//F673/xWT6t8YjudAHYfiMB+E4N8npe7/PNL//zKT_x000D__x000A_4/8rctRQAAAAAAAAAAAAAAAAAAAAAAAAAAALofTvKMf//x3B//8UtPv/F5Pq/xiO5/8Wrvj/IcT//yzJ//8qe9n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6D0ryG7+/8ixP//GL7//w+2/f8Gsf3/B7X//xK7_x000D__x000A_//8drvX/KHbXrwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyf82Aisfb/NMz//x7C//8Vvf//DLj//wW0//8Es///GZPp/yd32GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALoPSfLbT1/2zi//9E0v//HcH//xW9_x000D__x000A_//8Puf//Crb//x2M5f8odtefK3LUEAAAAAAAAAAAAAAAAAWp+jAIpvfPO8H5/2/j/v905f//cuP//2be//9Bz///I8P//xS8//8Ru///H5To/yxx088ubdEwAAAAAAGv/nANr/vvWdj9/3vs//956f//d+f//3Xm_x000D__x000A_//905P//cuP//3Li//9i2///UdT//0XQ//87tvT/NHPS/zJnzXAavf//fu3//4Pw//9/7v//fOv//3rq//956P//d+b//3bl//915P//deT//3Xj//904///dOP//3Dc/P8/ftb/Aa/+3wSr+/8Ipvj/C6H0/yOr_x000D__x000A_9P8srPL/aNr7/3vp//966P//btr7/zeZ5v81juD/KXXX/yxx0/8wbND/MmfN7wAAAAAAAAAAAAAAAAAAAAAAAAAAE5bscEO69P9+7P//fer//0iw7f8hgd5wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAABOW7BAinu3/g+7//4Ht//8rkeT/IYHeIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZLqr2TS+P9y3Pr/HoThzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAABaR6WBDtPD/Tbfv/x2F4mAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWkekQIJTo7yOQ5e8dhuIQAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAx+OsQcGDrEHAA6xB4AesQeAHrEHgB6xB4AOsQYABrEEAAKxBAACsQQAArEH4H6xB+B+sQfw/rEH8P6xB/D+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $FavoriteIcon ********_x000D__x000A_$PILSmallImageList.Images.Add("FavoriteIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FavoriteIcon))))_x000D__x000A__x000D__x000A_#region ******** $AddItems16Icon ********_x000D__x000A_$AddItems16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJfAz/D44Y/w+OGP8Pjhj/EI8Z/xCP_x000D__x000A_Gv8KfA3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD48Z/4fknP+C5Jj/g+SZ/4Plm/9645X/EZAe/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCPHP+J5qD/J9JU/yjT_x000D__x000A_V/8o1Fr/fOWb/xKRIf8AM6n/ADOp/wAzqf8AM6n/ADOp/wAzqf8AM6n/ADOp/wAAAAARkR//i+im/ynWXv8q12D/K9hj/37oof8SkiT/BlriMAZZ4v8GWOH/Blfh/wZW4P8FVd//BVXf/wVU3jAAAAAAEpIi/4zq_x000D__x000A_q/8s2Wf/Ldpq/y7bbf9/6qf/E5Mn/wAAAAAHX+aAB1/l/wde5f8HXeT/B1zk/wZb44AAAAAAAAAAABOTJP+N7LD/L91x/zDedP8w33b/geyt/xOVKv8AAAAAAAAAAAhl6tAIZOn/CGTp/whj6NAAAAAAAAAAAAAA_x000D__x000A_AAASjyL/Ks1l/yrOZ/8rz2n/K9Br/yvQa/8TjyX/AAAAAAAAAAAJbO4wCWvu/wlq7f8JauwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApy8oAKcfGAAAAAAAAA_x000D__x000A_AACgjW1loo9vsqCNbbKYhWWyjXpaZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrmHhltKGBsrelhLK0oYGyq5h4sp2KarKNelplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAu6iIssi1lLLNupmyyLWUsruoiLKrmHiymIVlsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMi1lLLZyKWy4tGustnIpbLItZSytKGBsqCNbbIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAADNupmy4tGusvfmw7Li0a6yzbqZsrelhLKij2+yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyLWUZdnIpbLi0a6y2cilssi1lLK0oYGyoI1tZQAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADItZRlzbqZssi1lLK7qIiyq5h4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA/4CsQf+ArEH/gKxBAICsQQCArEGBgKxBw4CsQcP/rEHmD6xB/AesQfwHrEH8B6xB/AesQfwHrEH+D6xB//+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $AddItems16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("AddItems16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($AddItems16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Add16Icon ********_x000D__x000A_$Add16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMJjLr/EZS//x2cw/8pqMP/NbDH/0G4yvwAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBYy7/9L2G/+6cT//ulkH/8ZxH/9BuMv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwWIu//S9h//ok0//6Y9B//KeSf/PbjL/AAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBiLv/0vYf/5o9O/+iLQf/ynkj/zm0x/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAYS3/9LyG/+aOTf/niT//8ZxG/81s_x000D__x000A_Mf8AAAAAAAAAAAAAAAAAAAAAAAAAALBWKb+zWCr/tlor/7lcK/+8Xiz/vmAt//O8hv/ki0v/5YY9/++YQ//LajD/zWwx/85tMf/PbjL/0G4y/9BuMt+vVSn/8LmK/+aTU//jh0D/44I2/+OCMv/pk0n/4H46/+OB_x000D__x000A_Of/tlD//75lD//GcRv/ynkj/8p5J//GdR//NbDH/rlQo//C5iv/dg0z/2HM5/9p2Ov/beDr/3Hc2/9t0M//eeDX/44E5/+WGPf/niUD/6IxB/+qPQv/ulkH/ymow/61TKP/wuYv/34xa/9p+S//cgUz/3oRO/+CH_x000D__x000A_T//dfUL/3n5A/+KGRP/mkVT/55JU/+iUVf/qmFb/76FX/8dnMP+sUij/77mL//C5i//xuor/8buL//G8i//yvYv/4IdQ/95+P//rnVf/9MCN//XBjf/1wY3/9cGN//XBjf/EZS//qlEnv61SKP+vVCj/sVYp/7NY_x000D__x000A_Kv+2Wir/8byL/96ETv/cej3/5o5E/75gLf/AYS3/wGIu/8FiLv/BYy7/wmMupgAAAAAAAAAAAAAAAAAAAAAAAAAAs1gq//G7i//cgU3/2nY7/+WLQv+8Xiz/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAALFWKf/xuov/239L/9hzOv/jiUL/uVwr/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvVCj/8LqL/9+MW//dg03/5pRT/7ZaK/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAArVIo//C6i//wuov/8LqL//C6i/+zWCr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKpRJ7+sUij/rVMo/65UKP+vVSn/sFYpvwAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA+B+sQfgfrEH4H6xB+B+sQfgfrEEAAKxBAACsQQAArEEAAKxBAACsQQAArEH4H6xB+B+sQfgfrEH4H6xB+B+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Add16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Add16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Add16Icon))))_x000D__x000A__x000D__x000A_#region ******** $import16Icon ********_x000D__x000A_$import16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkpKQgoqKiWqGhoW+hoaF/oaGhhaGhoZOhoaGVoaGhlaGhoZWhoaGVoaGhk6GhoYWioqKAo6Ojd6Sk_x000D__x000A_pF+kpKQin5+fCLS0tJi3t7fZt7e337e3t+a3t7fot7e377e3t++3t7fvt7e37764vOi5uLjos7Ozuqurqzm0tLQsp6enDQAAAADR0dHZw8PD/8PDw//Dw8P/w8PD/8PDw//Dw8P/xsTF/9LEzf9zuYz/vMG9/9fP_x000D__x000A_1OQAAAAAAAAAAAAAAAAAAAAA1NTU1sXFxf/FxcX/xcXF/8XFxf/FxcX/z8bK/77Ewf9DtG//IbBa/266jf92u5HyNr1sgjbIcYwql1UbAAAAANvb29bMzMz/zMzM/8zMzP/MzMz/2s3T/4vEpP8gt2T/Kblr/y66_x000D__x000A_bv8ouGn/J7hp/yy5bP8uvW//I5NWSAAAAADg4ODW0dHR/9HR0f/R0dH/2tHV/2LJlv8QvWf/KMB0/yrAdf8qwHX/KsB1/yrAdf8qwHX/KsR3/x+XXEYAAAAA5ubm1tbW1v/W1tb/1tbW/9bW1v/e1tr/ddWo/xXJ_x000D__x000A_eP8fx33/I8h+/xvHe/8ax3r/Hsd8/x/Lf/8bnmNIAAAAAOrq6tba2tr/2tra/9ra2v/a2tr/2tra/+fa4P+63M3/KNaN/wzQgf922q//fduy80/ppZlV9a6jMbh/IgAAAADu7u7W3t7e/97e3v/e3t7/3t7e/97e_x000D__x000A_3v/e3t7/493g/+ff4v9Q36f/0t7a//fq8OMAAAAAAAAAAAAAAAAAAAAA8vLy1uLi4v/i4uL/4uLi/+Li4v/i4uL/4uLi/+Li4v/j4uL/7eLm/+Ti4v/v7+/kAAAAAAAAAAAAAAAAAAAAAPX19dbl5eX/5eXl/+Xl_x000D__x000A_5f/l5eX/5eXl/+Xl5f/l5eX/5eXl/+Xl5f/l5eX/8/Pz5AAAAAAAAAAAAAAAAAAAAAD5+fnW6Ojo/+jo6P/o6Oj/6Ojo/+jo6P/o6Oj/6Ojo/+jo6P/o6Oj/6Ojo//b29uQAAAAAAAAAAAAAAAAAAAAA+/v71urq_x000D__x000A_6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/8/Pz//X19f/////pAAAAAAAAAAAAAAAAAAAAAP39/dbs7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+zs7P/s7Oz/9fX1/4CAgP9ra2v/f39/ZwAAAAAAAAAAAAAAAAAA_x000D__x000A_AAD+/v7Z7e3t/+3t7f/t7e3/7e3t/+3t7f/t7e3/7e3t//n5+f9eXl7/XV1dZQAAAAAAAAAAAAAAAAAAAAAAAAAA/v7+k+7u7s/u7u7M7u7uzO7u7szu7u7M7u7uzO7u7sz5+fnRUlJSYgAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAACsQQAArEGAB6xBgACsQYAArEGAAKxBgACsQYAArEGAB6xBgAesQYAHrEGAB6xBgAesQYAHrEGAD6xBgB+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $import16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("import16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($import16Icon))))_x000D__x000A__x000D__x000A_#region ******** $LoadData16Icon ********_x000D__x000A_$LoadData16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAACQAAAAgAAAADQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAwEAC0ckE7mNTC33iUos9HA8I+JVLRrGOh0Qox8OBn4OBgJYAQAAMwAAABoAAAAJAAAAAQAAAAAAAAAAAAAAACYRB0uaWDn/ypB0/9W5qf/KpZL/w5V+/72Gav+3eFf/q2ZD/6FdO/2HTS/wazwk2k4q_x000D__x000A_GLwxGQ2XDQUCSAAAAAAwFglWoV8+/9qumP/98Oj//O/m//zu5P/87OP//Ovh//nm2//w18f/68m1/+a8o//hrpD/2ZZw/6VhPvgVCQMsMRYKVqhlQ//ctKD//vj1//738//+9vL//fXw//307v/98+z//fLr//3w_x000D__x000A_6f/87+f//O7l//vn2v/XjmT/OBoMWDEXClawbEn/3ril//7+/v///v3//v38//79+//+/Pr//vv5//76+P/++fb//vj0//738//99vH/1o9m/zscDVgxFwpWuHRP/82nlP9un2v/kLCJ/5OzkP+8w7j/ycvI/9TU_x000D__x000A_1P/y8vL//v7+///+/v/+/v3//v38/9ONZf88HQ1YMhcLVsF8Vv+shnP/Xb5Z/3zQdP9f217/bs9p/3DTbf9rzWf/scus/9LQzv/U1NP/1NTU/+7u7v/Pi2P/PB0OWDIYC1bJg1z/4Luo/6Wwo/+Sn4v/cphu/3WX_x000D__x000A_b/9glFv/XJ1Y/6/Fqv/o5eP/8/Ly//r6+v/T09P/yohg/zwdDlgzGAtW0oti/+K9qf///////////////////////v7+//X19f/f39//zs7O/8TExP/AwMD/8PDw/8aEXv89Hg5YMxkLVtqSaP/ivar/////////_x000D__x000A_///////////////////////////////////////////////////BgVv/PR4PWDMZDFbhmW7/2K+Z/+3t7f/z8/P/+vr6//7+/v//////////////////////////////////////vH5Z/z0eD1g1GgxW559y/8d/_x000D__x000A_WP/BlX7/v52J/76ikf++qJv/wrKo/8W6tP/HwsD/ysrK/9HR0f/W1tb/3Nvb/7p8WP89Hw9YQR8OReujdv/Jf1b/zIJZ/9GHXf/VjGL/2pFm/96Wav/im27/5J1v/6tjP/+sa0v/rHBT/3Znov+ygYX/QyERVzMY_x000D__x000A_CgOVVzWUuHVO27dzTe68eFH8wn1W/8iDW//PimD/1Y9l/9aRZv+3cEv/s21I/712UP9sXbH/hGKI+k0lEisAAAAAAAAAAAAAAAAAAAAAQyAPA0giDxNQJRAlVigRN14sE0lqMxhbdTodbXg8H4B5PSCQdjoeimcx_x000D__x000A_GDUAAAAAg/+sQQAHrEEAAaxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxB8AGsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $LoadData16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("LoadData16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($LoadData16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Process16Icon ********_x000D__x000A_$Process16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAASAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAACkOJQDUH1MA/h9SAP8fTwD/HkwA/x5KAP8dRwD/HUQA/xxBAP8cPwD/GzsA/gsZANQAAAApAAAAAAAAAAAKHwLEOaEE/zqXAP84jQD/N4kA/zeFAP82ggD/NX4A/zV7AP80dwD/M3QA/zNx_x000D__x000A_AP8xawD/CRQAxAAAAAAAAAAAFkUH8DelDP80dwD/NHUA/zR1AP80dQD/Uoor/1WMMP80dQD/NHUA/zR1AP80dQD/M3IA/xQtAPAAAAAAAAAAABVHCvE1qBL/NoEA/zuECf9VkzL/NoEA/5O7dv+Zv33/NoEA/1aU_x000D__x000A_M/9Ahw//NoEA/zR3AP8VLwDxAAAAAAAAAAAUSQ3xM6wa/ziMAP9Dkw7/0eXG/26pUP+TwXX/lsJ4/2yoTf/R5cb/RZQR/ziMAP81fQD/FTEA8QAAAAAAAAAAE0oR8TGwIf86lwD/OJUA/0ScEP+IwWX/Q50M/0Od_x000D__x000A_DP+BvVz/Q5sQ/zeUAP85lwD/NoIA/xYzAPEAAAAAAAAAABJMFPEutSn/X7E2/9Tk0v/V5NL/dbtU/zqiA/86ogP/d7tV/9vo2f/b6Nn/X7E2/zeIAP8WNgDxAAAAAAAAAAARTRjxLLky/zarFf9Fsif/Qq8k/0yp_x000D__x000A_Mv80qBP/NKgT/0SmKf8/riD/P68g/zWrFP83jQH/FjgA8QAAAAAAAAAAEE8b8Sm9O/8vsyb/L7Al/5rLk/+l3qL/gMt6/33LeP+z47H/iMSB/y+yJf8vsyb/OJIC/xc6APEAAAAAAAAAAA9QHvEmwUT/Krw5/z/B_x000D__x000A_TP+R3Zv/K7w6/5Lcmv+N25X/Lr08/6Diqf84v0X/Krw5/ziXA/8XPADxAAAAAAAAAAAOUiLxJMVN/yTES/8kxEv/JMRL/yTES/9p14X/YtV//yTES/8kxEv/JMRL/yTESv85nAP/Fz4A8QAAAAAAAAAADk0f8CHJ_x000D__x000A_Vf8ix1H/I8ZO/yXESv8mwkX/J79A/ym9PP8quzf/LLkz/y23Lv8zrhz/O58A/xY/BPAAAAAAAAAAAAgXAsQkrD//IchV/yPFT/8lwkj/J79B/ym8O/8ruTT/LbYt/y+zJv8ysB//M6wZ/zKYEv8JFwLEAAAAAAAA_x000D__x000A_AAAAAAApDBoA1BtAAP4dRgD/HksA/x5PAP8fUwD/IFcA/x9UAP8eTwD/HUoA/xxDAP4MGwDUAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAARAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAARAAAAAAAA_x000D__x000A_AAAAAAAA4AesQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxB4AesQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Process16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Process16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Process16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Config16Icon ********_x000D__x000A_$Config16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9lBQWlbwZqpW4ISgAAAACdYgMJnGEDGQAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5kCgSiaQwsw54x/76VK/iseRJ+sIAUx7qRH/ymcQpJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKx4GHrAmD31uY0v1uLMh//Zvm3/0bFe/9Gy_x000D__x000A_WP/WuWL/qnYQcKNqDyCjaw8HAAAAAAAAAAAAAAAAAAAAAAAAAAC2iSaw2b5x/9O0Xv/t3Kz/5M+Y/9a5a//x4rj/6tii/82rVP/LqE7/sYEhmgAAAAAAAAAAAAAAAAAAAABtZEggpn8tvOvZpv/05sT/s4k4lbSF_x000D__x000A_OB60hjcWs4QxXNS2defhyof/4MmH/7eLJ7UAAAAAAAAAAFljVg5aZVwcOH6z2kma0P+HpZ3/TJ7d/6eCK7ekcBQYAAAAAAAAAACpdhWB8eK5/9/Igv+vfSCUAAAAAAAAAAA9dZKUC5Ln/0yv8/9cvf//L6n//0Wu_x000D__x000A_//95o6D/lZJa+rWHIdSzhhvhv5km//Dht//Rslf/togppQAAAAAAAAAAWH6Up6HX//98rczkZoaUfWeLmI9cptbyI6f//0Og0//Mq0n/za1M/+POjP/fx5D+7d2u/7KDI4IAAAAAAAAAADeArbeS0f//JH7O6VBs_x000D__x000A_eF1ba2c1PniZsW3F//9VmLb1wKRmxPPmxf/Zvnb/s4QzJ6p2IT2xgC0KAAAAAAAAAAB4iIp6oayw0m229f8nl///Dpj//zCr//+O0///Roy01gAAAAC5jT6SvJJDpKp2HgUAAAAAAAAAAAAAAAAAAAAAAAAAAHt0_x000D__x000A_YgqUtc39mrPC4pe50OyYxOP/anh0X2l7eUMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAenRhKX56aRN+gXYwdX12b3RvXAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA//+sQf//rEH8T6xB+AesQfABrEHwAaxB4AGsQYBhrEGAAaxBgAGsQYABrEGAR6xBwH+sQeD/rEH//6xB//+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Config16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Config16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Config16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Column16Icon ********_x000D__x000A_$Column16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//_x000D__x000A_/wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AAAAAAYAABk4AgAePgEAHT0BAB09AQAdPQEAHT0AAB09AAAdPQAAHD0AABw9AAAcPQAA_x000D__x000A_HD0AAB0+AAAbPAAAAgwaGSY5hXzT+oZ92P+FfNb+hXzV/oR71f6DetX+gnnV/oF31f5/dtT+fnXU/n100/59dNP+fXTU/n921/0pJ0BaOjo5Rf//////////////////////////////////////////////////_x000D__x000A_////////////////////////X19daTc3N0P/////2dnZ//Pz8//Dw8P/r6+v/7u7u//r6+v/2NjY/7W1tf/Gxsb/5OTk/8nJyf/09PT//////1paWmc3NzdD/////9nZ2f+Dg4P/q6ur/76+vv+rq6v/iIiI/3x8_x000D__x000A_fP/Ozs7/jIyM/7Gxsf/CwsL/5eXl//////9aWlpnNzc3Q//////u7u7/mJiY/6ampv/MzMz/3t7e/6enp/+MjIz/yMjI/6ioqP/CwsL/srKy/729vf//////WlpaZzk5N0P///////////r78///////////////_x000D__x000A_/////////////////v////////////////////7//////15eW2cnJTNDsavq/7Cp6P+wqun/rafn/6+p6P+xq+j/sKro/6+p6P+rpef/pp/l/6Kb5P+imuP/oJjj/6GZ6P84NVFnFBEvQ1tO1P9ZTM//WEvO/1RG_x000D__x000A_zP9qXtP/enDY/3xy2f9/ddr/bWLU/09By/9AMcf/OyzF/zgoxf84J87/Eg1GZxYTMERkWNb/YVXR/2pe0/+yrOn/kYnf/5CI3/+Cedr/cmfV/3lv1/+Eetv/gHba/0M0x/9ENcj/RDTR/xYRSGgVEiw+Z1vc/2Za_x000D__x000A_2/9pXdv/g3ni/3ht3/+AdeH/al3b/2BT2P9eUNf/bF/b/2da2v9IOdH/RzjR/0Y22P8WEERiAgIDBBcULzsZFjVCGBU0QRUSM0EWEjNBExAyQRQRM0EUETNBExAyQRAMMkEPDDFBEg8yQREOMkIQDDA/AgIHC///_x000D__x000A_/wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//_x000D__x000A_/wD///8A//+sQf//rEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEH//6xB//+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Column16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Column16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Column16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Threads16Icon ********_x000D__x000A_$Threads16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGMkLQVnKjI3dDk1hW8zLKBfHipuWxwsBAAAAAAxV4A+M1+I2TNchKcyVHwbAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAACCSS83rYRd59K/qf/Mt5n/ilY9/1sXJjUAAAAAMFmDcDiNvf83ibr/MlV9WwAAAAAAAAAAAAAAAAAAAABwNC0YeD4vBp1sNimpfkyo1cWt/6R8YP5aFyU2AAAAADBchpM8m8z/PIe09DJT_x000D__x000A_eyIAAAAAAAAAAAAAAACgbjcEj1s9xF0cKJ9gICgHj1oxU8u0kv+hdVD+YhwgnEQyUQkwZ5O4RaPS/z1znLwxUHgBAAAAAAAAAAAAAAAAmmUuCMuxkt62loL/ekEy2rCOdevLtJb/1sGp/6d6W/9ZIyq2NW+e6FOr_x000D__x000A_1v83XoZxAAAAAAAAAAAAAAAAAAAAAJpmLwGyjGSr5d/U/9zPuf/Eq4r/uZZx//f29v/v6uH/pXVU/11NXP9SjrfxLliBIwAAAAAAAAAAAAAAAAAAAAAAAAAAnGgxK6yEWLOwimConWs2QptnMle5l3Ps6ubf/+nj_x000D__x000A_1/+ldFP/VDRD0j49XwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2UnNbGEVdLi1cb/4trJ/5lnSftdFyJ9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AABXWFhIkH1k/d/Ouf/azbb/i1ZA/FgWJ08AAAAAAAAAAAAAAAAAAAAAaGVhBmlnZAEAAAAAAAAAAAAAAAAAAAAAJlyOjWeeuv+hg2P02sq1/866nf90OSvkWxomgVsZJX1aGSoub2tlQJKOitGFgX3AbmplTWxn_x000D__x000A_YA8AAAAAM1J3FkCBre5xqc7vXVZWPqt6SsTLs5f/zree/9C8rP/ApI//dTs10Y6LhsDv7u3/x8TC/8C/vPyDf3rffnhxnTpefZxprtb/U3mdiQAAAACaZkei39C+/8itjsS8m3O44tjG/6B4ZNeopaHm/////8jG_x000D__x000A_xP/6+Pj/xsXC/6iinv+AjJD/bI+o6EZZcBGQYTEb1r+m/8asmP9mJRpgAAAAALeWauKmfViPhIB7l6+tqu2no5/61tPS/7Ctqv+hnZr/4d3a/6ypp/N1cm6dgmtQZLWVcuXNuJ7/eUE692MkKyeaaDZFn202IWxo_x000D__x000A_YgFoZF0QbmtlYJaTjv/Cv73/ubWy//Hu7v//////397c/35+e7OHZD0lqHlEbKFzRY59RDAuAAAAAAAAAAAAAAAAAAAAAAAAAAB3c25OioeBwJuXk9irqKTfp6ShzoaDfohsamYTAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAwIesQcCHrEGAh6xBAAesQQAPrEEAD6xBgA+sQfwPrEH+B6xBngCsQQQArEEAQKxBAASsQQAArEEAA6xB4D+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Threads16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Threads16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Threads16Icon))))_x000D__x000A__x000D__x000A_#region ******** $LoadConfig16Icon ********_x000D__x000A_$LoadConfig16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ+Cgo+fgoLfn4KCYKJvKWuiZAD/AAAAAKdoAIWdYgD/o2UARQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfgoLvzLWz/6duFv+tbAX/vHQP/5ZgEPqnaAD/24co/7t1_x000D__x000A_EP+jZQD/AAAAAAAAAAAAAAAAAAAAAAAAAACfgoJgsJWU//jm4v+naAD/45U6//+9b///xYD//8WA///Jgf+lZAD/oXdQ/wAAAAAAAAAAAAAAAAAAAAAAAAAAn4KCz/jm4v/45uL/+Obi/6doAP//yIT//8WA/8uG_x000D__x000A_Kv//xYD//8WA/5BSAP+2dRP/AAAAAAAAAAAAAAAAn4KCQKuPj//45uL/nF0A/+yvZf//0pP//9ab/6doAP+nczD/r3AL///lsP/en0v/0ZE3/wAAAAAAAAAAAAAAAJ+Cgr/Ls7L/9uPg/6doAP+gXwD/uJdT///W_x000D__x000A_m/+gXwD/qXM1/69vCv//7MH/oWAA/wAAAAAAAAAAAAAAAJ+CglCrkZD//fLu//jp5v/04d7/89/d/6BfAP//1pv//9ab/8WOOP//7MH//+zB/72DKP+gXwD/AAAAAAAAAACfgoLf28zK///49f//+PX//vbx/59d_x000D__x000A_AP//1pv/p2gA/6FhAP//1pv/voku/6BfAP//1pv/n10A/6doAAifgoKAt6Cf///59///+vf///r4///6+P//+vj/n10A///6+P+naAD/9NGb/7R6G//039z/n10A/6J5VGkAAAAAn4KC/9vPz////Pv///v6///7_x000D__x000A_+v///Pr///z6///8+v///Pv/rXEQ/6BfDP+jYgD/9eLf/8qysf+fgoKAAAAAAJ+CgmClior/7ejn///+/v///fz///38///9/f///v3///7+///////68e//9uTg//fl4f/WwL7/n4KCrwAAAAAAAAAAn4KCYJ+C_x000D__x000A_gv/VyMj/////////////////////////////////+ezp//jm4//55+T/48/M/5+Cgt8AAAAAAAAAAAAAAACfgoIwn4KC37ehof/n4OD/////////////////z8HB/5+Cgv+fgoL/n4KC/5+Cgv+fgoKvAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAACfgoKAn4KC37GZmf/PwcH/5+Dg/7ehof+fgoJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfgoJQn4KCn5+Cgs+fgoLvn4KCIAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA//+sQfBHrEHwA6xB4AOsQeABrEHAAaxBwAOsQYABrEGAAKxBAAGsQQABrEEAAaxBgAGsQcABrEHwH6xB/B+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $LoadConfig16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("LoadConfig16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($LoadConfig16Icon))))_x000D__x000A__x000D__x000A_#region ******** $SaveConfig16Icon ********_x000D__x000A_$SaveConfig16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiWVIn4ZjR/+DYEX/f15D/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP9kSTX/YEcz/11E_x000D__x000A_Mf9ZQi//jGhKn4pmSf+2noj/0b+u/4xoSv//////gF5E/3paQP/w8PD/+Pj4/+rq6v/29vb/W0Mw/8Gvnf+/rZz/WUIv/41oS/+4oIr/0sGv/8WyoP+MaEr//////4BeRP96WkD/8PDw//j4+P/q6ur/9vb2/1tD_x000D__x000A_MP+Ufmv/v62c/1lCL/+NaEv/1MKx/8e0ov+ynYn/jGhK//////+bgm7/kXlm//Dw8P/4+Pj/6urq//b29v9bQzD/lH5r/7+tnP9ZQi//jWhL/9TCsf+1oIz/sp2J/4xoSv/49fT/7Ozs/9jY2P/w8PD/+Pj4/+rq_x000D__x000A_6v/s6un/W0Mw/5R+a/+/rZz/WUIv/41oS//UwrH/taCM/7Kdif+Oa07/hmNH/4BeRP96WkD/c1U9/21ROv9nTDf/YUgz/15GNP+Ufmv/v62c/1lCL/+NaEv/1MKx/7WgjP+ynYn/r5qG/6yXg/+plID/ppF9/6OO_x000D__x000A_ev+ginf/nYd0/5qEcf+XgW7/lH5r/7+tnP9ZQi//jWhL/9TCsf+1oIz/xdHz/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/w8/x/5R+a/+/rZz/WUIv/41oS//UwrH/taCM//r7/v/6+/7/+vv+//r7_x000D__x000A_/v/6+/7/+vv+//r7/v/6+/7/+vv+//r7/v+Ufmv/v62c/1lCL/+NaEv/1MKx/7WgjP/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/lH5r/7+tnP9ZQi//jWhL/9TCsf+1oIz/+vv+//r7_x000D__x000A_/v/6+/7/+vv+//r7/v/6+/7/+vv+//r7/v/6+/7/+vv+/5R+a/+/rZz/WUIv/41oS//UwrH/taCM/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v+Ufmv/v62c/1lCL/+NaEv/1MKx/7Wg_x000D__x000A_jP/6+/7/+vv+//r7/v/6+/7/+vv+//r7/v/6+/7/+vv+//r7/v/6+/7/lH5r/7+tnP9ZQi//jWhL/9TCsf9cTUH/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/1xNQf+/rZz/WUIv/41o_x000D__x000A_S//UwrH/0sGv/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/G1Pr/xtT6/8bU+v/Br53/v62c/1lCL/+NaEv/imZJ/4ZjR/+DYEX/f15D/3xbQf94WUD/dVY+/3FUPP9uUTr/a044/2dMN/9kSTX/YEcz/11E_x000D__x000A_Mf9ZQi//gACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $SaveConfig16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("SaveConfig16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($SaveConfig16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Calc16Icon ********_x000D__x000A_$Calc16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISAjByAfIycgHyM6IB8jOyAfIzsgHyM7IB8jOyAfIzsgHyM7IB8jOyAfIzsgHyM6IB8iJyEg_x000D__x000A_JAcAAAAAJCMnBzMyNGxwbGvYgHx664B8euyAfHrsgHx67IB8euyAfHrsgHx67IB8euyAfHrsgHx663Bsa9czMTRqJiUpBy8uMTGSjYvznZiV/5SQjv94d3v/fnx//5uWlP+dmJX/nZiV/5uWk/9+fH//eHd7/5SQ_x000D__x000A_jv+dmJX/kY2L8TAuMS9ST1Bpop2b/4SCg/86Qlb/OUJa/zhCWf9HTVz/mpaU/5mVk/9GTFz/OUJZ/zlCWv87Qlf/hYOE/6Kdm/9RTlBlW1hZc6mkov9ESVn/Pkdg/2dvg/9qcYT/OUNb/2prcv9naXD/OUNb/0BK_x000D__x000A_Y/9WX3X/O0Vd/0ZLWv+ppKL/WFVWa15bXHOuqqj/NDxQ/0JLZP+usrv/g4mZ/z5HYP9ZXWj/V1tn/0BJYf+KkJ7/ipCe/1dfdP81PVD/sKup/1pYWWphX2BzubWz/1ZbZ/9ian3/a3KF/210hv9eZXn/dnd9/3R1_x000D__x000A_e/9gZ3r/XWV6/210h/9gaHz/V1to/7m1s/9dW1xpZGJjc8C9u/+lo6T/b3N//36Ek/95f47/cXR8/7q3tv+5t7X/c3V+/3qAj/9+hJP/bXF9/6WkpP+/vbv/X15faGdlZnPHxcT/x8XE/8LAv/+enZ7/qaen/8fF_x000D__x000A_xP/HxcT/x8XE/8fEw/+op6f/np2e/8LAv//HxcT/x8XE/2JgYmdpaGly0M7N/8HAwP9fZHH/Nj9V/zxEWf9/gYn/z83M/8/NzP98f4j/O0NY/zY/Vf9gZXP/wsHB/9DOzf9kY2RlbGttctjX1v9iZnP/OkRc/1tk_x000D__x000A_eP8+SGD/OEFY/5iZnv+Vlpz/OEFZ/zxGX/89R2D/OkNc/2Vpdv/Y19b/ZmVnZHBvcHLd3Nv/Nz9T/1Rccf+xtb7/iI6c/ztFXf9scXz/aW56/zxGXv+Ijp3/iY+d/1Nccf85QVT/393c/2hnaWNzcnNy5+bl/0tS_x000D__x000A_Yv9VXnP/g4qZ/1Nccv9TW3D/f4KL/3t/if9TXHH/Ulty/1Jbcv9VXnP/TVRk/+fm5v9qaWphfn1+We3t7f+qrLD/cXeG/3J5iv91e4z/a3B+/9TU1f/S0tP/bnOB/3R7jP9zeov/b3WE/6utsf/t7e3/e3p7U5eW_x000D__x000A_lxTs6+vr8/Py/8jIyv+jpav/qKqv/97e3v/z8/L/8/Ly/93d3f+oqq//o6Wr/8nJy//z8/L/6ejo6JKRkg8AAAAA2djXLe/u7bDw8O/L8O/vy/Dv78vw7+/L8O/vy/Dv78vw7+/L8O/vy/Dv78vw8O/L7+7tsNPS_x000D__x000A_0ioAAAAAgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Calc16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Calc16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Calc16Icon))))_x000D__x000A__x000D__x000A_#region ******** $ListData16Icon ********_x000D__x000A_$ListData16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtUTys4My+BNTEujTUxLo01Mi6NNTIujTYyL401MS6MGhgWbQUFBSQFBQQBAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAIB2bxKgmpbzy8vL/8/Pz//W1tb/3d3d/+Tk5P/q6ur/7Ozs/6aioP5zcG7OCgkJTgcGBgUAAAAAAAAAAAAAAACCeXExrKuq/319ff+1tbX/hoaG/8bGxv+Tk5P/2NjY/42Njf+LiYf/3Nzc/5iW_x000D__x000A_lOcPDg1eBwcGBQAAAAAAAAAAhn12MX59e/+srKz/W1tb/76+vv9hYWH/0tLS/6ampv+ampr/pKKg//T09P/b29v/mJaU6AsKCVAGBQUBAAAAAId+dzGko6H/eHh4/6ampv+AgID/tra2/4uLi//Q0ND/j4+P/+rq_x000D__x000A_6f/e3Nr/8vLy/9bW1v93dHLSBwYGJgAAAACJf3kxu7m4/4ODg/+8vLz/kpKS/9DQ0P+Xl5f/29vb/6enp//o6Oj/oqKh/83Kyf+PjYv/tbKv/iEeHHgAAAAAioF6McnHxv+CgoL/kpKS/7a2tv+lpaX/kZGR/7Gx_x000D__x000A_sf/MzMz/cHBw/8vLy/91dXX/xMTE/5OTk/9DPzycAAAAAIyDfDHLysn/hISE/8HBwf+FhYX/vb29/3p6ev/IyMj/hoaG/6SkpP+JiYn/pqam/4eHh/+urq7/Qz88nQAAAACNhH0x29rZ/8HBwf/j4+P/vLy8/+Hh_x000D__x000A_4f/AwMD/5+fn/8DAwP/k5OT/ubm5/9fX1/+4uLj/z8/P/0M/PJ0AAAAAjoV+MeHf3v+NjY3/7+/v/4uLi/+0tLT/rKys/319ff+oqKj/oKCg/4GBgf/c3Nz/f39//9PT0/9DPzycAAAAAI6FfzHZ2Nf/jY2N/+3t_x000D__x000A_7f+Kior/urq6/6Wlpf+Ghob/oKCg/6Ojo/95eXn/2tra/3Nzc//U1NT/Qz88nAAAAACPhX8x4+Lh/9vb2//29vb/1dXV//Pz8//Ly8v/8vLy/8PDw//i4uL/wcHB/9jY2P+4uLj/0NDQ/0M/O5wAAAAAj4Z/MbKw_x000D__x000A_r/+UlJT/ycnJ/3R0dP/AwMD/kpKS/7q6uv9xcXH/19fX/2xsbP+6urr/goKC/5aWlv9CPjucAAAAAIuBejGXlZT/ysrK/8XFxf+bm5v/tbW1/8zMzP+vr6//lpaW//Ly8v+SkpL/wMDA/7CwsP+Li4v/Qz88kQAA_x000D__x000A_AACJf3gNpJ2Y56empf/k4+L/uLe2/+zs6/+mpaX/4eDg/62srP/h4N//pKSj/97d3P+VlJP/pqKf+2hhXEAAAAAAAAAAAIyDfBOOhX5Ek4qDRZOLhEWSioNFkoqDRZKJgkWQiIFFj4d/RY2FfkWMg3xFiH94RYV8_x000D__x000A_diQAAAAAwAesQYADrEGAAaxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBwAGsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $ListData16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("ListData16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ListData16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Export16Icon ********_x000D__x000A_$Export16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkpKQgoqKiWqGhoW+hoaF/oaGhhaGhoZOhoaGVoaGhlaGhoZWhoaGVoaGhk6GhoYWioqKAo6Ojd6Sk_x000D__x000A_pF+kpKQin5+fCLS0tJi3t7fZt7e337e3t+a3t7fot7e377e3t++3t7fvt7e378DAuui7u7jos7Ozuqurqzm0tLQsp6enDQAAAADR0dHZw8PD/8PDw//Dw8P/w8PD/8vLxv/Nzcb/zc3G/9XVyf9iYqH/srK8/9ra_x000D__x000A_0eUAAAAAAAAAAAAAAAAAAAAA1NTU1sXFxf/FxcX/xcXF/83Nx/91daz/Xl6k/2Fhpf9nZ6f/ISGS/wAAhf97e7LoAAAAAAAAAAAAAAAAAAAAANvb29bMzMz/zMzM/8zMzP/b29D/HByY/wUFkv8ICJP/CAiT/w4O_x000D__x000A_lP8QEJX/BweT/w0NmssQEJMSAAAAAAAAAADg4ODW0dHR/9HR0f/R0dH/4ODU/yUlpP8PD57/EhKg/xISoP8SEqD/EhKg/xISoP8QEJ7/Fham/yAglxwAAAAA5ubm1tbW1v/W1tb/1tbW/+Xl2f8gIKv/CQml/wwM_x000D__x000A_pv8MDKb/EhKn/xUVqP8MDKX/JSW29EdH1j4AAAAAAAAAAOrq6tba2tr/2tra/9ra2v/h4dv/h4fO/3R0zP92dsz/fHzO/zIyuf8GBrD/bGzO8QAAAAAAAAAAAAAAAAAAAADu7u7W3t7e/97e3v/e3t7/3t7e/+Xl_x000D__x000A_3//n59//5+ff//Hx4P9jY83/rq7a//z87uMAAAAAAAAAAAAAAAAAAAAA8vLy1uLi4v/i4uL/4uLi/+Li4v/i4uL/4uLi/+Li4v/i4uL/7Ozj/+fn4v/v7+/kAAAAAAAAAAAAAAAAAAAAAPX19dbl5eX/5eXl/+Xl_x000D__x000A_5f/l5eX/5eXl/+Xl5f/l5eX/5eXl/+Xl5f/l5eX/8/Pz5AAAAAAAAAAAAAAAAAAAAAD5+fnW6Ojo/+jo6P/o6Oj/6Ojo/+jo6P/o6Oj/6Ojo/+jo6P/o6Oj/6Ojo//b29uQAAAAAAAAAAAAAAAAAAAAA+/v71urq_x000D__x000A_6v/q6ur/6urq/+rq6v/q6ur/6urq/+rq6v/q6ur/8/Pz//X19f/////pAAAAAAAAAAAAAAAAAAAAAP39/dbs7Oz/7Ozs/+zs7P/s7Oz/7Ozs/+zs7P/s7Oz/9fX1/4CAgP9ra2v/f39/ZwAAAAAAAAAAAAAAAAAA_x000D__x000A_AAD+/v7Z7e3t/+3t7f/t7e3/7e3t/+3t7f/t7e3/7e3t//n5+f9eXl7/XV1dZQAAAAAAAAAAAAAAAAAAAAAAAAAA/v7+k+7u7s/u7u7M7u7uzO7u7szu7u7M7u7uzO7u7sz5+fnRUlJSYgAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAACsQQAArEGAB6xBgAesQYABrEGAAKxBgAGsQYAHrEGAB6xBgAesQYAHrEGAB6xBgAesQYAHrEGAD6xBgB+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Export16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Export16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Export16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Clear16Icon ********_x000D__x000A_$Clear16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkMDAyPFRQUmBUUFJgVFBSYFRQUmBUUFJgVFBSYFRQUmBUUFJgMDAyPAAAAKQAA_x000D__x000A_AAAAAAAAAAAAAAAAAAxRUE/q6ujm//Hw7v/x8O7/8fDu//Hw7v/x8O7/8fDu//Hw7v/x8O7/6ujm/1FQT+oAAAAMAAAAAAAAAAAAAAA1paOh////////////////////////////////////////////////////_x000D__x000A_//+lo6H/AAAANQAAAAAAAAAAAAAANqinpf/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/qKel/wAAADYAAAAAAAAAAAAAADapqKf//f39//39/f/9/f3//f39//39/f/9/f3//f39//39_x000D__x000A_/f/9/f3//f39/6mop/8AAAA2AAAAAAAAAAAAAAA2qqmo//z7+//8+/v//Pv7//z7+//8+/v//Pv7//z7+//8+/v//Pv7//z7+/+qqaj/AAAANgAAAAAAAAAAAAAANquqqf/6+vn/+vr5//r6+f/6+vn/+vr5//r6_x000D__x000A_+f/6+vn/+vr5//r6+f/6+vn/q6qp/wAAADYAAAAAAAAAAAAAADasq6n/+Pj3//j49//4+Pf/+Pj3//j49//4+Pf/+Pj3//j49//4+Pf/+Pf2/6upqP8AAAA2AAAAAAAAAAAAAAA2rKuq//b19P/29fT/9vX0//b1_x000D__x000A_9P/29fT/9vX0//b19P/29fT/9vX0//Tz8f+npaP/AAAANgAAAAAAAAAAAAAANq2sq//08vH/9PLx//Ty8f/08vH/9PLx//Ty8f/08vH/8/Lw//Lw7v/r6OT/nJiU/wAAADYAAAAAAAAAAAAAADatrKv/8e/t//Hv_x000D__x000A_7f/x7+3/8e/t//Hv7f/x7+3/8e/t/+/s6v/n4+D/1c7H/4F5cf8AAAA2AAAAAAAAAAAAAAA2ra2s/+3r6f/t6+n/7evp/+3r6f/t6+n/7evp/+jk4f/k39r/5eHd/+Tg3P9RTkvsAAAAGwAAAAAAAAAAAAAANq6t_x000D__x000A_rP/q5+T/6ufk/+rn5P/q5+T/6ufk/+jl4v/f2dT/6OXi/+bj4P9lZWTsAAAAMQAAAAAAAAAAAAAAAAAAADWtrKv/5uPf/+bj3//m49//5uPf/+Th3f/e2dT/08zE/+vp5/9kZGTrAAAALgAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAMW1tb6u/u7P/w7uz/8O7r/+7r6f/n49//1M3G/72zqP9kZGTrAAAALwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkODg6PFxcXmBcXF5gXFxeYFhUVmBMSEZgMCwqYAAAALgAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAwAOsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAOsQYAHrEGAD6xBwB+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Clear16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Clear16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Clear16Icon))))_x000D__x000A__x000D__x000A_#region ******** $StatusGood16Icon ********_x000D__x000A_$StatusGood16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAFA5kCNybbAVtG+wFbRvsCNybbAAUDmQAAADMAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAKAQcDnQ5qNf4k0Hr/P+6e/0z2s/9M9rP/P+6e/yTRe/8OajX+AQcDnQAAAAoAAAAAAAAAAAAAAAAAAAAKBBMEwyCeOP870l7/S993/0bnjP9D7Jr/Q+ya/0bnjP9L33f/O9Ne/yCe_x000D__x000A_OP8EEwTDAAAACgAAAAAAAAAAAgYAnSmQGP81vTb/OctO/zPUZP8v23T/LN9+/yzffv8v23X/M9Rk/znLT/81vTf/KZAZ/wIGAJ0AAAAAAAAAMx1RAP43qA7/N7Ul/zG+Ov8sx03/KM1a/ybRYv8m0WL/KM1a/yzH_x000D__x000A_Tf8xvzv/N7Ul/zeoD/8dUQD+AAAAMwEDAJk2jwD/OqEC/ziqEv8ysyT/Lroz/yq/P/8pwkX/KcJF/yq/P/8tujT/MrMk/zirEv86oQL/No8A/wEDAJkNIQDbOZUA/zqbAP88oQP/OqgQ/zevHf80syb/MrUr/zK1_x000D__x000A_K/80syb/N68d/zqoEP88oQP/OpsA/zmVAP8NIQDbFDMA+ziPAP8+lwb/R6AQ/0ikEP9HqBP/RqsX/0WtG/9FrRv/RqsX/0eoE/9IpBD/R6AQ/z6XBv84jwD/FDMA+xQxAPs4iQD/UZwf/1ShIv9VpSL/Vaci/1ap_x000D__x000A_Iv9WqiL/Vqoi/1apIv9VpyL/VaUi/1ShIv9RnB//OIkA/xQxAPsMHgDbPIYH/2WiOf9lpjn/Zqg5/2aqOf9mrDn/Zqw5/2asOf9mrDn/Zqo5/2aoOf9lpjn/ZaI5/zyGB/8MHgDbAQMAmTZ2Bv95q1T/eq1V/3qv_x000D__x000A_Vf96sVX/e7JV/3uyVf97slX/e7JV/3qxVf96r1X/eq1V/3mrVP82dgb/AQMAmQAAADMaPAD+falb/5K5dv+Uu3f/lLx3/5S9d/+UvXf/lL13/5S9d/+UvHf/lLt3/5K5dv99qVv/GjwA/gAAADMAAAAAAQQAnUhz_x000D__x000A_Jf+uyZn/tM6g/7TOoP+0z6D/tM+g/7TPoP+0z6D/tM6g/7TOoP+uyZn/SHMl/wEEAJ0AAAAAAAAAAAAAAAoFCwDDYIFD/9Hfxv/Z5dD/2eXQ/9nl0P/Z5dD/2eXQ/9nl0P/R38b/YIFD/wULAMMAAAAKAAAAAAAA_x000D__x000A_AAAAAAAAAAAACgEDAJ0zSSD+oreQ/+Tr3f/3+fX/9/n1/+Tr3f+it5D/M0kg/gEDAJ0AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwECAJkLGADbHS4N+x0uDfsLGADbAQIAmQAAADMAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA8A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQYABrEHAA6xB8A+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $StatusGood16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("StatusGood16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($StatusGood16Icon))))_x000D__x000A__x000D__x000A_#region ******** $StatusBad16Icon ********_x000D__x000A_$StatusBad16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwADBpkAJDvbAEFd+wBBXfsAJDvbAAMGmQAAADMAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAKAAIJnQAxgP4Teuz/Nab//0e8//9HvP//Nab//xN77P8AMYD+AAIJnQAAAAoAAAAAAAAAAAAAAAAAAAAKAAQawwE10P8gaf//OIn//ziZ//84o///OKP//ziZ//84if//IGn//wE1_x000D__x000A_0P8ABBrDAAAACgAAAAAAAAAAAAAJnQAX0P8MO///GFj//xhq//8YeP//GIH//xiB//8YeP//GGr//xhY//8MO///ABfQ/wAACZ0AAAAAAAAAMwAAf/4ADf7/CCn//wk9//8JTf//CVn//wlg//8JYP//CVn//wlN_x000D__x000A_//8JPf//CCn//wAO/v8AAH/+AAAAMwAABZkAAOT/AAL9/wIS/v8CI///AjL//wI8//8CQv//AkL//wI9//8CMv//AiT//wIT/v8AAv3/AADk/wAABZkAADfbAADw/wAA9/8BA/z/Aw/+/wQb//8EJP//BCn//wQp_x000D__x000A_//8EJP//BBz//wMP/v8BA/3/AAD3/wAA8P8AADfbAABU+wAA6f8GBvD/EBD2/xAQ+v8QE/3/EBf+/xAa/v8QGv7/EBf+/xAT/f8QEPr/EBD2/wYG8P8AAOn/AABU+wAAUfsAAOL/Hx/r/yIi8P8iIvP/IiL2/yIi_x000D__x000A_+P8iIvr/IiL6/yIi+P8iIvb/IiLz/yIi8P8fH+v/AADi/wAAUvsAADLbBwfc/zk55/85Oev/OTnu/zk58P85OfL/OTnz/zk58/85OfL/OTnw/zk57v85Oev/OTnn/wcH3P8AADLbAAAFmQYGxv9UVOX/VVXo/1VV_x000D__x000A_6v9VVez/VVXt/1VV7v9VVe7/VVXt/1VV7P9VVer/VVXo/1RU5f8GBsb/AAAFmQAAADMAAGj+W1vh/3Z26P93d+r/d3fr/3d37P93d+3/d3ft/3d37P93d+v/d3fq/3Z26P9bW+H/AABo/gAAADMAAAAAAAAHnSUl_x000D__x000A_rf+Zmev/oKDt/6Cg7v+goO//oKDv/6Cg7/+goO//oKDu/6Cg7f+Zmev/JSWt/wAAB50AAAAAAAAAAAAAAAoAABTDQ0Ow/8bG8v/Q0PX/0ND1/9DQ9f/Q0PX/0ND1/9DQ9f/GxvL/Q0Ow/wAAFMMAAAAKAAAAAAAA_x000D__x000A_AAAAAAAAAAAACgAAB50gIGn+kJDV/93d9v/19fz/9fX8/93d9v+QkNX/ICBp/gAAB50AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAABJkAACzbDQ1J+w0NSfsAACzbAAAEmQAAADMAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA8A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQYABrEHAA6xB8A+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $StatusBad16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("StatusBad16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($StatusBad16Icon))))_x000D__x000A__x000D__x000A_#region ******** $StatusInfo16Icon ********_x000D__x000A_$StatusInfo16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwUFBJk5NzDbXFtY+1xbWPs5NzDbBQUEmQAAADMAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAKCAcDnXNpQv7bz5n/9e3G//r24f/69uH/9e3G/9vQmv9zaUL+CAcDnQAAAAoAAAAAAAAAAAAAAAAAAAAKFRIGw7KdRv/k0Xb/7N6V//Hmr//07MH/9OzB//HmsP/s3pX/5NF2/7Kd_x000D__x000A_R/8VEgbDAAAACgAAAAAAAAAABwUAnamOH//Xu0T/38li/+TSff/p2ZL/692e/+venv/p2ZL/5NJ9/9/JY//Xu0X/qY4f/wcFAJ0AAAAAAAAAM2JPAf7KpRL/0rIv/9i8Sv/dxWD/4Mtx/+LPe//iz3v/4Mxx/93F_x000D__x000A_Yf/YvEr/0rMv/8qmE/9iTwH+AAAAMwQDAJmsiQP/w50D/8uoFv/QsC3/1bhB/9i9T//ZwFf/2cBX/9i9T//VuEH/0LEu/8uoFv/DnQP/rYkD/wQDAJkoHwLbsosH/7uUA//DnQT/yqYT/86sI//QsS//0rM2/9Kz_x000D__x000A_Nv/QsS//zqwj/8qmE//DnQT/u5QD/7KLB/8oHwLbPC4E+6qDCv+0jg3/vZkU/8OgEv/IpBT/y6ga/8yqHv/Mqh7/y6ga/8ilFP/EoBL/vZoU/7SODf+qgwr/PC4E+zkrBfuheg7/s5Ep/7qYKf++nSf/wqEm/8Wk_x000D__x000A_Jf/HpST/x6Uk/8WkJf/CoSb/v50n/7qYKf+zkSn/oXoO/zkrBfsiGQTbm3QY/7WWRf+5m0P/vZ9C/8CiQP/CpED/w6U//8OlP//CpED/wKJA/72fQv+5m0P/tZZF/5t0GP8iGQTbAwIAmYhjGP+4nmH/vKJg/7+l_x000D__x000A_X//Bp17/w6le/8OqXv/Dql7/w6le/8GnXv+/pV//vKJg/7ieYf+IYxj/AwIAmQAAADNEMAv+tJtq/8Ougf/GsYH/yLOB/8m0gP/KtID/yrSA/8m0gP/Is4H/xrGB/8Ougf+0m2r/RDAL/gAAADMAAAAABAMAnX1h_x000D__x000A_Nv/Pv6P/1MWp/9XGqP/Wx6j/1seo/9bHqP/Wx6j/1cao/9TFqf/Pv6P/fWI2/wQDAJ0AAAAAAAAAAAAAAAoMCALDiHJT/+LZzP/o4NT/6OHU/+jh1P/o4dT/6OHU/+jg1P/i2cz/iHJT/w0IAsMAAAAKAAAAAAAA_x000D__x000A_AAAAAAAAAAAACgQCAZ1OPiz+u6yb/+3n4f/5+Pb/+fj2/+3n4f+7rJv/Tj4s/gQCAZ0AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwIBAJkbEQfbMiUX+zIlF/sbEQfbAgEAmQAAADMAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA8A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQYABrEHAA6xB8A+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $StatusInfo16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("StatusInfo16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($StatusInfo16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Selected16Icon ********_x000D__x000A_$Selected16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX5JgdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIy9mvN0qX+DAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABot4rzWMCR/2imeIUAAAAAAAAAAAAAAAAAAAAAcql9hHuzioR8s4qEfLOKhHyzioR8s4uEfLSLhHy0i4R6somEZbuN+Saz_x000D__x000A_d/9Ru4r/cKt/hwAAAAAAAAAAAAAAADabYv81qXL/NK12/zSxef8ztXz/M7h//zO7gv8yvYT/Mr2D/y+5f/8msnb/Jq5y/0q2g/9vrH+JAAAAAAAAAAArlFn/KKFn/yela/8nqW7/Jq1y/yawdf8ms3f/JbV4/yW0_x000D__x000A_eP8msnb/Jq90/yascP8np23/RLB8/2epeosAAAAAK5NY/yifZv8oo2n/LKlw/zCudf8zsnr/NLV9/zW2f/82tn//N7V+/zezfP82r3n/Nat1/zSncP9Grnv/Y6d2jUCbZv9Orn//VrWH/1e4iv9Wuoz/VryO/1a9_x000D__x000A_j/9WvpD/Vr6Q/1a9j/9Wu43/VrmM/1e3iv9XtIf/XreK/2aoeI1iqn7/cbyX/3G+mf9xwZv/ccKc/3HEnf9wxZ7/cMae/3DFnv9wxZ7/ccSd/3HCnP9xwJr/ccCY/2uqfYsAAAAAdrWO/4zKq/+MzKz/jM2t/4zO_x000D__x000A_rv+Mz6//jNCv/4zQsP+M0LD/jM+v/4vNrf+LzKz/h8qo/3Sug4kAAAAAAAAAAHOrgIR9tY2EfraOhH62joR+to6EfraOhH62joR+to6EfbWNhIzFo/ml1r7/ntO3/3euhYcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACWxKXzstvF/3SrgIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmcGi836uhoMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCTYnYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA//+sQf+/rEH/n6xB/4+sQQAHrEEAA6xBAAGsQQAArEEAAKxBAAGsQQADrEEAB6xB/4+sQf+frEH/v6xB//+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Selected16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Selected16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Selected16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Delete16Icon ********_x000D__x000A_$Delete16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ps48SErOvGhqtEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eqRAqKsmvLy/TjwAA_x000D__x000A_AAAAAAAAAAAAAA0Nsp8GBrf/CQm6/xQUtM8bG60QAAAAAAAAAAAAAAAAAAAAAB0dqhAnJ8bPODju/0BA9/81NdqfAAAAADc3v48HB7X/Bga3/wkJuv8MDL3/FRW1zxsbrBAAAAAAAAAAAB0dqhAjI8LPLy/k/zY2_x000D__x000A_7P87O/L/PT30/y4u0I9ERMSvVFTO/wkJt/8ICLn/Cwu8/w4OwP8WFrfPHBysEBwcqxAfH77PJiba/yws4P8xMeb/NTXr/zY27P8pKcevGRmvEEVFxM9VVc//Cwu5/woKu/8NDb//ERHD/xgYuM8bG7vPHh7R/yMj_x000D__x000A_1v8nJ9v/Kyvg/y4u4/8mJsXPHh6pEAAAAAAZGa8QRUXEz1VV0P8MDLv/DAy+/w8Pwf8TE8X/FxfJ/xsbzv8fH9L/IiLW/yUl2f8iIsHPHR2qEAAAAAAAAAAAAAAAABkZrhBGRsTPVlbQ/w4OvP8ODr//ERHD/xQU_x000D__x000A_xv8XF8r/GhrN/x4e0f8eHr7PHR2qEAAAAAAAAAAAAAAAAAAAAAAAAAAAGhquEEZGxc9NTc//DAy9/w4OwP8REcP/FBTG/xYWyf8bG7rPHByrEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrhAlJbjPLi7E/x0d_x000D__x000A_wf8ODr7/Dg7A/xAQwv8TE8X/GBi4zxwcrBAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxAmJrnPNDTE/zIyxf8wMMX/Ly/G/ygoxf8gIMT/Hx/F/x8fxv8jI7rPGxusEAAAAAAAAAAAAAAAABgYsBAoKLnPOTnE/zY2_x000D__x000A_xP80NMT/MjLF/zAwxf9oaNf/MTHH/y4ux/8uLsj/LS3J/yMjuc8bG60QAAAAABcXsRArK7rPPj7F/zs7xf85OcT/NjbE/zQ0xP8lJbjPT0/Hz3Bw2f8yMsb/Ly/G/y4uxv8uLsf/JCS5zxoarRBTU8qvVFTM/0FB_x000D__x000A_xv8+PsX/OzvF/zk5xP8mJrnPGRmuEBoarhBQUMfPcXHY/zMzxf8wMMX/MDDF/zAwxf8kJLivY2PQj5iY5v9TU8z/QUHG/z4+xf8oKLnPGRmvEAAAAAAAAAAAGhquEFBQx89yctj/NTXF/zIyxP8yMsT/Jye6jwAA_x000D__x000A_AABpadOfmJjm/1RUzP8rK7rPGBiwEAAAAAAAAAAAAAAAAAAAAAAZGa8QUFDIz3R02P84OMT/KSm7nwAAAAAAAAAAAAAAAGNj0I9TU8qvFxewEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxBQUMivSkrFjwAA_x000D__x000A_AAAAAAAAx+OsQYPBrEEBgKxBAACsQQAArEGAAaxBwAOsQeAHrEHgB6xBwAOsQYABrEEAAKxBAACsQQGArEGDwaxBx+OsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Delete16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Delete16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Delete16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Up16Icon ********_x000D__x000A_$Up16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH8A/wB7AP8AdwD/AHIA/wBuAP8AagD/AGYA/wBjAP8AAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDAP+Y05P/csVr/3fKcv99z3r/hNSC/4raiv8AZgD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhwD/mNOS/zOrKP87sjL/Q7g9/0y/SP+I2If/AGoA/wAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIsA/5fSkf8wqSX/OK8v/0C2Of9IvEP/hdWD/wBuAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACPAP+W0Y//Laci/zSsKv88sjP/Q7g9/4HS_x000D__x000A_fv8AcgD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkwD/ldCN/yqkHf8wqSX/N68t/z60Nv98znj/AHcA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJcA/5PPi/8moRj/LKUg/zKq_x000D__x000A_J/84ry//eMtz/wB7AP8AAAAAAAAAAAAAAAAAAAAAAJkA/wCZAP8AmQD/AJkA/wCZAP+RzYn/Ip4T/yeiGv8tpiH/Mqon/3PHbf8AfwD/AHsA/wB3AP8AcgD/AG4A/wCZAO9ywW//rden/43KhP93wGz/hcd8/x6a_x000D__x000A_Dv8jnhT/J6Ia/yymIP9vw2f/csVr/3THbv92yXD/Ybtd/wByAO8AmQAwAJkA73HBbf+b0JP/XLNP/1SwRv9JrTz/Pqkx/zenKv83qCr/M6gn/zerK/9mv17/Ybpc/wiAB+8AdwAwAAAAAACZADAAmQDvb8Fs/5nP_x000D__x000A_kv9as03/U7BF/0+vQv9Or0D/TbBB/0+yQ/9zwmr/ab1j/weHB+8AfwAwAAAAAAAAAAAAAAAAAJkAMACZAO9vwWv/mc+R/1qzTf9UsEf/UrBF/1KxRf9zwWr/aLxh/weOBu8AhwAwAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAmQAwAJkA72/Ba/+az5L/XLNQ/1iyS/93wGz/aLxg/waVBu8AjwAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZADAAmQDvcMBs/5zPlP9+w3T/cMBo/wabBe8AlwAwAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAJkAMACZAO9xwG3/jMqH/wqcCe8AmQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAwAJkA7wCZAO8AmQAwAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAA8A+sQfAPrEHwD6xB8A+sQfAPrEHwD6xB8A+sQQAArEEAAKxBAACsQYABrEHAA6xB4AesQfAPrEH4H6xB/D+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Up16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Up16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Up16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Down16Icon ********_x000D__x000A_$Down16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcHKwwHByr7xwcq+8dHaswAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbG6wwICCu71RUwP9HR7v/HR2r7x0dqjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbG60wICCu71RUwP9UVMD/VFS//0hIu/8dHarvHR2qMAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaGq0wICCv71NTwf9TU8D/ICCu/yAgrf9UVL//SEi7/x0dqu8dHaowAAAAAAAAAAAAAAAAAAAAAAAAAAAaGq4wHx+v71NTwf9TU8H/Hx+u/xwcrP8cHKz/ICCt/1RU_x000D__x000A_v/9ISLr/HR2q7x0dqjAAAAAAAAAAAAAAAAAaGq4wHx+w71JSwf9SUsH/Hx+v/xsbrP8bG6z/HBys/xwcq/8gIK3/VFS//0hIu/8dHarvHR2qMAAAAAAZGa8wHh6w71xY0P9lYdP/OjbD/zYywv8bG63/Gxus/xsb_x000D__x000A_rP8cHKz/NzPA/zs3wv9mYtH/UU3J/yQjse8dHaswGRmv72th5f+IeP//iHj//4h4//+IeP//Gxut/xsbrf8bG6z/Gxus/3lv6f+IeP//iHj//4h4//90Z+//HByr7xkZr/8ZGa//GRmu/xoarv8aGq7/iHj//xoa_x000D__x000A_rf8bG63/Gxut/xsbrP9gYMX/HBys/xwcrP8cHKz/HBys/xwcq/8AAAAAAAAAAAAAAAAAAAAAGhqu/4h4//8eHq//Ghqt/xsbrf8bG63/YGDF/xsbrP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZ_x000D__x000A_rv+IeP//VFTD/z8/u/8zM7b/KSmy/2lpyf8bG63/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGa//iHj//1xcxf9YWMT/VVXD/1NTwv+GhtT/Gxut/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAGRmv/4h4//9eXsb/XFzG/1paxf9XV8T/iYnV/xoarf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZr/+IeP//a2fW/2ll1f9oZNT/Z2PU/4yL2f8aGq7/AAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAYGK//iHj//4h4//+IeP//iHj//4h4//+KgPD/Ghqu/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBiw/yoqtv8qKrX/Kiq1/yoqtf8qKrX/Kiq1/xkZr/8AAAAAAAAAAAAA_x000D__x000A_AAAAAAAA/D+sQfgfrEHwD6xB4AesQcADrEGAAaxBAACsQQAArEEAAKxB8A+sQfAPrEHwD6xB8A+sQfAPrEHwD6xB8A+sQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Down16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Down16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Down16Icon))))_x000D__x000A__x000D__x000A_#region ******** $Edit16Icon ********_x000D__x000A_$Edit16Icon = @"_x000D__x000A_AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQzImWFpFM4IkGBNABQEBFAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH5kSoz65KL/28OL/rqdceePdFW+aE47lUkzJ3E0IhtWIRQQPBQLCSkKBAMdBAICCwAAAAAAAAAAAAAAAAAAAAB3X0aM9OKf//HkoP/w5KP/9OSn//Tjqv/t2ab/4cqe/9a+_x000D__x000A_lv3SuZX5zrCQ+z4qIl8AAAAAAAAAAAAAAAABAAADoYFhw7Clev+3rID/9eao/+zgqv/u47D/8Oa2//PqvP/27cP/+vTL//bpxP87KyNYAAAAAAAAAAAAAAAAKSMiPcnAoP2uoX3/QkVF/9DKqP/67LT/8OW4//Dm_x000D__x000A_vf/y6MH/8urG//fwzv/s3sH/LyIcRgAAAAAAAAAAAAAAAGp1cpzQ2Lz/5dGb/3uWqv9snd3/u7q5//rtxv/168f/8+vJ//Ttz//69Nn/5tjA+iAWEzIAAAAAAAAAAB4VEimkz83wz9O3//nqtf/OzcP/fqnk/zFj_x000D__x000A_t/+Gm5D/9e3H//ry1//28Nf//vrk/9zMufEPCggcAAAAAAAAAABpb2mSvvz8/9bLrf/37MD/5t3A/4Slu/9Jjjb/OYES/4aqWv/38Nz//Pbk////7//HuKnfBAAADwAAAAAfFRErsdfT7sL39//eza3/9u3I//ju_x000D__x000A_z/+uu5X/jbls/1qoHP9Biwn/kLJr//337f////3/rZ2TxgAAAAQAAAAAgYeAqs/////G4dz/6tu8//bv0P/48db/9O/U/8LNsP+axnn/W6Uj/0ePEP+fvYP//////417dacAAAAAVkxFcdH39f/R////z9bM//Ll_x000D__x000A_yf/38tn/+PLc//745//h483/uMeq/6LLhP95tEz/dKhP/8bLqv9lTUeBAAAAAHJbUILG19T44v///9/ay//79d7/+vfk//r45//7+ez///73/8/Ywv+uxZz/pMuG/7DRl/+wvpj/LCsXbwAAAAAAAAAAIRYSLIx/_x000D__x000A_d6rOrpz87tnI//Hk1v/27+T/+vTs///++///////qMeT/2WlNf/J3rj/2OnN/4KXdtsABAAiAAAAAAAAAAAAAAAALR8aO5WAeLHhzcX779nO/+jQw//AqaHcoY6KraqWkL1PfxzkhLdf//f49v/o8uD/NUMqdwAA_x000D__x000A_AAAAAAAAAAAAAAAAAAAAAAAALyQhMINtY5BcTUdqDAkIEAAAAAAAAAAADBgCNkaODvK20qD/+//4/0JPN30AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYNQJjRXoc3khb_x000D__x000A_OZAAAwAI8H+sQfAArEHwAKxB4ACsQeAArEHgAKxBwACsQcAArEGAAKxBgAGsQQABrEEAAaxBgACsQeAArEH4YKxB//CsQQ==_x000D__x000A_"@_x000D__x000A_#endregion ******** $Edit16Icon ********_x000D__x000A_$PILSmallImageList.Images.Add("Edit16Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Edit16Icon))))_x000D__x000A__x000D__x000A_#endregion ******** PIL Small Image Icons ********_x000D__x000A__x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILLarge ImageList_x000D__x000A_# ************************************************_x000D__x000A_#region $PILLargeImageList = [System.Windows.Forms.ImageList]::New()_x000D__x000A_$PILLargeImageList = [System.Windows.Forms.ImageList]::New($PILFormComponents)_x000D__x000A_$PILLargeImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit_x000D__x000A_$PILLargeImageList.ImageSize = [System.Drawing.Size]::New(48, 48)_x000D__x000A_#endregion $PILLargeImageList = [System.Windows.Forms.ImageList]::New()_x000D__x000A__x000D__x000A_#region ******** PIL Large ImageList Icons ********_x000D__x000A__x000D__x000A_#region ******** $Play64Icon ********_x000D__x000A_$Play64Icon = @"_x000D__x000A_"@_x000D__x000A_#endregion ******** $Play64Icon ********_x000D__x000A_$PILLargeImageList.Images.Add("Play64Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Play64Icon))))_x000D__x000A__x000D__x000A_#region ******** $Pause64Icon ********_x000D__x000A_$Pause64Icon = @"_x000D__x000A_"@_x000D__x000A_#endregion ******** $Pause64Icon ********_x000D__x000A_$PILLargeImageList.Images.Add("Pause64Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Pause64Icon))))_x000D__x000A__x000D__x000A_#region ******** $Stop64Icon ********_x000D__x000A_$Stop64Icon = @"_x000D__x000A_"@_x000D__x000A_#endregion ******** $Stop64Icon ********_x000D__x000A_$PILLargeImageList.Images.Add("Stop64Icon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($Stop64Icon))))_x000D__x000A__x000D__x000A_#endregion ******** PIL Large ImageList Icons ********_x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PIL Form_x000D__x000A_# ************************************************_x000D__x000A_#region $PILForm = [System.Windows.Forms.Form]::New()_x000D__x000A_$PILForm = [System.Windows.Forms.Form]::New()_x000D__x000A_$PILForm.BackColor = [MyConfig]::Colors.Back_x000D__x000A_$PILForm.ControlBox = $True_x000D__x000A_$PILForm.Enabled = $True_x000D__x000A_$PILForm.Font = [MyConfig]::Font.Regular_x000D__x000A_$PILForm.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable_x000D__x000A_$PILForm.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($PILFormIcon)))_x000D__x000A_$PILForm.KeyPreview = $True_x000D__x000A_$PILForm.MinimizeBox = $True_x000D__x000A_$PILForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::FormMinWidth), ([MyConfig]::Font.Height * [MyConfig]::FormMinHeight))_x000D__x000A_$PILForm.Name = "PILForm"_x000D__x000A_$PILForm.ShowIcon = $True_x000D__x000A_$PILForm.ShowInTaskbar = $True_x000D__x000A_$PILForm.TabIndex = 0_x000D__x000A_$PILForm.TabStop = $True_x000D__x000A_$PILForm.Tag = (-not [MyConfig]::Production)_x000D__x000A_$PILForm.Text = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_#endregion $PILForm = [System.Windows.Forms.Form]::New()_x000D__x000A__x000D__x000A_#region ******** Function Start-PILFormClosing ********_x000D__x000A_function Start-PILFormClosing_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Closing Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Closing Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Closing Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Closing Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormClosing -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Closing Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 2 -Category 0 -Message "Exiting $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A__x000D__x000A_  if ([MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    [Void][Console.Window]::Show()_x000D__x000A_    [System.Console]::Title = "CLOSING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_    $PILForm.Tag = $True_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Closing Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILFormClosing ********_x000D__x000A_$PILForm.add_Closing({Start-PILFormClosing -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILFormKeyDown ********_x000D__x000A_function Start-PILFormKeyDown_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      KeyDown Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      KeyDown Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the KeyDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  KeyDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormKeyDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter KeyDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  If ($EventArg.Control -and $EventArg.Alt)_x000D__x000A_  {_x000D__x000A_    Switch ($EventArg.KeyCode)_x000D__x000A_    {_x000D__x000A_      "F10"_x000D__x000A_      {_x000D__x000A_        If ($PILForm.Tag)_x000D__x000A_        {_x000D__x000A_          # Hide Console Window_x000D__x000A_          $Script:VerbosePreference = "SilentlyContinue"_x000D__x000A_          $Script:DebugPreference = "SilentlyContinue"_x000D__x000A_          [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_          [Void][Console.Window]::Hide()_x000D__x000A_          $PILForm.Tag = $False_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          # Show Console Window_x000D__x000A_          $Script:VerbosePreference = "Continue"_x000D__x000A_          $Script:DebugPreference = "Continue"_x000D__x000A_          [Void][Console.Window]::Show()_x000D__x000A_          [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_          $PILForm.Tag = $True_x000D__x000A_        }_x000D__x000A_        $PILForm.Activate()_x000D__x000A_        $PILForm.Select()_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    Switch ($EventArg.KeyCode)_x000D__x000A_    {_x000D__x000A_      "F2"_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Show Change Log for $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_        $ScriptContents = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()_x000D__x000A_        $CLogStart = ($ScriptContents.IndexOf("&lt;#") + 2)_x000D__x000A_        $CLogEnd = $ScriptContents.IndexOf("#&gt;")_x000D__x000A_        Show-ChangeLog -ChangeText ($ScriptContents.SubString($CLogStart, ($CLogEnd - $CLogStart)))_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit KeyDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILFormKeyDown ********_x000D__x000A_$PILForm.add_KeyDown({Start-PILFormKeyDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILFormLoad ********_x000D__x000A_function Start-PILFormLoad_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Load Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Load Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Load Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Load Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormLoad -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Load Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $Screen = ([System.Windows.Forms.Screen]::FromControl($Sender)).WorkingArea_x000D__x000A_  $Sender.Left = [Math]::Floor(($Screen.Width - $Sender.Width) / 2)_x000D__x000A_  $Sender.Top = [Math]::Floor(($Screen.Height - $Sender.Height) / 2)_x000D__x000A__x000D__x000A_  if ([MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    # Disable Control Close Menu / [X]_x000D__x000A_    #[ControlBox.Menu]::DisableFormClose($PILForm.Handle)_x000D__x000A__x000D__x000A_    [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_    [Void][Console.Window]::Hide()_x000D__x000A_    $PILForm.Tag = $False_x000D__x000A_  }_x000D__x000A_  else_x000D__x000A_  {_x000D__x000A_    [Void][Console.Window]::Show()_x000D__x000A_    [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_    $PILForm.Tag = $True_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Load Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILFormLoad ********_x000D__x000A_$PILForm.add_Load({Start-PILFormLoad -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILFormMove ********_x000D__x000A_function Start-PILFormMove_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Move Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Move Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Move Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Move Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormMove -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Move Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Move Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILFormMove ********_x000D__x000A_$PILForm.add_Move({Start-PILFormMove -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILFormResize ********_x000D__x000A_function Start-PILFormResize_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Resize Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Resize Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Resize Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Resize Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormResize -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Resize Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Resize Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILFormResize ********_x000D__x000A_$PILForm.add_Resize({Start-PILFormResize -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILFormShown ********_x000D__x000A_function Start-PILFormShown_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Shown Event for the PIL Form Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Shown Event for the PIL Form Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Shown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Shown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILFormShown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Form]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Shown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $Sender.Refresh()_x000D__x000A__x000D__x000A_  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 1 -Category 0 -Message "Begin Running $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A__x000D__x000A_  $HashTable = @{"ShowHeader" = $True; "ConfigFile" = $ConfigFile}_x000D__x000A_  $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Display-InitiliazePILUtility -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_  $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable_x000D__x000A__x000D__x000A_  if ([MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    # Enable $PILTimer_x000D__x000A_    $PILTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Shown Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILFormShown ********_x000D__x000A_$PILForm.add_Shown({Start-PILFormShown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Controls for PIL Form ********_x000D__x000A__x000D__x000A_#region $PILTimer = [System.Windows.Forms.Timer]::New()_x000D__x000A_$PILTimer = [System.Windows.Forms.Timer]::New($PILFormComponents)_x000D__x000A_$PILTimer.Enabled = $False_x000D__x000A_$PILTimer.Interval = [MyConfig]::AutoExitTic_x000D__x000A_#$PILTimer.Tag = [System.Object]::New()_x000D__x000A_#endregion $PILTimer = [System.Windows.Forms.Timer]::New()_x000D__x000A__x000D__x000A_#region ******** Function Start-PILTimerTick ********_x000D__x000A_function Start-PILTimerTick_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Tick Event for the PIL Timer Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Tick Event for the PIL Timer Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The  Control that fired the Tick Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the  Tick Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILTimerTick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.Timer]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Tick Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit += 1_x000D__x000A_  Write-Verbose -Message "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"_x000D__x000A_  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)_x000D__x000A_  {_x000D__x000A_    $PILForm.Close()_x000D__x000A_  }_x000D__x000A_  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)_x000D__x000A_  {_x000D__x000A_    $PILBtmStatusStrip.Items["Status"].Text = "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"_x000D__x000A_  }_x000D__x000A__x000D__x000A_  #$PILBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Tick Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILTimerTick ********_x000D__x000A_$PILTimer.add_Tick({Start-PILTimerTick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILMain Panel_x000D__x000A_# ************************************************_x000D__x000A_#region $PILMainPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_$PILMainPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A_$PILForm.Controls.Add($PILMainPanel)_x000D__x000A_$PILMainPanel.BackColor = [MyConfig]::Colors.Back_x000D__x000A_$PILMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None_x000D__x000A_$PILMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_$PILMainPanel.Enabled = $True_x000D__x000A_$PILMainPanel.Font = [MyConfig]::Font.Regular_x000D__x000A_$PILMainPanel.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILMainPanel.Name = "PILMainPanel"_x000D__x000A_#$PILMainPanel.TabIndex = 0_x000D__x000A_#$PILMainPanel.TabStop = $False_x000D__x000A_#$PILMainPanel.Tag = [System.Object]::New()_x000D__x000A_#endregion $PILMainPanel = [System.Windows.Forms.Panel]::New()_x000D__x000A__x000D__x000A_#region ******** $PILMainPanel Controls ********_x000D__x000A__x000D__x000A_#region $PILItemListListView = [System.Windows.Forms.ListView]::New()_x000D__x000A_$PILItemListListView = [System.Windows.Forms.ListView]::New()_x000D__x000A_$PILMainPanel.Controls.Add($PILItemListListView)_x000D__x000A_$PILItemListListView.AllowColumnReorder = $True_x000D__x000A_$PILItemListListView.BackColor = [MyConfig]::Colors.TextBack_x000D__x000A_$PILItemListListView.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D_x000D__x000A_$PILItemListListView.CheckBoxes = $True_x000D__x000A_$PILItemListListView.Dock = [System.Windows.Forms.DockStyle]::Fill_x000D__x000A_#$PILItemListListView.FocusedItem = [System.Windows.Forms.ListViewItem]::New()_x000D__x000A_$PILItemListListView.Font = [MyConfig]::Font.Bold_x000D__x000A_$PILItemListListView.ForeColor = [MyConfig]::Colors.TextFore_x000D__x000A_$PILItemListListView.FullRowSelect = $True_x000D__x000A_$PILItemListListView.GridLines = $True_x000D__x000A_$PILItemListListView.LargeImageList = $PILSmallImageList_x000D__x000A_$PILItemListListView.ListViewItemSorter = [MyCustom.ListViewSort]::New()_x000D__x000A_$PILItemListListView.MultiSelect = $False_x000D__x000A_$PILItemListListView.Name = "PILItemListListView"_x000D__x000A_$PILItemListListView.OwnerDraw = $True_x000D__x000A_$PILItemListListView.ShowGroups = $False_x000D__x000A_$PILItemListListView.SmallImageList = $PILSmallImageList_x000D__x000A_#$PILItemListListView.TabStop = $True_x000D__x000A_#$PILItemListListView.Tag = [System.Object]::New()_x000D__x000A_#$PILItemListListView.Text = "PILItemListListView"_x000D__x000A_#$PILItemListListView.TopItem = [System.Windows.Forms.ListViewItem]::New()_x000D__x000A_$PILItemListListView.View = [System.Windows.Forms.View]::Details_x000D__x000A_#endregion $PILItemListListView = [System.Windows.Forms.ListView]::New()_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListListViewColumnClick ********_x000D__x000A_function Start-PILItemListListViewColumnClick_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      ColumnClick Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      ColumnClick Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the ColumnClick Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList ColumnClick Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewColumnClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter ColumnClick Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $Sender.ListViewItemSorter.Column = $EventArg.Column_x000D__x000A_  $Sender.ListViewItemSorter.Ascending = (-not $Sender.ListViewItemSorter.Ascending)_x000D__x000A_  $Sender.Sort()_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit ColumnClick Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListListViewColumnClick ********_x000D__x000A_$PILItemListListView.add_ColumnClick({Start-PILItemListListViewColumnClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListListViewDrawColumnHeader ********_x000D__x000A_function Start-PILItemListListViewDrawColumnHeader_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      DrawColumnHeader Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      DrawColumnHeader Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the DrawColumnHeader Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList DrawColumnHeader Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter DrawColumnHeader Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)_x000D__x000A_  $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))_x000D__x000A_  $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit DrawColumnHeader Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListListViewDrawColumnHeader ********_x000D__x000A_$PILItemListListView.add_DrawColumnHeader({Start-PILItemListListViewDrawColumnHeader -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListListViewDrawItem ********_x000D__x000A_function Start-PILItemListListViewDrawItem_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      DrawItem Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      DrawItem Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the DrawItem Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList DrawItem Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewDrawItem -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter DrawItem Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  # Return to Default Draw_x000D__x000A_  $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit DrawItem Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListListViewDrawItem ********_x000D__x000A_$PILItemListListView.add_DrawItem({Start-PILItemListListViewDrawItem -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListListViewDrawSubItem ********_x000D__x000A_function Start-PILItemListListViewDrawSubItem_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      DrawSubItem Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      DrawSubItem Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the DrawSubItem Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList DrawSubItem Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewDrawSubItem -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter DrawSubItem Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  # Return to Default Draw_x000D__x000A_  $EventArg.DrawDefault = $True_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit DrawSubItem Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListListViewDrawSubItem ********_x000D__x000A_$PILItemListListView.add_DrawSubItem({Start-PILItemListListViewDrawSubItem -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListListViewMouseDown ********_x000D__x000A_function Start-PILItemListListViewMouseDown_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      MouseDown Event for the PILItemList ListView Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      MouseDown Event for the PILItemList ListView Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the MouseDown Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList MouseDown Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListListViewMouseDown -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ListView]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)_x000D__x000A_  {_x000D__x000A_    If (-not [String]::IsNullOrEmpty(($TmpItem = $Sender.GetItemAt($EventArg.Location.X, $EventArg.Location.Y))))_x000D__x000A_    {_x000D__x000A_      # Show Item Selected Context Menu_x000D__x000A_      If ($Sender.SelectedIndices -notcontains $TmpItem.Index)_x000D__x000A_      {_x000D__x000A_        $Sender.SelectedIndices.Add($TmpItem.Index) | Out-Null_x000D__x000A_      }_x000D__x000A_      #$PILItemListContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_    }_x000D__x000A_    $PILItemListContextMenuStrip.Show($Sender, $EventArg.Location)_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListListViewMouseDown ********_x000D__x000A_$PILItemListListView.add_MouseDown({Start-PILItemListListViewMouseDown -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_For ($I = 0; $I -lt $MaxColumns; $I++)_x000D__x000A_{_x000D__x000A_  New-ColumnHeader -ListView $PILItemListListView -Text ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Name ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Tag ([MyRuntime]::ThreadConfig.ColumnNames[$I])_x000D__x000A_}_x000D__x000A_New-ColumnHeader -ListView $PILItemListListView -Text " " -Name "Blank" -Tag " " -Width ($PILForm.Width * 4)_x000D__x000A__x000D__x000A_#For ($I = 0; $I -le 50; $I++)_x000D__x000A_#{_x000D__x000A_#  New-ListViewItem -ListView $PILItemListListView -Text ("Item {0:00}" -f $I) -ImageKey "StatusInfo16Icon" -SubItems @("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", " ")_x000D__x000A_#}_x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILItemList ContextMenuStrip_x000D__x000A_# ************************************************_x000D__x000A_#region $PILItemListContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_$PILItemListContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A_#$PILItemListListView.Controls.Add($PILItemListContextMenuStrip)_x000D__x000A_$PILItemListContextMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_$PILItemListContextMenuStrip.Enabled = $True_x000D__x000A_$PILItemListContextMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_$PILItemListContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILItemListContextMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_$PILItemListContextMenuStrip.ImageScalingSize = [System.Drawing.Size]::New(16, 16)_x000D__x000A_$PILItemListContextMenuStrip.Name = "PILItemListContextMenuStrip"_x000D__x000A_$PILItemListContextMenuStrip.ShowCheckMargin = $False_x000D__x000A_$PILItemListContextMenuStrip.ShowImageMargin = $True_x000D__x000A_$PILItemListContextMenuStrip.ShowItemToolTips = $False_x000D__x000A_#$PILItemListContextMenuStrip.TabIndex = 0_x000D__x000A_#$PILItemListContextMenuStrip.TabStop = $False_x000D__x000A_#$PILItemListContextMenuStrip.Tag = [System.Object]::New()_x000D__x000A_$PILItemListContextMenuStrip.TextDirection = [System.Windows.Forms.ToolStripTextDirection]::Horizontal_x000D__x000A_#endregion $PILItemListContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()_x000D__x000A__x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListContextMenuStripOpening ********_x000D__x000A_function Start-PILItemListContextMenuStripOpening_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Opening Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Opening Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the Opening Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList Opening Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListContextMenuStripOpening -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A_  _x000D__x000A_  # Do Not Show Context Menu if it is Disabled_x000D__x000A_  $EventArg.Cancel = (-not $PILItemListContextMenuStrip.Enabled)_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Opening Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListContextMenuStripOpening ********_x000D__x000A_$PILItemListContextMenuStrip.add_Opening({Start-PILItemListContextMenuStripOpening -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItemListContextMenuStripItemClick ********_x000D__x000A_Function Start-PILItemListContextMenuStripItemClick_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      ItemClicked Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      ItemClicked Event for the PILItemList ContextMenuStrip Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItemList Control that fired the ItemClicked Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItemList ItemClicked Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItemListContextMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  Param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ContextMenuStrip]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_  _x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A_  _x000D__x000A_  Switch ($Sender.Name)_x000D__x000A_  {_x000D__x000A_    "Process"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_      $Host.EnterNestedPrompt()_x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Export"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_      $Host.EnterNestedPrompt()_x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "Clear"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_      $Host.EnterNestedPrompt()_x000D__x000A_      # *****************************************_x000D__x000A_      # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      # *****************************************_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A_  _x000D__x000A_  Write-Verbose -Message "Exit ItemClicked Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItemListContextMenuStripItemClick ********_x000D__x000A__x000D__x000A_(New-MenuItem -Menu $PILItemListContextMenuStrip -Text "Process" -Name "Process" -Tag "Process {0} Items" -DisplayStyle "ImageAndText" -ImageKey "PILFormIcon" -PassThru).add_Click({Start-PILItemListContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuItem -Menu $PILItemListContextMenuStrip -Text "Export" -Name "Remove" -Tag "Export {0} Items" -DisplayStyle "ImageAndText" -ImageKey "PILFormIcon" -PassThru).add_Click({Start-PILItemListContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuItem -Menu $PILItemListContextMenuStrip -Text "Clear" -Name "Clear" -Tag "Clear {0} Items" -DisplayStyle "ImageAndText" -ImageKey "PILFormIcon" -PassThru).add_Click({Start-PILItemListContextMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILItelList ToolStrip_x000D__x000A_# ************************************************_x000D__x000A_#region $PILItelListToolStrip = [System.Windows.Forms.ToolStrip]::New()_x000D__x000A_$PILItelListToolStrip = [System.Windows.Forms.ToolStrip]::New()_x000D__x000A_$PILMainPanel.Controls.Add($PILItelListToolStrip)_x000D__x000A_#$PILForm.ToolStrip = $PILItelListToolStrip_x000D__x000A_$PILItelListToolStrip.Anchor = [System.Windows.Forms.AnchorStyles]("Top")_x000D__x000A_$PILItelListToolStrip.AutoSize = $True_x000D__x000A_$PILItelListToolStrip.BackColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILItelListToolStrip.Dock = [System.Windows.Forms.DockStyle]::None_x000D__x000A_$PILItelListToolStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_$PILItelListToolStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILItelListToolStrip.GripStyle = [System.Windows.Forms.ToolStripGripStyle]::Hidden_x000D__x000A_$PILItelListToolStrip.ImageList = $PILLargeImageList_x000D__x000A_$PILItelListToolStrip.ImageScalingSize = [System.Drawing.Size]::New(64, 64)_x000D__x000A_$PILItelListToolStrip.Name = "PILItelListToolStrip"_x000D__x000A_$PILItelListToolStrip.ShowItemToolTips = $True_x000D__x000A_$PILItelListToolStrip.Stretch = $True_x000D__x000A_#$PILItelListToolStrip.TabIndex = 0_x000D__x000A_#$PILItelListToolStrip.TabStop = $False_x000D__x000A_#$PILItelListToolStrip.Tag = [System.Object]::New()_x000D__x000A_#endregion $PILItelListToolStrip = [System.Windows.Forms.ToolStrip]::New()_x000D__x000A__x000D__x000A_$PILItelListToolStrip.SendToBack()_x000D__x000A__x000D__x000A_#region ******** Function Start-PILItelListToolStripItemClick ********_x000D__x000A_function Start-PILItelListToolStripItemClick_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the PILItelList ToolStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the PILItelList ToolStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The ItelList Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the ItelList Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILItelListToolStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A_  _x000D__x000A_  If (($Sender.CheckState -eq "Unchecked") -and ($Sender.Name -in ("Process", "Pause")))_x000D__x000A_  {_x000D__x000A_    $Sender.Checked = $True_x000D__x000A_  }_x000D__x000A_  Else_x000D__x000A_  {_x000D__x000A_    Switch ($Sender.Name)_x000D__x000A_    {_x000D__x000A_      "Process"_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        _x000D__x000A_        # Set Processing ToolStrip Menu Items_x000D__x000A_        $PILItelListToolStrip.Items["Pause"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Processing Item List"_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Pause"_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        _x000D__x000A_        # Set Pauseing ToolStrip Menu Items_x000D__x000A_        $PILItelListToolStrip.Items["Process"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Pause Processing Item List"_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_      "Stop"_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Clicked $($Sender.Name)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        _x000D__x000A_        # Set Stopping ToolStrip Menu Items_x000D__x000A_        $PILItelListToolStrip.Items["Process"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Pause"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_        $PILItelListToolStrip.SendToBack()_x000D__x000A_        _x000D__x000A_        # Re-Enable Main Menu Items_x000D__x000A_        $PILTopMenuStrip.Items["AddItems"].Enabled = $True_x000D__x000A_        $PILTopMenuStrip.Items["Configure"].Enabled = $True_x000D__x000A_        $PILTopMenuStrip.Items["ProcessItems"].Enabled = $True_x000D__x000A_        $PILTopMenuStrip.Items["ListData"].Enabled = $True_x000D__x000A_        _x000D__x000A_        # Re-Enable Right Click Menu_x000D__x000A_        $PILItemListContextMenuStrip.Enabled = $True_x000D__x000A_        _x000D__x000A_        # Enable ListView Sort_x000D__x000A_        $PILItemListListView.ListViewItemSorter.Enable = $True_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Stop Processing Item List"_x000D__x000A_        Break_x000D__x000A_      }_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILItelListToolStripItemClick ********_x000D__x000A__x000D__x000A_(New-MenuButton -Menu $PILItelListToolStrip -Text "Process" -Name "Process" -Tag "Process" -ToolTip "Process Item List" -DisplayStyle Image -TextImageRelation Overlay -ImageKey "Play64Icon" -ClickOnCheck -PassThru).add_Click({Start-PILItelListToolStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuButton -Menu $PILItelListToolStrip -Text "Pause" -Name "Pause" -Tag "Pause" -ToolTip "Pause Processing" -DisplayStyle Image -TextImageRelation Overlay -ImageKey "Pause64Icon" -ClickOnCheck -PassThru).add_Click({Start-PILItelListToolStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuButton -Menu $PILItelListToolStrip -Text "Stop" -Name "Stop" -Tag "Stop" -ToolTip "Stop Processing" -DisplayStyle Image -TextImageRelation Overlay -ImageKey "Stop64Icon" -ClickOnCheck -PassThru).add_Click({Start-PILItelListToolStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_$PILItelListToolStrip.Location = [System.Drawing.Point]::New((($PILMainPanel.ClientSize.Width - $PILItelListToolStrip.Width) / 2), ([MyConfig]::FormSpacer * 16))_x000D__x000A__x000D__x000A_#endregion ******** $PILMainPanel Controls ********_x000D__x000A__x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILTop MenuStrip_x000D__x000A_# ************************************************_x000D__x000A_#region $PILTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A_$PILTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A_$PILForm.Controls.Add($PILTopMenuStrip)_x000D__x000A_$PILForm.MainMenuStrip = $PILTopMenuStrip_x000D__x000A_$PILTopMenuStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_$PILTopMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Top_x000D__x000A_$PILTopMenuStrip.Enabled = $True_x000D__x000A_$PILTopMenuStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_$PILTopMenuStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILTopMenuStrip.ImageList = $PILSmallImageList_x000D__x000A_$PILTopMenuStrip.ImageScalingSize = [System.Drawing.Size]::New(16, 16)_x000D__x000A_$PILTopMenuStrip.Name = "PILTopMenuStrip"_x000D__x000A_$PILTopMenuStrip.ShowItemToolTips = $False_x000D__x000A_#$PILTopMenuStrip.TabIndex = 0_x000D__x000A_#$PILTopMenuStrip.TabStop = $False_x000D__x000A_#$PILTopMenuStrip.Tag = [System.Object]::New()_x000D__x000A_$PILTopMenuStrip.TextDirection = [System.Windows.Forms.ToolStripTextDirection]::Horizontal_x000D__x000A_#endregion $PILTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()_x000D__x000A__x000D__x000A_#region ******** Function Start-PILTopMenuStripItemClick ********_x000D__x000A_function Start-PILTopMenuStripItemClick_x000D__x000A_{_x000D__x000A_  &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_      Click Event for the PILTop MenuStripItem Control_x000D__x000A_    .DESCRIPTION_x000D__x000A_      Click Event for the PILTop MenuStripItem Control_x000D__x000A_    .PARAMETER Sender_x000D__x000A_       The Top Control that fired the Click Event_x000D__x000A_    .PARAMETER EventArg_x000D__x000A_       The Event Arguments for the Top Click Event_x000D__x000A_    .EXAMPLE_x000D__x000A_       Start-PILTopMenuStripItemClick -Sender $Sender -EventArg $EventArg_x000D__x000A_    .NOTES_x000D__x000A_      Original Function By kensw_x000D__x000A_  #&gt;_x000D__x000A_  [CmdletBinding()]_x000D__x000A_  param (_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [System.Windows.Forms.ToolStripItem]$Sender,_x000D__x000A_    [parameter(Mandatory = $True)]_x000D__x000A_    [Object]$EventArg_x000D__x000A_  )_x000D__x000A_  Write-Verbose -Message "Enter Click Event for $($MyInvocation.MyCommand)"_x000D__x000A__x000D__x000A_  [MyConfig]::AutoExit = 0_x000D__x000A__x000D__x000A_  Switch ($Sender.Name)_x000D__x000A_  {_x000D__x000A_    "AddList"_x000D__x000A_    {_x000D__x000A_      #region Add New Items List_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Add New Items for Processing"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      $DialogResult = Get-TextBoxInput -Title "Get Item List" -Message "Enter the list of items to add for processing" -Multi -NoDuplicates_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        $NewCount = 0_x000D__x000A_        $TmpSubItems = @(" ") * ([MyRuntime]::MaxColumns)_x000D__x000A_        ForEach ($TmpItem In $DialogResult.Items)_x000D__x000A_        {_x000D__x000A_          If (-not $PILItemListListView.Items.ContainsKey($TmpItem))_x000D__x000A_          {_x000D__x000A_            $TmpListItem = [System.Windows.Forms.ListViewItem]::New($TmpItem, "StatusInfo16Icon")_x000D__x000A_            $TmpListItem.Name = $TmpItem_x000D__x000A_            $TmpListItem.Font = [MyConfig]::Font.Regular_x000D__x000A_            $TmpListItem.SubItems.AddRange($TmpSubItems)_x000D__x000A_            [Void]$PILItemListListView.Items.Add($TmpListItem)_x000D__x000A_            $NewCount++_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Success_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Added $($NewCount) New Items for Processing"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Adding New Items for Processing"_x000D__x000A_      }_x000D__x000A_      _x000D__x000A_      Break_x000D__x000A_      #endregion Add New Items List_x000D__x000A_    }_x000D__x000A_    "ImportList"_x000D__x000A_    {_x000D__x000A_      #region Import Item List_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Importing Item List"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Get File to Import_x000D__x000A_      $PILOpenFileDialog.FileName = ""_x000D__x000A_      $PILOpenFileDialog.Filter = "CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|Supported Files|*.csv;*.txt|All Files (*.*)|*.*"_x000D__x000A_      $PILOpenFileDialog.FilterIndex = 3_x000D__x000A_      $PILOpenFileDialog.Multiselect = $False_x000D__x000A_      $PILOpenFileDialog.Title = "Select an Item List Import File"_x000D__x000A_      $PILOpenFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        Try_x000D__x000A_        {_x000D__x000A_          If ([System.IO.path]::GetExtension($PILOpenFileDialog.SafeFileName) -eq ".csv")_x000D__x000A_          {_x000D__x000A_            $TmpCSV = Import-Csv -Path $PILOpenFileDialog.FileName_x000D__x000A_            If ($TmpCSV.Count -gt 0)_x000D__x000A_            {_x000D__x000A_              $TmpColNames = @($TmpCSV[0].PSObject.Properties)_x000D__x000A_              If ($TmpColNames.Count -gt 1)_x000D__x000A_              {_x000D__x000A_                $DialogResult = Get-ComboBoxOption -Title "Select Item Column Name" -Message "Select the CSV Column Name that has the Lost of Items you want to Import." -SelectText "Select the CSV Column Name" -Items $TmpColNames -DisplayMember "Name" -ValueMember "MemberType"_x000D__x000A_                If ($DialogResult.Success)_x000D__x000A_                {_x000D__x000A_                  $TmpColName = $DialogResult.Item.Name_x000D__x000A_                }_x000D__x000A_                Else_x000D__x000A_                {_x000D__x000A_                  $TmpColName = "No Column Was Selected"_x000D__x000A_                }_x000D__x000A_              }_x000D__x000A_              Else_x000D__x000A_              {_x000D__x000A_                $TmpColName = $TmpColNames[0].Name_x000D__x000A_              }_x000D__x000A_              _x000D__x000A_              $TmpItems = @($TmpCSV | Select-Object -ExpandProperty $TmpColName)_x000D__x000A_            }_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            $TmpItems = @(Get-Content -Path $PILOpenFileDialog.FileName)_x000D__x000A_          }_x000D__x000A_          _x000D__x000A_          If ($TmpItems.Count -eq 0)_x000D__x000A_          {_x000D__x000A_            $PILBtmStatusStrip.Items["Status"].Text = "No Items were Found to Import"_x000D__x000A_          }_x000D__x000A_          Else_x000D__x000A_          {_x000D__x000A_            $NewCount = 0_x000D__x000A_            $TmpSubItems = @(" ") * ([MyRuntime]::MaxColumns)_x000D__x000A_            ForEach ($TmpItem In $TmpItems)_x000D__x000A_            {_x000D__x000A_              If (-not $PILItemListListView.Items.ContainsKey($TmpItem))_x000D__x000A_              {_x000D__x000A_                $TmpListItem = [System.Windows.Forms.ListViewItem]::New($TmpItem, "StatusInfo16Icon")_x000D__x000A_                $TmpListItem.Name = $TmpItem_x000D__x000A_                $TmpListItem.Font = [MyConfig]::Font.Regular_x000D__x000A_                $TmpListItem.SubItems.AddRange($TmpSubItems)_x000D__x000A_                [Void]$PILItemListListView.Items.Add($TmpListItem)_x000D__x000A_                $NewCount++_x000D__x000A_              }_x000D__x000A_            }_x000D__x000A_            _x000D__x000A_            # Success_x000D__x000A_            $PILBtmStatusStrip.Items["Status"].Text = "Successfully Added $($NewCount) New Items for Processing"_x000D__x000A_          }_x000D__x000A_        }_x000D__x000A_        Catch_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Error Importing Item List"_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILOpenFileDialog.FileName)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Importing Item List"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Import Item List_x000D__x000A_    }_x000D__x000A_    "LoadExport"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Load Exported Process-ItemList Data"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Get File to Import_x000D__x000A_      $PILOpenFileDialog.FileName = ""_x000D__x000A_      $PILOpenFileDialog.Filter = "CSV Files (*.csv)|*.csv|All Files (*.*)|*.*"_x000D__x000A_      $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_      $PILOpenFileDialog.Multiselect = $False_x000D__x000A_      $PILOpenFileDialog.Title = "Select a PIL Export Data File"_x000D__x000A_      $PILOpenFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        _x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # *****************************************_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        # *****************************************_x000D__x000A_        _x000D__x000A_        _x000D__x000A_        $HashTable = @{"ShowHeader" = $True; "ConfigFile" = $PILOpenFileDialog.FileName }_x000D__x000A_        $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Load-PILDataExport -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_        $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          _x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Load Exported Process-ItemList Data"_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILOpenFileDialog.FileName)_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "TotalColumns"_x000D__x000A_    {_x000D__x000A_      #region Set Total Columns_x000D__x000A_      $PILTopMenuStrip.Items["Configure"].DropDownItems["TotalColumns"].DropDownItems[[MyRuntime]::MaxColumns - 2].ImageKey = $Null_x000D__x000A_      [MyRuntime]::UpdateTotalColumn($Sender.Tag)_x000D__x000A_      $TmpColumns = [MyRuntime]::ThreadConfig.GetColumnNames()_x000D__x000A_      $PILItemListListView.BeginUpdate()_x000D__x000A_      $PILItemListListView.Columns.Clear()_x000D__x000A_      For ($I = 0; $I -lt ([MyRuntime]::MaxColumns); $I++)_x000D__x000A_      {_x000D__x000A_        New-ColumnHeader -ListView $PILItemListListView -Text ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Name ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Tag ([MyRuntime]::ThreadConfig.ColumnNames[$I]) -Width -2_x000D__x000A_      }_x000D__x000A_      $PILItemListListView.AutoResizeColumns([System.Windows.Forms.ColumnHeaderAutoResizeStyle]::HeaderSize)_x000D__x000A_      New-ColumnHeader -ListView $PILItemListListView -Text " " -Name "Blank" -Tag " " -Width ($PILForm.Width * 4)_x000D__x000A_      $PILItemListListView.EndUpdate()_x000D__x000A_      $PILTopMenuStrip.Items["Configure"].DropDownItems["TotalColumns"].DropDownItems[[MyRuntime]::MaxColumns - 2].ImageKey = "Selected16Icon"_x000D__x000A_      #endregion Set Total Columns_x000D__x000A_    }_x000D__x000A_    "ColumnNames"_x000D__x000A_    {_x000D__x000A_      #region Set Column Names_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Update Column Names"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      $DialogResult = Get-MultiTextBoxInput -Title "Update Column Names" -Message "Enter the New Column Names for the $([MyConfig]::ScriptName) Utility" -OrderedItems ([MyRuntime]::ThreadConfig.GetColumnNames()) -AllRequired_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_        $TmpNames = @($DialogResult.OrderedItems.Values)_x000D__x000A_        $Max = $TmpNames.Count_x000D__x000A_        For ($I = 0; $I -lt $Max; $I++)_x000D__x000A_        {_x000D__x000A_          $PILItemListListView.Columns[$I].Text = $TmpNames[$I]_x000D__x000A_        }_x000D__x000A_        [MyRuntime]::ThreadConfig.SetColumnNames($TmpNames)_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Updated Column Names"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Failed to Update Column Names"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Set Column Names_x000D__x000A_    }_x000D__x000A_    "ThreadScript"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Update PIL Threads Configuration"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      $DialogResult = Update-ThreadConfiguration_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Updated PIL Threads Configuration"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Updating PIL Threads Configuration"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "LoadConfig"_x000D__x000A_    {_x000D__x000A_      #region Load PIL Configuration_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Load PIL Configuration File"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Open Selected File_x000D__x000A_      $PILOpenFileDialog.FileName = ""_x000D__x000A_      $PILOpenFileDialog.Filter = "PIL Config File|*.PILConfig|All Files (*.*)|*.*"_x000D__x000A_      $PILOpenFileDialog.FilterIndex = 1_x000D__x000A_      $PILOpenFileDialog.Multiselect = $False_x000D__x000A_      $PILOpenFileDialog.Title = "Load PIL Configuration File"_x000D__x000A_      $PILOpenFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILOpenFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        $HashTable = @{"ShowHeader" = $True; "ConfigFile" = $PILOpenFileDialog.FileName }_x000D__x000A_        $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Load-PILConfigFIle -RichTextBox $RichTextBox -HashTable $HashTable }_x000D__x000A_        $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title ($PILBtmStatusStrip.Items["Status"].Text) -ButtonMid "OK" -HashTable $HashTable_x000D__x000A_        If ($DialogResult.Success)_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Success Loading PIL Configuration File"_x000D__x000A_        }_x000D__x000A_        Else_x000D__x000A_        {_x000D__x000A_          $PILBtmStatusStrip.Items["Status"].Text = "Errors Loading PIL Configuration File"_x000D__x000A_        }_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILOpenFileDialog.FileName)_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Loading PIL Configuration File"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Load PIL Configuration_x000D__x000A_    }_x000D__x000A_    "SaveConfig"_x000D__x000A_    {_x000D__x000A_      #region Save PIL Configuration File_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Save PIL Configuration File"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Save Export File_x000D__x000A_      $PILSaveFileDialog.FileName = ""_x000D__x000A_      $PILSaveFileDialog.Filter = "PIL Config File|*.PILConfig|All Files (*.*)|*.*"_x000D__x000A_      $PILSaveFileDialog.FilterIndex = 1_x000D__x000A_      $PILSaveFileDialog.Title = "Save PIL Configuration File"_x000D__x000A_      $PILSaveFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILSaveFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        # Save Config_x000D__x000A_        [MyRuntime]::ThreadConfig | Export-Clixml -Path $PILSaveFileDialog.FileName -Encoding ASCII_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILSaveFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILSaveFileDialog.FileName)_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Success Saving PIL Configuration File"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Saving PIL Configuration File"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Save PIL Configuration File_x000D__x000A_    }_x000D__x000A_    "ProcessItems"_x000D__x000A_    {_x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Processing Item List"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Disable Main Menu Iteme_x000D__x000A_      $PILTopMenuStrip.Items["AddItems"].Enabled = $False_x000D__x000A_      $PILTopMenuStrip.Items["Configure"].Enabled = $False_x000D__x000A_      $PILTopMenuStrip.Items["ProcessItems"].Enabled = $False_x000D__x000A_      $PILTopMenuStrip.Items["ListData"].Enabled = $False_x000D__x000A_      _x000D__x000A_      # Disable Right Click Menu_x000D__x000A_      $PILItemListContextMenuStrip.Enabled = $False_x000D__x000A_      _x000D__x000A_      # Disable ListView Sort_x000D__x000A_      $PILItemListListView.ListViewItemSorter.Enable = $False_x000D__x000A_      _x000D__x000A_      # Set Processing ToolStrip_x000D__x000A_      $PILItelListToolStrip.Items["Process"].Checked = $True_x000D__x000A_      $PILItelListToolStrip.Items["Pause"].Checked = $False_x000D__x000A_      $PILItelListToolStrip.Items["Stop"].Checked = $False_x000D__x000A_      $PILItelListToolStrip.BringToFront()_x000D__x000A_      Break_x000D__x000A_    }_x000D__x000A_    "ExportCSV"_x000D__x000A_    {_x000D__x000A_      #region Export CSV Report_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Export CSV Report"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      # Save Export File_x000D__x000A_      $PILSaveFileDialog.FileName = ""_x000D__x000A_      $PILSaveFileDialog.Filter = "CSV File (*.csv)|*.csv|All Files (*.*)|*.*"_x000D__x000A_      $PILSaveFileDialog.FilterIndex = 1_x000D__x000A_      $PILSaveFileDialog.Title = "Export PIL CSV Report"_x000D__x000A_      $PILSaveFileDialog.Tag = $Null_x000D__x000A_      $Response = $PILSaveFileDialog.ShowDialog()_x000D__x000A_      If ($Response -eq [System.Windows.Forms.DialogResult]::OK)_x000D__x000A_      {_x000D__x000A_        $TmpCount = ([MyRuntime]::MaxColumns - 1)_x000D__x000A_        $StringBuilder = [System.Text.StringBuilder]::New()_x000D__x000A_        [Void]$StringBuilder.AppendLine(($PILItemListListView.Columns[0..$($TmpCount)] | Select-Object -ExpandProperty Text) -Join ",")_x000D__x000A_        $PILItemListListView.Items | ForEach-Object -Process { [Void]$StringBuilder.AppendLine("`"{0}`"" -f (($PSItem.SubItems[0..$($TmpCount)] | Select-Object -ExpandProperty Text) -join "`",`"")) }_x000D__x000A_        ConvertFrom-Csv -InputObject (($StringBuilder.ToString())) -Delimiter "," | Export-Csv -Path $PILSaveFileDialog.FileName -NoTypeInformation -Encoding ASCII_x000D__x000A_        $StringBuilder.Clear()_x000D__x000A_        _x000D__x000A_        # Save Current Directory_x000D__x000A_        $PILSaveFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($PILSaveFileDialog.FileName)_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Success Exporting CSV Report"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Export CSV Report"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Export CSV Report_x000D__x000A_    }_x000D__x000A_    "ClearList"_x000D__x000A_    {_x000D__x000A_      #region Clear Item List_x000D__x000A_      _x000D__x000A_      # Set Status Message_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Clear Item List?"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      _x000D__x000A_      $DialogResult = Get-UserResponse -Title "Clear Item List?" -Message "Do you want to Clear the Item List?" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes -Icon ([System.Drawing.SystemIcons]::Question)_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Clear Item List_x000D__x000A_        $PILItemListListView.Items.Clear()_x000D__x000A_        _x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Successfully Cleared Item List"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Set Status Message_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Canceled Clearing Item List"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Clear Item List_x000D__x000A_    }_x000D__x000A_    "Help"_x000D__x000A_    {_x000D__x000A_      #region Show Help_x000D__x000A_      $PILBtmStatusStrip.Items["Status"].Text = "Show Help"_x000D__x000A_      $PILBtmStatusStrip.Refresh()_x000D__x000A_      $DialogResult = Show-ScriptInfo -Topics $ScriptInfoTopics -Title "$([MyConfig]::ScriptName) $([MyConfig]::ScriptVersion)" -InfoTitle "PIL Help Topics"_x000D__x000A_      If ($DialogResult.Success)_x000D__x000A_      {_x000D__x000A_        # Success_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Success Help Shown"_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # Failed_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Failed Help Shown"_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Show Help_x000D__x000A_    }_x000D__x000A_    "Exit"_x000D__x000A_    {_x000D__x000A_      #region Exit Utility_x000D__x000A_      If ([MyConfig]::Production)_x000D__x000A_      {_x000D__x000A_        $PILBtmStatusStrip.Items["Status"].Text = "Exiting $([MyConfig]::ScriptName)"_x000D__x000A_        $PILBtmStatusStrip.Refresh()_x000D__x000A_        $FCGForm.Close()_x000D__x000A_      }_x000D__x000A_      Else_x000D__x000A_      {_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_        $Host.EnterNestedPrompt()_x000D__x000A_        # **** Testing - Exit to Nested Prompt ****_x000D__x000A_      }_x000D__x000A_      Break_x000D__x000A_      #endregion Exit Utility_x000D__x000A_    }_x000D__x000A_  }_x000D__x000A__x000D__x000A_  Write-Verbose -Message "Exit Click Event for $($MyInvocation.MyCommand)"_x000D__x000A_}_x000D__x000A_#endregion ******** Function Start-PILTopMenuStripItemClick ********_x000D__x000A__x000D__x000A_$DropDownMenu = New-MenuItem -Menu $PILTopMenuStrip -Text "Add Items $([char]0x00BB)" -Name "AddItems" -Tag "AddItems" -DisplayStyle "ImageAndText" -ImageKey "AddItems16Icon" -TextImageRelation "ImageBeforeText" -PassThru_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Add Item List" -Name "AddList" -Tag "AddList" -DisplayStyle "ImageAndText" -ImageKey "Add16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Import Item List" -Name "ImportList" -Tag "ImportList" -DisplayStyle "ImageAndText" -ImageKey "Import16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_New-MenuSeparator -Menu $DropDownMenu_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Load Exported Data" -Name "LoadExport" -Tag "LoadExport" -DisplayStyle "ImageAndText" -ImageKey "LoadData16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_$DropDownMenu = New-MenuItem -Menu $PILTopMenuStrip -Text "Configure $([char]0x00BB)" -Name "Configure" -Tag "Configure" -DisplayStyle "ImageAndText" -ImageKey "Config16Icon" -TextImageRelation "ImageBeforeText" -PassThru_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Set Column Names" -Name "ColumnNames" -Tag "ColumnNames" -DisplayStyle "ImageAndText" -ImageKey "Column16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_$SubDropDownMenu = New-MenuItem -Menu $DropDownMenu -Text "Number of Columns" -Name "TotalColumns" -Tag "TotalColumns" -DisplayStyle "ImageAndText" -ImageKey "Calc16Icon" -TextImageRelation "ImageBeforeText" -PassThru_x000D__x000A_For ($I = 2; $I -le [MyRuntime]::MaxColumns; $I++)_x000D__x000A_{_x000D__x000A_  (New-MenuItem -Menu $SubDropDownMenu -Text ("{0:00} Total Columns" -f $I) -ToolTip "Set the Number of Item List Columns" -Name "TotalColumns" -Tag $I -DisplayStyle "ImageAndText" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_}_x000D__x000A_$SubDropDownMenu.DropDownItems[$SubDropDownMenu.DropDownItems.Count - 1].ImageKey = "Selected16Icon"_x000D__x000A__x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Config Thread Script" -Name "ThreadScript" -Tag "ThreadScript" -DisplayStyle "ImageAndText" -ImageKey "Threads16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_New-MenuSeparator -Menu $DropDownMenu_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Load Configuration" -Name "LoadConfig" -Tag "LoadConfig" -DisplayStyle "ImageAndText" -ImageKey "LoadConfig16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Save Configuration" -Name "SaveConfig" -Tag "SaveConfig" -DisplayStyle "ImageAndText" -ImageKey "SaveConfig16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_New-MenuSeparator -Menu $PILTopMenuStrip_x000D__x000A__x000D__x000A_(New-MenuItem -Menu $PILTopMenuStrip -Text "Process Items" -Name "ProcessItems" -Tag "ProcessItems" -DisplayStyle "ImageAndText" -ImageKey "Process16Icon" -TextImageRelation "ImageBeforeText" -ClickOnCheck -Check -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_$DropDownMenu = New-MenuItem -Menu $PILTopMenuStrip -Text "List Data $([char]0x00BB)" -Name "ListData" -Tag "ListData" -DisplayStyle "ImageAndText" -ImageKey "ListData16Icon" -TextImageRelation "ImageBeforeText" -PassThru_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Export CSV Report" -Name "ExportCSV" -Tag "ExportCSV" -DisplayStyle "ImageAndText" -ImageKey "Export16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_New-MenuSeparator -Menu $DropDownMenu_x000D__x000A_(New-MenuItem -Menu $DropDownMenu -Text "Clear Item List Data" -Name "ClearList" -Tag "ClearList" -DisplayStyle "ImageAndText" -ImageKey "Clear16Icon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_New-MenuSeparator -Menu $PILTopMenuStrip_x000D__x000A__x000D__x000A_(New-MenuItem -Menu $PILTopMenuStrip -Text "&amp;Help" -Name "Help" -Tag "Help" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A_(New-MenuItem -Menu $PILTopMenuStrip -Text "E&amp;xit" -Name "Exit" -Tag "Exit" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -TextImageRelation "ImageBeforeText" -PassThru).add_Click({Start-PILTopMenuStripItemClick -Sender $This -EventArg $PSItem})_x000D__x000A__x000D__x000A_# ************************************************_x000D__x000A_# PILBtm StatusStrip_x000D__x000A_# ************************************************_x000D__x000A_#region $PILBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A_$PILBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A_$PILForm.Controls.Add($PILBtmStatusStrip)_x000D__x000A_$PILBtmStatusStrip.BackColor = [MyConfig]::Colors.Back_x000D__x000A_$PILBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom_x000D__x000A_$PILBtmStatusStrip.Enabled = $True_x000D__x000A_$PILBtmStatusStrip.Font = [MyConfig]::Font.Regular_x000D__x000A_$PILBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore_x000D__x000A_$PILBtmStatusStrip.ImageList = $PILSmallImageList_x000D__x000A_$PILBtmStatusStrip.ImageScalingSize = [System.Drawing.Size]::New(16, 16)_x000D__x000A_$PILBtmStatusStrip.Name = "PILBtmStatusStrip"_x000D__x000A_$PILBtmStatusStrip.ShowItemToolTips = $False_x000D__x000A_#$PILBtmStatusStrip.TabIndex = 0_x000D__x000A_#$PILBtmStatusStrip.TabStop = $False_x000D__x000A_#$PILBtmStatusStrip.Tag = [System.Object]::New()_x000D__x000A_$PILBtmStatusStrip.TextDirection = [System.Windows.Forms.ToolStripTextDirection]::Horizontal_x000D__x000A_#endregion $PILBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()_x000D__x000A__x000D__x000A_New-MenuLabel -Menu $PILBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"_x000D__x000A__x000D__x000A_#endregion ******** Controls for PIL Form ********_x000D__x000A__x000D__x000A_#endregion ******** End **** PIL **** End ********_x000D__x000A__x000D__x000A_#region ******** Start Form  ********_x000D__x000A_# *********************_x000D__x000A_# Add Form Code here..._x000D__x000A_# *********************_x000D__x000A_[System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"_x000D__x000A_if ([MyConfig]::Production)_x000D__x000A_{_x000D__x000A_  [Void][Console.Window]::Hide()_x000D__x000A_}_x000D__x000A__x000D__x000A_Try_x000D__x000A_{_x000D__x000A_  [System.Windows.Forms.Application]::Run($PILForm)_x000D__x000A_}_x000D__x000A_Catch_x000D__x000A_{_x000D__x000A_  if (-not [MyConfig]::Production)_x000D__x000A_  {_x000D__x000A_    # **** Testing - Exit to Nested Prompt ****_x000D__x000A_    Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"_x000D__x000A_    #$Host.EnterNestedPrompt()_x000D__x000A_    # **** Testing - Exit to Nested Prompt ****_x000D__x000A_  }_x000D__x000A_}_x000D__x000A__x000D__x000A_$PILOpenFileDialog.Dispose()_x000D__x000A_$PILSaveFileDialog.Dispose()_x000D__x000A_$PILFormComponents.Dispose()_x000D__x000A_$PILForm.Dispose()_x000D__x000A_# *********************_x000D__x000A_# Add Form Code here..._x000D__x000A_# *********************_x000D__x000A__x000D__x000A_#endregion ******** Start Form  ********_x000D__x000A__x000D__x000A_if ([MyConfig]::Production)_x000D__x000A_{_x000D__x000A_  [System.Environment]::Exit(0)_x000D__x000A_}_x000D__x000A_</S>
    </Props>
  </Obj>
</Objs>